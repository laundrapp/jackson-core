//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonEncoding.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonEncoding.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface ComFasterxmlJacksonCoreJsonEncoding () {
 @public
  NSString *_javaName_;
  jboolean _bigEndian_;
  jint _bits_;
}

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonEncoding, _javaName_, NSString *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(ComFasterxmlJacksonCoreJsonEncoding *self, NSString *javaName, jboolean bigEndian, jint bits, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonEncoding)

ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_values_[5];

@implementation ComFasterxmlJacksonCoreJsonEncoding

- (NSString *)getJavaName {
  return _javaName_;
}

- (jboolean)isBigEndian {
  return _bigEndian_;
}

- (jint)bits {
  return _bits_;
}

+ (IOSObjectArray *)values {
  return ComFasterxmlJacksonCoreJsonEncoding_values();
}

+ (ComFasterxmlJacksonCoreJsonEncoding *)valueOfWithNSString:(NSString *)name {
  return ComFasterxmlJacksonCoreJsonEncoding_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LComFasterxmlJacksonCoreJsonEncoding;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonEncoding;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getJavaName);
  methods[1].selector = @selector(isBigEndian);
  methods[2].selector = @selector(bits);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "UTF16_BE", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "UTF16_LE", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "UTF32_BE", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "UTF32_LE", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "_javaName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bigEndian_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bits_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF8), &JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_BE), &JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_LE), &JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_BE), &JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_LE), "Ljava/lang/Enum<Lcom/fasterxml/jackson/core/JsonEncoding;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonEncoding = { "JsonEncoding", "com.fasterxml.jackson.core", ptrTable, methods, fields, 7, 0x4011, 5, 8, -1, -1, -1, 7, -1 };
  return &_ComFasterxmlJacksonCoreJsonEncoding;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonEncoding class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF8) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(e, @"UTF-8", false, 8, @"UTF8", 0);
    ((void) (JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_BE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(e, @"UTF-16BE", true, 16, @"UTF16_BE", 1);
    ((void) (JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_LE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(e, @"UTF-16LE", false, 16, @"UTF16_LE", 2);
    ((void) (JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_BE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(e, @"UTF-32BE", true, 32, @"UTF32_BE", 3);
    ((void) (JreEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_LE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(e, @"UTF-32LE", false, 32, @"UTF32_LE", 4);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonEncoding)
  }
}

@end

void ComFasterxmlJacksonCoreJsonEncoding_initWithNSString_withBoolean_withInt_withNSString_withInt_(ComFasterxmlJacksonCoreJsonEncoding *self, NSString *javaName, jboolean bigEndian, jint bits, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->_javaName_, javaName);
  self->_bigEndian_ = bigEndian;
  self->_bits_ = bits;
}

IOSObjectArray *ComFasterxmlJacksonCoreJsonEncoding_values() {
  ComFasterxmlJacksonCoreJsonEncoding_initialize();
  return [IOSObjectArray arrayWithObjects:ComFasterxmlJacksonCoreJsonEncoding_values_ count:5 type:ComFasterxmlJacksonCoreJsonEncoding_class_()];
}

ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_valueOfWithNSString_(NSString *name) {
  ComFasterxmlJacksonCoreJsonEncoding_initialize();
  for (int i = 0; i < 5; i++) {
    ComFasterxmlJacksonCoreJsonEncoding *e = ComFasterxmlJacksonCoreJsonEncoding_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_fromOrdinal(NSUInteger ordinal) {
  ComFasterxmlJacksonCoreJsonEncoding_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComFasterxmlJacksonCoreJsonEncoding_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonEncoding)
