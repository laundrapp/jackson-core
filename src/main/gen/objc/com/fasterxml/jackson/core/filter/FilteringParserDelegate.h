//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringParserDelegate")
#ifdef RESTRICT_ComFasterxmlJacksonCoreFilterFilteringParserDelegate
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringParserDelegate 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringParserDelegate 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreFilterFilteringParserDelegate

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreFilterFilteringParserDelegate_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringParserDelegate || defined(INCLUDE_ComFasterxmlJacksonCoreFilterFilteringParserDelegate))
#define ComFasterxmlJacksonCoreFilterFilteringParserDelegate_

#define RESTRICT_ComFasterxmlJacksonCoreUtilJsonParserDelegate 1
#define INCLUDE_ComFasterxmlJacksonCoreUtilJsonParserDelegate 1
#include "com/fasterxml/jackson/core/util/JsonParserDelegate.h"

@class ComFasterxmlJacksonCoreFilterTokenFilter;
@class ComFasterxmlJacksonCoreFilterTokenFilterContext;
@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreSymFieldNameMatcher;
@class ComFasterxmlJacksonCoreTokenStreamContext;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief Specialized <code>JsonParserDelegate</code> that allows use of 
 <code>TokenFilter</code> for outputting a subset of content that
  is visible to caller
 */
@interface ComFasterxmlJacksonCoreFilterFilteringParserDelegate : ComFasterxmlJacksonCoreUtilJsonParserDelegate {
 @public
  /*!
   @brief Object consulted to determine whether to write parts of content generator
  is asked to write or not.
   */
  ComFasterxmlJacksonCoreFilterTokenFilter *rootFilter_;
  /*!
   @brief Flag that determines whether filtering will continue after the first
  match is indicated or not: if `false`, output is based on just the first
  full match (returning <code>TokenFilter.INCLUDE_ALL</code>) and no more
  checks are made; if `true` then filtering will be applied as necessary
  until end of content.
   */
  jboolean _allowMultipleMatches_;
  /*!
   @brief Flag that determines whether path leading up to included content should
  also be automatically included or not.If `false`, no path inclusion is
  done and only explicitly included entries are output; if `true` then
  path from main level down to match is also included as necessary.
   */
  jboolean _includePath_;
  /*!
   @brief Last token retrieved via <code>nextToken</code>, if any.
   Null before the first call to <code>nextToken()</code>,
  as well as if token has been explicitly cleared
   */
  ComFasterxmlJacksonCoreJsonToken *_currToken_;
  /*!
   @brief Last cleared token, if any: that is, value that was in
  effect when <code>clearCurrentToken</code> was called.
   */
  ComFasterxmlJacksonCoreJsonToken *_lastClearedToken_;
  /*!
   @brief During traversal this is the actual "open" parse tree, which sometimes
  is the same as <code>_exposedContext</code>, and at other times is ahead
  of it.Note that this context is never null.
   */
  ComFasterxmlJacksonCoreFilterTokenFilterContext *_headContext_;
  /*!
   @brief In cases where <code>_headContext</code> is "ahead" of context exposed to
  caller, this context points to what is currently exposed to caller.
   When the two are in sync, this context reference will be <code>null</code>.
   */
  ComFasterxmlJacksonCoreFilterTokenFilterContext *_exposedContext_;
  /*!
   @brief State that applies to the item within container, used where applicable.
   Specifically used to pass inclusion state between property name and
  property, and also used for array elements.
   */
  ComFasterxmlJacksonCoreFilterTokenFilter *_itemFilter_;
  /*!
   @brief Number of tokens for which <code>TokenFilter.INCLUDE_ALL</code>
  has been returned.
   */
  jint _matchCount_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p
                       withComFasterxmlJacksonCoreFilterTokenFilter:(ComFasterxmlJacksonCoreFilterTokenFilter *)f
                                                        withBoolean:(jboolean)includePath
                                                        withBoolean:(jboolean)allowMultipleMatches;

- (void)clearCurrentToken;

- (NSString *)currentName;

- (ComFasterxmlJacksonCoreJsonToken *)currentToken;

- (jint)currentTokenId;

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation;

- (ComFasterxmlJacksonCoreFilterTokenFilter *)getFilter;

- (ComFasterxmlJacksonCoreJsonToken *)getLastClearedToken;

/*!
 @brief Accessor for finding number of matches, where specific token and sub-tree
  starting (if structured type) are passed.
 */
- (jint)getMatchCount;

- (ComFasterxmlJacksonCoreTokenStreamContext *)getParsingContext;

- (jboolean)hasCurrentToken;

- (jboolean)hasTokenWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t;

- (jboolean)hasTokenIdWithInt:(jint)id_;

- (jboolean)isExpectedStartArrayToken;

- (jboolean)isExpectedStartObjectToken;

- (NSString *)nextFieldName;

- (jint)nextFieldNameWithComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)matcher;

- (jboolean)nextFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)str;

- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

- (ComFasterxmlJacksonCoreJsonToken *)nextValue;

- (void)overrideCurrentNameWithNSString:(NSString *)name;

/*!
 @brief Need to override, re-implement similar to how method defined in 
 <code>com.fasterxml.jackson.core.base.ParserMinimalBase</code>, to keep
  state correct here.
 */
- (ComFasterxmlJacksonCoreJsonParser *)skipChildren;

#pragma mark Protected

- (ComFasterxmlJacksonCoreTokenStreamContext *)_filterContext;

/*!
 @brief Offlined handling for cases where there was no buffered token to
  return, and the token read next could not be returned as-is,
  at least not yet, but where we have not yet established that
  buffering is needed.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_nextToken2;

/*!
 @brief Method called when a new potentially included context is found.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_nextTokenWithBufferingWithComFasterxmlJacksonCoreFilterTokenFilterContext:(ComFasterxmlJacksonCoreFilterTokenFilterContext *)buffRoot;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreFilterFilteringParserDelegate)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, rootFilter_, ComFasterxmlJacksonCoreFilterTokenFilter *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, _currToken_, ComFasterxmlJacksonCoreJsonToken *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, _lastClearedToken_, ComFasterxmlJacksonCoreJsonToken *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, _headContext_, ComFasterxmlJacksonCoreFilterTokenFilterContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, _exposedContext_, ComFasterxmlJacksonCoreFilterTokenFilterContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate, _itemFilter_, ComFasterxmlJacksonCoreFilterTokenFilter *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreFilterFilteringParserDelegate_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreFilterFilteringParserDelegate *self, ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterFilteringParserDelegate *new_ComFasterxmlJacksonCoreFilterFilteringParserDelegate_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterFilteringParserDelegate *create_ComFasterxmlJacksonCoreFilterFilteringParserDelegate_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreJsonParser *p, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreFilterFilteringParserDelegate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringParserDelegate")
