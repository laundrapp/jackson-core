//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/BinaryNameMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/sym/BinaryNameMatcher.h"
#include "com/fasterxml/jackson/core/sym/FieldNameMatcher.h"
#include "com/fasterxml/jackson/core/sym/HashedMatcherBase.h"
#include "com/fasterxml/jackson/core/sym/SimpleNameMatcher.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComFasterxmlJacksonCoreSymBinaryNameMatcher () {
 @public
  /*!
   @brief Primary hash information area: consists of <code>2 * _hashSize</code>
  entries of 16 bytes (4 ints), arranged in a cascading lookup
  structure (details of which may be tweaked depending on expected rates
  of collisions).
   */
  IOSIntArray *_hashArea_;
  /*!
   @brief Number of slots for primary entries within <code>_hashArea</code>; which is
  at most <code>1/8</code> of actual size of the underlying array (4-int slots,
  primary covers only half of the area; plus, additional area for longer
  symbols after hash area).
   */
  jint _hashSize_;
  /*!
   @brief Offset within <code>_hashArea</code> where secondary entries start
   */
  jint _secondaryStart_;
  /*!
   @brief Offset within <code>_hashArea</code> where tertiary entries start
   */
  jint _tertiaryStart_;
  /*!
   @brief Constant that determines size of buckets for tertiary entries: 
 <code>1 &lt;&lt; _tertiaryShift</code> is the size, and shift value
  is also used for translating from primary offset into
  tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
   <p>
  Default value is 2, for buckets of 4 slots; grows bigger with
  bigger table sizes.
   */
  jint _tertiaryShift_;
  /*!
   @brief Total number of Strings in the symbol table
   */
  jint _count_;
  /*!
   @brief Pointer to the offset within spill-over area where there is room
  for more spilled over entries (if any).
   Spill over area is within fixed-size portion of <code>_hashArea</code>.
   */
  jint _spilloverEnd_;
  /*!
   @brief Offset within <code>_hashArea</code> that follows main slots and contains
  quads for longer names (13 bytes or longer), and points to the
  first available int that may be used for appending quads of the next
  long name.
   Note that long name area follows immediately after the fixed-size
  main hash area (<code>_hashArea</code>).
   */
  jint _longNameOffset_;
}

/*!
 @brief Constructor used for creating per-<code>JsonFactory</code> "root"
  symbol tables: ones used for merging and sharing common symbols
 @param entryCount Number of Strings to contain
 @param sz Size of logical hash area
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)matcher
                                                            withNSStringArray:(IOSObjectArray *)nameLookup
                                                                      withInt:(jint)hashSize;

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)_constructWithJavaUtilList:(id<JavaUtilList>)symbols
                            withComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)base;

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1;

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1
                    withInt:(jint)q2;

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1
                    withInt:(jint)q2
                    withInt:(jint)q3;

- (jint)addNameWithNSString:(NSString *)name
               withIntArray:(IOSIntArray *)q
                    withInt:(jint)qlen;

/*!
 @brief Method called to find the location within hash table to add a new symbol in.
 */
- (jint)_findOffsetForAddWithInt:(jint)hash_;

- (jint)_appendLongNameWithIntArray:(IOSIntArray *)quads
                            withInt:(jint)qlen;

- (jint)_calcOffsetWithInt:(jint)hash_;

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1;

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1
                     withInt:(jint)q2;

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1
                     withInt:(jint)q2
                     withInt:(jint)q3;

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)hash_
                withIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen;

- (jboolean)_verifyLongNameWithIntArray:(IOSIntArray *)q
                                withInt:(jint)qlen
                                withInt:(jint)spillOffset;

- (jboolean)_verifyLongName2WithIntArray:(IOSIntArray *)q
                                 withInt:(jint)qlen
                                 withInt:(jint)spillOffset;

+ (jint)_decodeFullWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset;

+ (jint)_decodeLastWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset
                         withInt:(jint)bytes;

- (jint)_lengthAndIndexWithInt:(jint)qlen;

/*!
 @brief Helper method that calculates start of the spillover area
 */
- (jint)_spilloverStart;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymBinaryNameMatcher, _hashArea_, IOSIntArray *)

inline jlong ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_serialVersionUID(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, serialVersionUID, jlong)

inline jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_MAX_LENGTH_IN_QUADS(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_LENGTH_IN_QUADS 32767
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, MAX_LENGTH_IN_QUADS, jint)

inline jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_MULT(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT 33
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, MULT, jint)

inline jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_MULT2(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT2 65599
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, MULT2, jint)

inline jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_MULT3(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT3 31
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, MULT3, jint)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymBinaryNameMatcher *new_ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymBinaryNameMatcher *create_ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher__constructWithJavaUtilList_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(id<JavaUtilList> symbols, ComFasterxmlJacksonCoreSymSimpleNameMatcher *base);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1, jint q2);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1, jint q2, jint q3);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, IOSIntArray *q, jint qlen);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint hash_);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__appendLongNameWithIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *quads, jint qlen);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint hash_);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1, jint q2);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1, jint q2, jint q3);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint hash_, IOSIntArray *q, jint qlen);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *q, jint qlen, jint spillOffset);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongName2WithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *q, jint qlen, jint spillOffset);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(IOSByteArray *b, jint offset);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint bytes);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint qlen);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self);

@implementation ComFasterxmlJacksonCoreSymBinaryNameMatcher

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)matcher
                                                            withNSStringArray:(IOSObjectArray *)nameLookup
                                                                      withInt:(jint)hashSize {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(self, matcher, nameLookup, hashSize);
  return self;
}

+ (jint)_calcTertiaryShiftWithInt:(jint)primarySlots {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcTertiaryShiftWithInt_(primarySlots);
}

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructFromWithJavaUtilList:(id<JavaUtilList>)fields
                                                                   withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructFromWithJavaUtilList_withBoolean_(fields, alreadyInterned);
}

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructWithJavaUtilList:(id<JavaUtilList>)symbols {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructWithJavaUtilList_(symbols);
}

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)fields
                                                                              withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(fields, alreadyInterned);
}

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)_constructWithJavaUtilList:(id<JavaUtilList>)symbols
                            withComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)base {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__constructWithJavaUtilList_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(symbols, base);
}

- (jint)addNameWithNSString:(NSString *)name {
  IOSByteArray *ch = [((NSString *) nil_chk(name)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
  jint len = ((IOSByteArray *) nil_chk(ch))->size_;
  if (len <= 12) {
    if (len <= 4) {
      return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_(self, name, ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(ch, 0, len));
    }
    jint q1 = ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(ch, 0);
    if (len <= 8) {
      return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_(self, name, q1, ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(ch, 4, len - 4));
    }
    return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_withInt_(self, name, q1, ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(ch, 4), ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(ch, 8, len - 8));
  }
  IOSIntArray *quads = ComFasterxmlJacksonCoreSymBinaryNameMatcher__quadsWithNSString_(name);
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withIntArray_withInt_(self, name, quads, ((IOSIntArray *) nil_chk(quads))->size_);
}

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_(self, name, q1);
}

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1
                    withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_(self, name, q1, q2);
}

- (jint)addNameWithNSString:(NSString *)name
                    withInt:(jint)q1
                    withInt:(jint)q2
                    withInt:(jint)q3 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_withInt_(self, name, q1, q2, q3);
}

- (jint)addNameWithNSString:(NSString *)name
               withIntArray:(IOSIntArray *)q
                    withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withIntArray_withInt_(self, name, q, qlen);
}

- (jint)_findOffsetForAddWithInt:(jint)hash_ {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(self, hash_);
}

- (jint)_appendLongNameWithIntArray:(IOSIntArray *)quads
                            withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__appendLongNameWithIntArray_withInt_(self, quads, qlen);
}

- (jint)size {
  return _count_;
}

- (jint)bucketCount {
  return _hashSize_;
}

- (jint)primaryQuadCount {
  jint count = 0;
  for (jint offset = 3, end = _secondaryStart_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)secondaryQuadCount {
  jint count = 0;
  jint offset = _secondaryStart_ + 3;
  for (jint end = _tertiaryStart_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)tertiaryQuadCount {
  jint count = 0;
  jint offset = _tertiaryStart_ + 3;
  for (jint end = offset + _hashSize_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)spilloverQuadCount {
  return JreRShift32((_spilloverEnd_ - ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self)), 2);
}

- (jint)totalCount {
  jint count = 0;
  for (jint offset = 3, end = (JreLShift32(_hashSize_, 3)); offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)matchByQuadWithInt:(jint)q1 {
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, [self calcHashWithInt:q1]);
  IOSIntArray *hashArea = _hashArea_;
  jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if ((lenAndIndex & (jint) 0xFFFF) == 1) {
    if (IOSIntArray_Get(hashArea, offset) == q1) {
      return JreRShift32(lenAndIndex, 16);
    }
  }
  else if (lenAndIndex == 0) {
    return -1;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  lenAndIndex = IOSIntArray_Get(hashArea, offset2 + 3);
  if ((lenAndIndex & (jint) 0xFFFF) == 1) {
    if (IOSIntArray_Get(hashArea, offset2) == q1) {
      return JreRShift32(lenAndIndex, 16);
    }
  }
  else if (lenAndIndex == 0) {
    return -1;
  }
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_(self, offset, q1);
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2 {
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, [self calcHashWithInt:q1 withInt:q2]);
  IOSIntArray *hashArea = _hashArea_;
  jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if ((lenAndIndex & (jint) 0xFFFF) == 2) {
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1))) {
      return JreRShift32(lenAndIndex, 16);
    }
  }
  else if (lenAndIndex == 0) {
    return -1;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  jint lenAndIndex2 = IOSIntArray_Get(hashArea, offset2 + 3);
  if ((lenAndIndex2 & (jint) 0xFFFF) == 2) {
    if ((q1 == IOSIntArray_Get(hashArea, offset2)) && (q2 == IOSIntArray_Get(hashArea, offset2 + 1))) {
      return JreRShift32(lenAndIndex2, 16);
    }
  }
  else if (lenAndIndex2 == 0) {
    return -1;
  }
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_(self, offset, q1, q2);
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2
                   withInt:(jint)q3 {
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, [self calcHashWithInt:q1 withInt:q2 withInt:q3]);
  IOSIntArray *hashArea = _hashArea_;
  jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if ((lenAndIndex & (jint) 0xFFFF) == 3) {
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (IOSIntArray_Get(hashArea, offset + 1) == q2) && (IOSIntArray_Get(hashArea, offset + 2) == q3)) {
      return JreRShift32(lenAndIndex, 16);
    }
  }
  else if (lenAndIndex == 0) {
    return -1;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  jint lenAndIndex2 = IOSIntArray_Get(hashArea, offset2 + 3);
  if ((lenAndIndex2 & (jint) 0xFFFF) == 3) {
    if ((q1 == IOSIntArray_Get(hashArea, offset2)) && (IOSIntArray_Get(hashArea, offset2 + 1) == q2) && (IOSIntArray_Get(hashArea, offset2 + 2) == q3)) {
      return JreRShift32(lenAndIndex2, 16);
    }
  }
  else if (lenAndIndex2 == 0) {
    return -1;
  }
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_withInt_(self, offset, q1, q2, q3);
}

- (jint)matchByQuadWithIntArray:(IOSIntArray *)q
                        withInt:(jint)qlen {
  if (qlen < 4) {
    switch (qlen) {
      case 3:
      return [self matchByQuadWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1) withInt:IOSIntArray_Get(q, 2)];
      case 2:
      return [self matchByQuadWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1)];
      case 1:
      return [self matchByQuadWithInt:IOSIntArray_Get(nil_chk(q), 0)];
      default:
      return -1;
    }
  }
  jint hash_ = [self calcHashWithIntArray:q withInt:qlen];
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, hash_);
  IOSIntArray *hashArea = _hashArea_;
  jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if ((hash_ == IOSIntArray_Get(hashArea, offset)) && ((lenAndIndex & (jint) 0xFFFF) == qlen)) {
    if (ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
      return JreRShift32(lenAndIndex, 16);
    }
  }
  if (lenAndIndex == 0) {
    return -1;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  jint lenAndIndex2 = IOSIntArray_Get(hashArea, offset2 + 3);
  if ((hash_ == IOSIntArray_Get(hashArea, offset2)) && ((lenAndIndex2 & (jint) 0xFFFF) == qlen)) {
    if (ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset2 + 1))) {
      return JreRShift32(lenAndIndex2, 16);
    }
  }
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withIntArray_withInt_(self, offset, hash_, q, qlen);
}

- (jint)_calcOffsetWithInt:(jint)hash_ {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, hash_);
}

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_(self, origOffset, q1);
}

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1
                     withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_(self, origOffset, q1, q2);
}

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)q1
                     withInt:(jint)q2
                     withInt:(jint)q3 {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_withInt_(self, origOffset, q1, q2, q3);
}

- (jint)_findTertiaryWithInt:(jint)origOffset
                     withInt:(jint)hash_
                withIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withIntArray_withInt_(self, origOffset, hash_, q, qlen);
}

- (jboolean)_verifyLongNameWithIntArray:(IOSIntArray *)q
                                withInt:(jint)qlen
                                withInt:(jint)spillOffset {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
}

- (jboolean)_verifyLongName2WithIntArray:(IOSIntArray *)q
                                 withInt:(jint)qlen
                                 withInt:(jint)spillOffset {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongName2WithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
}

- (jint)calcHashWithInt:(jint)q1 {
  jint hash_ = q1 + (JreURShift32(q1, 16)) ^ (JreLShift32(q1, 3));
  return hash_ + (JreURShift32(hash_, 11));
}

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2 {
  jint hash_ = q1 + (JreURShift32(q1, 15)) ^ (JreURShift32(q1, 9));
  hash_ += (q2 * ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT) ^ (JreURShift32(q2, 15));
  hash_ += (JreURShift32(hash_, 7)) + (JreURShift32(hash_, 3));
  return hash_;
}

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2
                withInt:(jint)q3 {
  jint hash_ = q1 + (JreURShift32(q1, 15)) ^ (JreURShift32(q1, 9));
  hash_ = (hash_ * ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT) + q2 ^ (JreURShift32(q2, 15)) + (JreRShift32(q2, 7));
  hash_ = (hash_ * ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT3) + q3 ^ (JreURShift32(q3, 13)) + (JreRShift32(q3, 9));
  hash_ += (JreURShift32(hash_, 4));
  return hash_;
}

- (jint)calcHashWithIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen {
  if (qlen < 4) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  jint hash_ = IOSIntArray_Get(nil_chk(q), 0);
  hash_ += (JreURShift32(hash_, 9));
  hash_ += IOSIntArray_Get(q, 1);
  hash_ += (JreURShift32(hash_, 15));
  hash_ *= ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT;
  hash_ ^= IOSIntArray_Get(q, 2);
  hash_ += (JreURShift32(hash_, 4));
  for (jint i = 3; i < qlen; ++i) {
    jint next = IOSIntArray_Get(q, i);
    next = next ^ (JreRShift32(next, 21));
    hash_ += next;
  }
  hash_ *= ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT2;
  hash_ += (JreURShift32(hash_, 19));
  hash_ ^= (JreLShift32(hash_, 5));
  return hash_;
}

- (NSString *)description {
  jint pri = [self primaryQuadCount];
  jint sec = [self secondaryQuadCount];
  jint tert = [self tertiaryQuadCount];
  jint spill = [self spilloverQuadCount];
  jint total = [self totalCount];
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getName], JavaLangInteger_valueOfWithInt_(_count_), JavaLangInteger_valueOfWithInt_(_hashSize_), JavaLangInteger_valueOfWithInt_(pri), JavaLangInteger_valueOfWithInt_(sec), JavaLangInteger_valueOfWithInt_(tert), JavaLangInteger_valueOfWithInt_(spill), JavaLangInteger_valueOfWithInt_((pri + sec + tert + spill)), JavaLangInteger_valueOfWithInt_(total) } count:9 type:NSObject_class_()]);
}

+ (IOSIntArray *)_quadsWithNSString:(NSString *)name {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__quadsWithNSString_(name);
}

+ (jint)_decodeFullWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(b, offset);
}

+ (jint)_decodeLastWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset
                         withInt:(jint)bytes {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(b, offset, bytes);
}

- (jint)_lengthAndIndexWithInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(self, qlen);
}

- (jint)_spilloverStart {
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self);
}

- (void)dealloc {
  RELEASE_(_hashArea_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymBinaryNameMatcher;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymBinaryNameMatcher;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymBinaryNameMatcher;", 0x9, 9, 4, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymBinaryNameMatcher;", 0xa, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 19, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 25, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 31, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 34, 14, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 37, 38, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:withNSStringArray:withInt:);
  methods[1].selector = @selector(_calcTertiaryShiftWithInt:);
  methods[2].selector = @selector(constructFromWithJavaUtilList:withBoolean:);
  methods[3].selector = @selector(constructWithJavaUtilList:);
  methods[4].selector = @selector(constructCaseInsensitiveWithJavaUtilList:withBoolean:);
  methods[5].selector = @selector(_constructWithJavaUtilList:withComFasterxmlJacksonCoreSymSimpleNameMatcher:);
  methods[6].selector = @selector(addNameWithNSString:);
  methods[7].selector = @selector(addNameWithNSString:withInt:);
  methods[8].selector = @selector(addNameWithNSString:withInt:withInt:);
  methods[9].selector = @selector(addNameWithNSString:withInt:withInt:withInt:);
  methods[10].selector = @selector(addNameWithNSString:withIntArray:withInt:);
  methods[11].selector = @selector(_findOffsetForAddWithInt:);
  methods[12].selector = @selector(_appendLongNameWithIntArray:withInt:);
  methods[13].selector = @selector(size);
  methods[14].selector = @selector(bucketCount);
  methods[15].selector = @selector(primaryQuadCount);
  methods[16].selector = @selector(secondaryQuadCount);
  methods[17].selector = @selector(tertiaryQuadCount);
  methods[18].selector = @selector(spilloverQuadCount);
  methods[19].selector = @selector(totalCount);
  methods[20].selector = @selector(matchByQuadWithInt:);
  methods[21].selector = @selector(matchByQuadWithInt:withInt:);
  methods[22].selector = @selector(matchByQuadWithInt:withInt:withInt:);
  methods[23].selector = @selector(matchByQuadWithIntArray:withInt:);
  methods[24].selector = @selector(_calcOffsetWithInt:);
  methods[25].selector = @selector(_findTertiaryWithInt:withInt:);
  methods[26].selector = @selector(_findTertiaryWithInt:withInt:withInt:);
  methods[27].selector = @selector(_findTertiaryWithInt:withInt:withInt:withInt:);
  methods[28].selector = @selector(_findTertiaryWithInt:withInt:withIntArray:withInt:);
  methods[29].selector = @selector(_verifyLongNameWithIntArray:withInt:withInt:);
  methods[30].selector = @selector(_verifyLongName2WithIntArray:withInt:withInt:);
  methods[31].selector = @selector(calcHashWithInt:);
  methods[32].selector = @selector(calcHashWithInt:withInt:);
  methods[33].selector = @selector(calcHashWithInt:withInt:withInt:);
  methods[34].selector = @selector(calcHashWithIntArray:withInt:);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(_quadsWithNSString:);
  methods[37].selector = @selector(_decodeFullWithByteArray:withInt:);
  methods[38].selector = @selector(_decodeLastWithByteArray:withInt:withInt:);
  methods[39].selector = @selector(_lengthAndIndexWithInt:);
  methods[40].selector = @selector(_spilloverStart);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonCoreSymBinaryNameMatcher_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MAX_ENTRIES", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_ENTRIES, 0x19, -1, -1, -1, -1 },
    { "MAX_LENGTH_IN_QUADS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_LENGTH_IN_QUADS, 0x1a, -1, -1, -1, -1 },
    { "_hashArea_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hashSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_secondaryStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tertiaryStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tertiaryShift_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_spilloverEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_longNameOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MULT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT, 0x1a, -1, -1, -1, -1 },
    { "MULT2", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT2, 0x1a, -1, -1, -1, -1 },
    { "MULT3", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymBinaryNameMatcher_MULT3, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreSymSimpleNameMatcher;[LNSString;I", "_calcTertiaryShift", "I", "constructFrom", "LJavaUtilList;Z", "(Ljava/util/List<Lcom/fasterxml/jackson/core/util/Named;>;Z)Lcom/fasterxml/jackson/core/sym/BinaryNameMatcher;", "construct", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Lcom/fasterxml/jackson/core/sym/BinaryNameMatcher;", "constructCaseInsensitive", "_construct", "LJavaUtilList;LComFasterxmlJacksonCoreSymSimpleNameMatcher;", "(Ljava/util/List<Ljava/lang/String;>;Lcom/fasterxml/jackson/core/sym/SimpleNameMatcher;)Lcom/fasterxml/jackson/core/sym/BinaryNameMatcher;", "addName", "LNSString;", "LNSString;I", "LNSString;II", "LNSString;III", "LNSString;[II", "_findOffsetForAdd", "_appendLongName", "[II", "matchByQuad", "II", "III", "_calcOffset", "_findTertiary", "IIII", "II[II", "_verifyLongName", "[III", "_verifyLongName2", "calcHash", "toString", "_quads", "_decodeFull", "[BI", "_decodeLast", "[BII", "_lengthAndIndex" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymBinaryNameMatcher = { "BinaryNameMatcher", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x11, 41, 14, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymBinaryNameMatcher;
}

@end

void ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize) {
  ComFasterxmlJacksonCoreSymHashedMatcherBase_initWithComFasterxmlJacksonCoreSymHashedMatcherBase_withNSStringArray_(self, matcher, nameLookup);
  self->_count_ = 0;
  self->_hashSize_ = hashSize;
  JreStrongAssignAndConsume(&self->_hashArea_, [IOSIntArray newArrayWithLength:JreLShift32(hashSize, 3)]);
  self->_secondaryStart_ = JreLShift32(hashSize, 2);
  self->_tertiaryStart_ = self->_secondaryStart_ + (JreRShift32(self->_secondaryStart_, 1));
  self->_tertiaryShift_ = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcTertiaryShiftWithInt_(hashSize);
  self->_spilloverEnd_ = ((IOSIntArray *) nil_chk(self->_hashArea_))->size_ - hashSize;
  self->_longNameOffset_ = self->_hashArea_->size_;
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *new_ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymBinaryNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_, matcher, nameLookup, hashSize)
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *create_ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *matcher, IOSObjectArray *nameLookup, jint hashSize) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymBinaryNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_, matcher, nameLookup, hashSize)
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcTertiaryShiftWithInt_(jint primarySlots) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  jint tertSlots = JreRShift32((primarySlots), 2);
  if (tertSlots < 64) return 4;
  if (tertSlots <= 256) return 5;
  if (tertSlots <= 1024) return 6;
  return 7;
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructFromWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructWithJavaUtilList_(ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(fields, alreadyInterned));
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructWithJavaUtilList_(id<JavaUtilList> symbols) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__constructWithJavaUtilList_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(symbols, ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(symbols));
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  id<JavaUtilList> names = ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(fields, alreadyInterned);
  return ComFasterxmlJacksonCoreSymBinaryNameMatcher__constructWithJavaUtilList_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(names, ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_(names));
}

ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher__constructWithJavaUtilList_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(id<JavaUtilList> symbols, ComFasterxmlJacksonCoreSymSimpleNameMatcher *base) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  jint sz = ComFasterxmlJacksonCoreSymFieldNameMatcher__findSizeWithInt_([((id<JavaUtilList>) nil_chk(symbols)) size]);
  IOSObjectArray *lookup = [symbols toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[symbols size] type:NSString_class_()]];
  ComFasterxmlJacksonCoreSymBinaryNameMatcher *matcher = create_ComFasterxmlJacksonCoreSymBinaryNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_withInt_(base, lookup, sz);
  for (NSString * __strong name in symbols) {
    [matcher addNameWithNSString:name];
  }
  return matcher;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1) {
  jint index = self->_count_;
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(self, [self calcHashWithInt:q1]);
  *IOSIntArray_GetRef(nil_chk(self->_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 3) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(self, 1);
  return index;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1, jint q2) {
  jint index = self->_count_;
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(self, [self calcHashWithInt:q1 withInt:q2]);
  *IOSIntArray_GetRef(nil_chk(self->_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 1) = q2;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 3) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(self, 2);
  return index;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, jint q1, jint q2, jint q3) {
  jint index = self->_count_;
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(self, [self calcHashWithInt:q1 withInt:q2 withInt:q3]);
  *IOSIntArray_GetRef(nil_chk(self->_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 1) = q2;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 2) = q3;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 3) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(self, 3);
  return index;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, NSString *name, IOSIntArray *q, jint qlen) {
  switch (qlen) {
    case 1:
    return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_(self, name, IOSIntArray_Get(nil_chk(q), 0));
    case 2:
    return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_(self, name, IOSIntArray_Get(nil_chk(q), 0), IOSIntArray_Get(q, 1));
    case 3:
    return ComFasterxmlJacksonCoreSymBinaryNameMatcher_addNameWithNSString_withInt_withInt_withInt_(self, name, IOSIntArray_Get(nil_chk(q), 0), IOSIntArray_Get(q, 1), IOSIntArray_Get(q, 2));
  }
  jint index = self->_count_;
  jint hash_ = [self calcHashWithIntArray:q withInt:qlen];
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(self, hash_);
  *IOSIntArray_GetRef(nil_chk(self->_hashArea_), offset) = hash_;
  jint longStart = ComFasterxmlJacksonCoreSymBinaryNameMatcher__appendLongNameWithIntArray_withInt_(self, q, qlen);
  *IOSIntArray_GetRef(nil_chk(self->_hashArea_), offset + 1) = longStart;
  *IOSIntArray_GetRef(self->_hashArea_, offset + 3) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(self, qlen);
  return index;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findOffsetForAddWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint hash_) {
  jint offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(self, hash_);
  IOSIntArray *hashArea = self->_hashArea_;
  if (IOSIntArray_Get(nil_chk(hashArea), offset + 3) == 0) {
    return offset;
  }
  jint offset2 = self->_secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  if (IOSIntArray_Get(hashArea, offset2 + 3) == 0) {
    return offset2;
  }
  offset2 = self->_tertiaryStart_ + (JreLShift32((JreRShift32(offset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
    if (IOSIntArray_Get(hashArea, offset2 + 3) == 0) {
      return offset2;
    }
  }
  offset = self->_spilloverEnd_;
  jint end = (JreLShift32(self->_hashSize_, 3));
  if (self->_spilloverEnd_ >= end) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$IC", @"Internal error: Overflow with ", self->_count_, @" entries (hash size of ", self->_hashSize_, ')'));
  }
  self->_spilloverEnd_ += 4;
  return offset;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__appendLongNameWithIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *quads, jint qlen) {
  jint start = self->_longNameOffset_;
  if ((start + qlen) > ((IOSIntArray *) nil_chk(self->_hashArea_))->size_) {
    jint toAdd = (start + qlen) - self->_hashArea_->size_;
    jint minAdd = JavaLangMath_minWithInt_withInt_(4096, self->_hashSize_);
    jint newSize = ((IOSIntArray *) nil_chk(self->_hashArea_))->size_ + JavaLangMath_maxWithInt_withInt_(toAdd, minAdd);
    JreStrongAssign(&self->_hashArea_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->_hashArea_, newSize));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(quads, 0, self->_hashArea_, start, qlen);
  self->_longNameOffset_ += qlen;
  return start;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcOffsetWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint hash_) {
  jint ix = hash_ & (self->_hashSize_ - 1);
  return (JreLShift32(ix, 2));
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (1 == (lenAndIndex & (jint) 0xFFFF))) {
      return JreRShift32(lenAndIndex, 16);
    }
    if (lenAndIndex == 0) {
      return -1;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if (q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) {
      jint lenAndIndex = IOSIntArray_Get(hashArea, offset + 3);
      if (1 == (lenAndIndex & (jint) 0xFFFF)) {
        return JreRShift32(lenAndIndex, 16);
      }
    }
  }
  return -1;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1, jint q2) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (2 == (lenAndIndex & (jint) 0xFFFF))) {
      return JreRShift32(lenAndIndex, 16);
    }
    if (lenAndIndex == 0) {
      return -1;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1))) {
      jint lenAndIndex = IOSIntArray_Get(hashArea, offset + 3);
      if (2 == (lenAndIndex & (jint) 0xFFFF)) {
        return JreRShift32(lenAndIndex, 16);
      }
    }
  }
  return -1;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint q1, jint q2, jint q3) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (q3 == IOSIntArray_Get(hashArea, offset + 2)) && (3 == (lenAndIndex & (jint) 0xFFFF))) {
      return JreRShift32(lenAndIndex, 16);
    }
    if (lenAndIndex == 0) {
      return -1;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (q3 == IOSIntArray_Get(hashArea, offset + 2))) {
      jint lenAndIndex = IOSIntArray_Get(hashArea, offset + 3);
      if (3 == (lenAndIndex & (jint) 0xFFFF)) {
        return JreRShift32(lenAndIndex, 16);
      }
    }
  }
  return -1;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__findTertiaryWithInt_withInt_withIntArray_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint origOffset, jint hash_, IOSIntArray *q, jint qlen) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint lenAndIndex = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((hash_ == IOSIntArray_Get(hashArea, offset)) && (qlen == (lenAndIndex & (jint) 0xFFFF))) {
      if (ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
        return JreRShift32(lenAndIndex, 16);
      }
    }
    if (lenAndIndex == 0) {
      return -1;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if (hash_ == IOSIntArray_Get(nil_chk(hashArea), offset)) {
      jint lenAndIndex = IOSIntArray_Get(hashArea, offset + 3);
      if ((qlen == (lenAndIndex & (jint) 0xFFFF)) && ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
        return JreRShift32(lenAndIndex, 16);
      }
    }
  }
  return -1;
}

jboolean ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *q, jint qlen, jint spillOffset) {
  IOSIntArray *hashArea = self->_hashArea_;
  jint ix = 0;
  switch (qlen) {
    default:
    return ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongName2WithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
    case 8:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 7:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 6:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 5:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 4:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
  }
  return true;
}

jboolean ComFasterxmlJacksonCoreSymBinaryNameMatcher__verifyLongName2WithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, IOSIntArray *q, jint qlen, jint spillOffset) {
  jint ix = 0;
  do {
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(self->_hashArea_), spillOffset++)) {
      return false;
    }
  }
  while (ix < qlen);
  return true;
}

IOSIntArray *ComFasterxmlJacksonCoreSymBinaryNameMatcher__quadsWithNSString_(NSString *name) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  IOSByteArray *b = [((NSString *) nil_chk(name)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
  jint len = ((IOSByteArray *) nil_chk(b))->size_;
  IOSIntArray *buf = [IOSIntArray arrayWithLength:JreRShift32((len + 3), 2)];
  jint in = 0;
  jint out = 0;
  jint left = len;
  for (; left > 4; left -= 4) {
    *IOSIntArray_GetRef(buf, out++) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(b, in);
    in += 4;
  }
  *IOSIntArray_GetRef(buf, out++) = ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(b, in, left);
  return buf;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeFullWithByteArray_withInt_(IOSByteArray *b, jint offset) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  return (JreLShift32(IOSByteArray_Get(nil_chk(b), offset), 24)) + (JreLShift32((IOSByteArray_Get(b, offset + 1) & (jint) 0xFF), 16)) + (JreLShift32((IOSByteArray_Get(b, offset + 2) & (jint) 0xFF), 8)) + (IOSByteArray_Get(b, offset + 3) & (jint) 0xFF);
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__decodeLastWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint bytes) {
  ComFasterxmlJacksonCoreSymBinaryNameMatcher_initialize();
  jint value = IOSByteArray_Get(nil_chk(b), offset++) & (jint) 0xFF;
  switch (bytes) {
    case 4:
    value = (JreLShift32(value, 8)) | (IOSByteArray_Get(b, offset++) & (jint) 0xFF);
    case 3:
    value = (JreLShift32(value, 8)) | (IOSByteArray_Get(b, offset++) & (jint) 0xFF);
    case 2:
    value = (JreLShift32(value, 8)) | (IOSByteArray_Get(b, offset++) & (jint) 0xFF);
  }
  return value;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__lengthAndIndexWithInt_(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self, jint qlen) {
  if (qlen > ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_LENGTH_IN_QUADS) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Maximum name length in quads (", ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_LENGTH_IN_QUADS, @") exceeded: ", qlen));
  }
  if (self->_count_ == ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_ENTRIES) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Maximum entry count (", ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_ENTRIES, @") reached, can not add more entries"));
  }
  jint enc = (JreLShift32(self->_count_, 16)) | qlen;
  ++self->_count_;
  return enc;
}

jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__spilloverStart(ComFasterxmlJacksonCoreSymBinaryNameMatcher *self) {
  jint offset = self->_hashSize_;
  return (JreLShift32(offset, 3)) - offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymBinaryNameMatcher)
