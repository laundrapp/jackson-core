//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParseException.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/JsonTokenId.h"
#include "com/fasterxml/jackson/core/ObjectReadContext.h"
#include "com/fasterxml/jackson/core/base/ParserBase.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/json/JsonReadContext.h"
#include "com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.h"
#include "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/io/DataInput.h"
#include "java/io/EOFException.h"
#include "java/io/OutputStream.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"

@interface ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser () {
 @public
  /*!
   @brief Temporary storage for partially parsed name bytes.
   */
  jint _quad1_;
}

- (ComFasterxmlJacksonCoreJsonToken *)_nextTokenNotInObjectWithInt:(jint)i;

- (ComFasterxmlJacksonCoreJsonToken *)_nextAfterName;

/*!
 @brief Method called when we have seen one zero, and want to ensure
  it is not followed by another, or, if leading zeroes allowed,
  skipped redundant ones.
 @return Character immediately following zeroes
 */
- (jint)_handleLeadingZeroes;

- (ComFasterxmlJacksonCoreJsonToken *)_parseFloatWithCharArray:(IOSCharArray *)outBuf
                                                       withInt:(jint)outPtr
                                                       withInt:(jint)c
                                                   withBoolean:(jboolean)negative
                                                       withInt:(jint)integerPartLength;

/*!
 @brief Method called to ensure that a root-value is followed by a space token,
  if possible.
 <p>
  NOTE: with <code>DataInput</code> source, not really feasible, up-front.
  If we did want, we could rearrange things to require space before
  next read, but initially let's just do nothing.
 */
- (void)_verifyRootSpace;

- (NSString *)_parseMediumNameWithInt:(jint)q2;

- (NSString *)_parseMediumName2WithInt:(jint)q3
                               withInt:(jint)q2;

- (NSString *)_parseLongNameWithInt:(jint)q
                            withInt:(jint)q2
                            withInt:(jint)q3;

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes;

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes;

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)q3
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes;

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)lastQuadBytes;

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)lastQuadBytes;

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)q3
                      withInt:(jint)lastQuadBytes;

- (NSString *)findNameWithIntArray:(IOSIntArray *)quads
                           withInt:(jint)qlen
                           withInt:(jint)lastQuad
                           withInt:(jint)lastQuadBytes;

/*!
 @brief This is the main workhorse method used when we take a symbol
  table miss.It needs to demultiplex individual bytes, decode
  multi-byte chars (if any), and then construct Name instance
  and add it to the symbol table.
 */
- (NSString *)addNameWithIntArray:(IOSIntArray *)quads
                          withInt:(jint)qlen
                          withInt:(jint)lastQuadBytes;

- (NSString *)_finishAndReturnString;

- (void)_finishString2WithCharArray:(IOSCharArray *)outBuf
                            withInt:(jint)outPtr
                            withInt:(jint)c;

- (void)_checkMatchEndWithNSString:(NSString *)matchStr
                           withInt:(jint)i
                           withInt:(jint)ch;

- (jint)_skipWS;

/*!
 @brief Alternative to <code>_skipWS</code> that handles possible <code>EOFException</code>
  caused by trying to read past the end of <code>InputData</code>.
 @since 2.9
 */
- (jint)_skipWSOrEnd;

- (jint)_skipWSCommentWithInt:(jint)i;

- (jint)_skipColon;

- (jint)_skipColon2WithInt:(jint)i
               withBoolean:(jboolean)gotColon;

- (void)_skipComment;

- (void)_skipCComment;

- (jboolean)_skipYAMLComment;

/*!
 @brief Method for skipping contents of an input line; usually for CPP
  and YAML style comments.
 */
- (void)_skipLine;

- (jint)_decodeUtf8_2WithInt:(jint)c;

- (jint)_decodeUtf8_3WithInt:(jint)c1;

/*!
 @return Character value <b>minus 0x10000</c>; this so that caller
     can readily expand it to actual surrogates
 */
- (jint)_decodeUtf8_4WithInt:(jint)c;

- (void)_skipUtf8_2;

- (void)_skipUtf8_3;

- (void)_skipUtf8_4;

- (void)_reportInvalidOtherWithInt:(jint)mask;

+ (IOSIntArray *)_growArrayByWithIntArray:(IOSIntArray *)arr
                                  withInt:(jint)more;

- (void)_closeScopeWithInt:(jint)i;

/*!
 @brief Helper method needed to fix [Issue#148], masking of 0x00 character
 */
+ (jint)padWithInt:(jint)q
           withInt:(jint)bytes;

@end

inline IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_get__icUTF8(void);
static IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, _icUTF8, IOSIntArray *)

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, ComFasterxmlJacksonCoreJsonToken *t);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextTokenNotInObjectWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextAfterName(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__handleLeadingZeroes(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseFloatWithCharArray_withInt_withInt_withBoolean_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSCharArray *outBuf, jint outPtr, jint c, jboolean negative, jint integerPartLength);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseNameWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumNameWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q2);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumName2WithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q3, jint q2);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseLongNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q, jint q2, jint q3);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint ch, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint ch, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint q3, jint ch, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint currQuad, jint ch, jint currQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint q3, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint lastQuad, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint lastQuadBytes);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSCharArray *outBuf, jint outPtr, jint c);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, NSString *matchStr, jint i);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__checkMatchEndWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, NSString *matchStr, jint i, jint ch);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSOrEnd(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSCommentWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i, jboolean gotColon);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipCComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipYAMLComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipLine(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_2WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_3WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c1);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_4WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint mask);

__attribute__((unused)) static IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(IOSIntArray *arr, jint more);

__attribute__((unused)) static IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeBase64WithComFasterxmlJacksonCoreBase64Variant_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, ComFasterxmlJacksonCoreBase64Variant *b64variant);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(jint q, jint bytes);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser)

IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;

@implementation ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)features
                                                       withJavaIoDataInput:(id<JavaIoDataInput>)inputData
                      withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym
                                                                   withInt:(jint)firstByte {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(self, readCtxt, ctxt, features, inputData, sym, firstByte);
  return self;
}

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return 0;
}

- (id)getInputSource {
  return _inputData_;
}

- (void)_closeInput {
}

- (void)_releaseBuffers {
  [super _releaseBuffers];
  [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) release__];
}

- (NSString *)getText {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(self, _currToken_);
}

- (jint)getTextWithJavaIoWriter:(JavaIoWriter *)writer {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      [self _finishString];
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
  }
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    NSString *n = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:n];
    return [((NSString *) nil_chk(n)) java_length];
  }
  if (t != nil) {
    if ([t isNumeric]) {
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
    }
    IOSCharArray *ch = [t asCharArray];
    [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:ch];
    return ((IOSCharArray *) nil_chk(ch))->size_;
  }
  return 0;
}

- (NSString *)getValueAsString {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:nil];
}

- (NSString *)getValueAsStringWithNSString:(NSString *)defValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:defValue];
}

- (jint)getValueAsInt {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
      if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
        return [self _parseIntValue];
      }
      if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
        [self convertNumberToInt];
      }
    }
    return _numberInt_;
  }
  return [super getValueAsIntWithInt:0];
}

- (jint)getValueAsIntWithInt:(jint)defValue {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
      if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
        return [self _parseIntValue];
      }
      if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
        [self convertNumberToInt];
      }
    }
    return _numberInt_;
  }
  return [super getValueAsIntWithInt:defValue];
}

- (NSString *)_getText2WithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(self, t);
}

- (IOSCharArray *)getTextCharacters {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      if (!_nameCopied_) {
        NSString *name = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
        jint nameLen = [((NSString *) nil_chk(name)) java_length];
        if (_nameCopyBuffer_ == nil) {
          JreStrongAssign(&_nameCopyBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocNameCopyBufferWithInt:nameLen]);
        }
        else if (_nameCopyBuffer_->size_ < nameLen) {
          JreStrongAssignAndConsume(&_nameCopyBuffer_, [IOSCharArray newArrayWithLength:nameLen]);
        }
        [name java_getChars:0 sourceEnd:nameLen destination:_nameCopyBuffer_ destinationBegin:0];
        _nameCopied_ = true;
      }
      return _nameCopyBuffer_;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        [self _finishString];
      }
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextBuffer];
      default:
      return [((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray];
    }
  }
  return nil;
}

- (jint)getTextLength {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      [self _finishString];
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) size];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [((NSString *) nil_chk([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName])) java_length];
  }
  if (_currToken_ != nil) {
    if ([_currToken_ isNumeric]) {
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) size];
    }
    return ((IOSCharArray *) nil_chk([((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray]))->size_;
  }
  return 0;
}

- (jint)getTextOffset {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      return 0;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        [self _finishString];
      }
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextOffset];
      default:
      ;
    }
  }
  return 0;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  if (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING) && (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_EMBEDDED_OBJECT) || _binaryValue_ == nil)) {
    [self _reportErrorWithNSString:JreStrcat("$@$", @"Current token (", _currToken_, @") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary")];
  }
  if (_tokenIncomplete_) {
    @try {
      JreStrongAssign(&_binaryValue_, ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeBase64WithComFasterxmlJacksonCoreBase64Variant_(self, b64variant));
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      @throw nil_chk([self _constructErrorWithNSString:JreStrcat("$@$$", @"Failed to decode VALUE_STRING as base64 (", b64variant, @"): ", [iae getMessage])]);
    }
    _tokenIncomplete_ = false;
  }
  else {
    if (_binaryValue_ == nil) {
      ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
      [self _decodeBase64WithNSString:[self getText] withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder withComFasterxmlJacksonCoreBase64Variant:b64variant];
      JreStrongAssign(&_binaryValue_, [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray]);
    }
  }
  return _binaryValue_;
}

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (!_tokenIncomplete_ || _currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    IOSByteArray *b = [self getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:b64variant];
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b];
    return ((IOSByteArray *) nil_chk(b))->size_;
  }
  IOSByteArray *buf = [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocBase64Buffer];
  @try {
    return [self _readBinaryWithComFasterxmlJacksonCoreBase64Variant:b64variant withJavaIoOutputStream:outArg withByteArray:buf];
  }
  @finally {
    [_ioContext_ releaseBase64BufferWithByteArray:buf];
  }
}

- (jint)_readBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                              withByteArray:(IOSByteArray *)buffer {
  jint outputPtr = 0;
  jint outputEnd = ((IOSByteArray *) nil_chk(buffer))->size_ - 3;
  jint outputCount = 0;
  while (true) {
    jint ch;
    do {
      ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    }
    while (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE);
    jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        break;
      }
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:0];
      if (bits < 0) {
        continue;
      }
    }
    if (outputPtr > outputEnd) {
      outputCount += outputPtr;
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:outputPtr];
      outputPtr = 0;
    }
    jint decodedData = bits;
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:1];
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 4);
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
          break;
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:2];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
        if (![b64variant usesPaddingCharWithInt:ch]) {
          @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3 withNSString:JreStrcat("$CC", @"expected padding character '", [b64variant getPaddingChar], '\'')]);
        }
        JreRShiftAssignInt(&decodedData, 4);
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 2);
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
          break;
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        JreRShiftAssignInt(&decodedData, 2);
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 16));
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
  }
  _tokenIncomplete_ = false;
  if (outputPtr > 0) {
    outputCount += outputPtr;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:outputPtr];
  }
  return outputCount;
}

- (ComFasterxmlJacksonCoreJsonToken *)nextToken {
  if (_closed_) {
    return nil;
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextAfterName(self);
  }
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  if (_tokenIncomplete_) {
    [self _skipString];
  }
  jint i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSOrEnd(self);
  if (i < 0) {
    [self close];
    return (JreStrongAssign(&_currToken_, nil));
  }
  JreStrongAssign(&_binaryValue_, nil);
  _tokenInputRow_ = _currInputRow_;
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(self, i);
    return _currToken_;
  }
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) expectComma]) {
    if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA) {
      [self _reportUnexpectedCharWithInt:i withNSString:JreStrcat("$$$", @"was expecting comma to separate ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) typeDesc], @" entries")];
    }
    i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(self);
    if ([((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA))) enabledInWithInt:_features_]) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(self, i);
        return _currToken_;
      }
    }
  }
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inObject]) {
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextTokenNotInObjectWithInt_(self, i);
  }
  NSString *n = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseNameWithInt_(self, i);
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:n];
  JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
  i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon(self);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    _tokenIncomplete_ = true;
    JreStrongAssign(&_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
    return _currToken_;
  }
  ComFasterxmlJacksonCoreJsonToken *t;
  switch (i) {
    case '-':
    t = [self _parseNegNumber];
    break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    t = [self _parsePosNumberWithInt:i];
    break;
    case 'f':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE);
    break;
    case 'n':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    break;
    case 't':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE);
    break;
    case '[':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
    break;
    case '{':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
    break;
    default:
    t = [self _handleUnexpectedValueWithInt:i];
  }
  JreStrongAssign(&_nextToken_, t);
  return _currToken_;
}

- (ComFasterxmlJacksonCoreJsonToken *)_nextTokenNotInObjectWithInt:(jint)i {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextTokenNotInObjectWithInt_(self, i);
}

- (ComFasterxmlJacksonCoreJsonToken *)_nextAfterName {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextAfterName(self);
}

- (void)finishToken {
  if (_tokenIncomplete_) {
    _tokenIncomplete_ = false;
    [self _finishString];
  }
}

- (NSString *)nextFieldName {
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextAfterName(self);
    return nil;
  }
  if (_tokenIncomplete_) {
    [self _skipString];
  }
  jint i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(self);
  JreStrongAssign(&_binaryValue_, nil);
  _tokenInputRow_ = _currInputRow_;
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(self, i);
    return nil;
  }
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) expectComma]) {
    if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA) {
      [self _reportUnexpectedCharWithInt:i withNSString:JreStrcat("$$$", @"was expecting comma to separate ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) typeDesc], @" entries")];
    }
    i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(self);
    if ([((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA))) enabledInWithInt:_features_]) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(self, i);
        return nil;
      }
    }
  }
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inObject]) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextTokenNotInObjectWithInt_(self, i);
    return nil;
  }
  NSString *nameStr = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseNameWithInt_(self, i);
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:nameStr];
  JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
  i = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon(self);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    _tokenIncomplete_ = true;
    JreStrongAssign(&_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
    return nameStr;
  }
  ComFasterxmlJacksonCoreJsonToken *t;
  switch (i) {
    case '-':
    t = [self _parseNegNumber];
    break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    t = [self _parsePosNumberWithInt:i];
    break;
    case 'f':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE);
    break;
    case 'n':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    break;
    case 't':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE);
    break;
    case '[':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
    break;
    case '{':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
    break;
    default:
    t = [self _handleUnexpectedValueWithInt:i];
  }
  JreStrongAssign(&_nextToken_, t);
  return nameStr;
}

- (NSString *)nextTextValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(self);
      }
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return nil;
  }
  return ([self nextToken] == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) ? [self getText] : nil;
}

- (jint)nextIntValueWithInt:(jint)defaultValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
      return [self getIntValue];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return defaultValue;
  }
  return ([self nextToken] == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) ? [self getIntValue] : defaultValue;
}

- (jlong)nextLongValueWithLong:(jlong)defaultValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
      return [self getLongValue];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return defaultValue;
  }
  return ([self nextToken] == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) ? [self getLongValue] : defaultValue;
}

- (JavaLangBoolean *)nextBooleanValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)) {
      return JreLoadStatic(JavaLangBoolean, TRUE);
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)) {
      return JreLoadStatic(JavaLangBoolean, FALSE);
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return nil;
  }
  ComFasterxmlJacksonCoreJsonToken *t = [self nextToken];
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)) {
    return JreLoadStatic(JavaLangBoolean, TRUE);
  }
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)) {
    return JreLoadStatic(JavaLangBoolean, FALSE);
  }
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_parsePosNumberWithInt:(jint)c {
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  jint outPtr;
  if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__handleLeadingZeroes(self);
    if (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && c >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      outPtr = 0;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '0';
      outPtr = 1;
    }
  }
  else {
    *IOSCharArray_GetRef(nil_chk(outBuf), 0) = (jchar) c;
    c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    outPtr = 1;
  }
  jint intLen = outPtr;
  while (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && c >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    ++intLen;
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  }
  if (c == '.' || c == 'e' || c == 'E') {
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseFloatWithCharArray_withInt_withInt_withBoolean_withInt_(self, outBuf, outPtr, c, false, intLen);
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(self);
  }
  else {
    _nextByte_ = c;
  }
  return [self resetIntWithBoolean:false withInt:intLen];
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseNegNumber {
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  jint outPtr = 0;
  *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = '-';
  jint c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  if (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__handleLeadingZeroes(self);
    }
    else {
      return [self _handleInvalidNumberStartWithInt:c withBoolean:true];
    }
  }
  else {
    if (c > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      return [self _handleInvalidNumberStartWithInt:c withBoolean:true];
    }
    c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  }
  jint intLen = 1;
  while (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && c >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    ++intLen;
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
    c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  }
  if (c == '.' || c == 'e' || c == 'E') {
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseFloatWithCharArray_withInt_withInt_withBoolean_withInt_(self, outBuf, outPtr, c, true, intLen);
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  _nextByte_ = c;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(self);
  }
  return [self resetIntWithBoolean:true withInt:intLen];
}

- (jint)_handleLeadingZeroes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__handleLeadingZeroes(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseFloatWithCharArray:(IOSCharArray *)outBuf
                                                       withInt:(jint)outPtr
                                                       withInt:(jint)c
                                                   withBoolean:(jboolean)negative
                                                       withInt:(jint)integerPartLength {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseFloatWithCharArray_withInt_withInt_withBoolean_withInt_(self, outBuf, outPtr, c, negative, integerPartLength);
}

- (void)_verifyRootSpace {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(self);
}

- (NSString *)_parseNameWithInt:(jint)i {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseNameWithInt_(self, i);
}

- (NSString *)_parseMediumNameWithInt:(jint)q2 {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumNameWithInt_(self, q2);
}

- (NSString *)_parseMediumName2WithInt:(jint)q3
                               withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumName2WithInt_withInt_(self, q3, q2);
}

- (NSString *)_parseLongNameWithInt:(jint)q
                            withInt:(jint)q2
                            withInt:(jint)q3 {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseLongNameWithInt_withInt_withInt_(self, q, q2, q3);
}

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, q1, ch, lastQuadBytes);
}

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(self, q1, q2, ch, lastQuadBytes);
}

- (NSString *)parseNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)q3
                       withInt:(jint)ch
                       withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(self, q1, q2, q3, ch, lastQuadBytes);
}

- (NSString *)parseEscapedNameWithIntArray:(IOSIntArray *)quads
                                   withInt:(jint)qlen
                                   withInt:(jint)currQuad
                                   withInt:(jint)ch
                                   withInt:(jint)currQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, quads, qlen, currQuad, ch, currQuadBytes);
}

- (NSString *)_handleOddNameWithInt:(jint)ch {
  if (ch == '\'' && [self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
    return [self _parseAposName];
  }
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_UNQUOTED_FIELD_NAMES)]) {
    jchar c = (jchar) [self _decodeCharForErrorWithInt:ch];
    [self _reportUnexpectedCharWithInt:c withNSString:@"was expecting double-quote to start field name"];
  }
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8JsNames();
  if (IOSIntArray_Get(nil_chk(codes), ch) != 0) {
    [self _reportUnexpectedCharWithInt:ch withNSString:@"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"];
  }
  IOSIntArray *quads = _quadBuffer_;
  jint qlen = 0;
  jint currQuad = 0;
  jint currQuadBytes = 0;
  while (true) {
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
    }
    else {
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
    }
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(codes, ch) != 0) {
      break;
    }
  }
  _nextByte_ = ch;
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, qlen, currQuadBytes);
  }
  return name;
}

- (NSString *)_parseAposName {
  jint ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  if (ch == '\'') {
    return @"";
  }
  IOSIntArray *quads = _quadBuffer_;
  jint qlen = 0;
  jint currQuad = 0;
  jint currQuadBytes = 0;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  while (true) {
    if (ch == '\'') {
      break;
    }
    if (ch != '"' && IOSIntArray_Get(nil_chk(codes), ch) != 0) {
      if (ch != '\\') {
        [self _throwUnquotedSpaceWithInt:ch withNSString:@"name"];
      }
      else {
        ch = [self _decodeEscaped];
      }
      if (ch > 127) {
        if (currQuadBytes >= 4) {
          if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
            JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
          }
          *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
          currQuad = 0;
          currQuadBytes = 0;
        }
        if (ch < (jint) 0x800) {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xc0 | (JreRShift32(ch, 6)));
          ++currQuadBytes;
        }
        else {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xe0 | (JreRShift32(ch, 12)));
          ++currQuadBytes;
          if (currQuadBytes >= 4) {
            if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
              JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
            }
            *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
            currQuad = 0;
            currQuadBytes = 0;
          }
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
          ++currQuadBytes;
        }
        ch = (jint) 0x80 | (ch & (jint) 0x3f);
      }
    }
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
    }
    else {
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
    }
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  }
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(currQuad, currQuadBytes);
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, qlen, currQuadBytes);
  }
  return name;
}

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(self, q1, lastQuadBytes);
}

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(self, q1, q2, lastQuadBytes);
}

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)q3
                      withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(self, q1, q2, q3, lastQuadBytes);
}

- (NSString *)findNameWithIntArray:(IOSIntArray *)quads
                           withInt:(jint)qlen
                           withInt:(jint)lastQuad
                           withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(self, quads, qlen, lastQuad, lastQuadBytes);
}

- (NSString *)addNameWithIntArray:(IOSIntArray *)quads
                          withInt:(jint)qlen
                          withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, qlen, lastQuadBytes);
}

- (void)_finishString {
  jint outPtr = 0;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
  jint outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
  do {
    jint c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
      if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        [_textBuffer_ setCurrentLengthWithInt:outPtr];
        return;
      }
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(self, outBuf, outPtr, c);
      return;
    }
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  }
  while (outPtr < outEnd);
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(self, outBuf, outPtr, [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte]);
}

- (NSString *)_finishAndReturnString {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(self);
}

- (void)_finishString2WithCharArray:(IOSCharArray *)outBuf
                            withInt:(jint)outPtr
                            withInt:(jint)c {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(self, outBuf, outPtr, c);
}

- (void)_skipString {
  _tokenIncomplete_ = false;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
  while (true) {
    jint c;
    while (true) {
      c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
      if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
        goto break_ascii_loop;
      }
    }
    break_ascii_loop: ;
    if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      goto break_main_loop;
    }
    switch (IOSIntArray_Get(nil_chk(codes), c)) {
      case 1:
      [self _decodeEscaped];
      break;
      case 2:
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(self);
      break;
      case 3:
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(self);
      break;
      case 4:
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(self);
      break;
      default:
      if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
      }
      else {
        [self _reportInvalidCharWithInt:c];
      }
    }
  }
  break_main_loop: ;
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleUnexpectedValueWithInt:(jint)c {
  switch (c) {
    case ']':
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inArray]) {
      break;
    }
    case ',':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_MISSING_VALUES)]) {
      _nextByte_ = c;
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    }
    case '}':
    [self _reportUnexpectedCharWithInt:c withNSString:@"expected a value"];
    case '\'':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
      return [self _handleApos];
    }
    break;
    case 'N':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"NaN", 1);
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
      return [self resetAsNaNWithNSString:@"NaN" withDouble:JavaLangDouble_NaN];
    }
    [self _reportErrorWithNSString:@"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"];
    break;
    case 'I':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"Infinity", 1);
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
      return [self resetAsNaNWithNSString:@"Infinity" withDouble:JavaLangDouble_POSITIVE_INFINITY];
    }
    [self _reportErrorWithNSString:@"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"];
    break;
    case '+':
    return [self _handleInvalidNumberStartWithInt:[((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte] withBoolean:false];
  }
  if (JavaLangCharacter_isJavaIdentifierStartWithInt_(c)) {
    [self _reportInvalidTokenWithInt:c withNSString:JreStrcat("C", ((jchar) c)) withNSString:@"('true', 'false' or 'null')"];
  }
  [self _reportUnexpectedCharWithInt:c withNSString:@"expected a valid value (number, String, array, object, 'true', 'false' or 'null')"];
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleApos {
  jint c = 0;
  jint outPtr = 0;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
  while (true) {
    while (true) {
      jint outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
      if (outPtr >= outBuf->size_) {
        outBuf = [_textBuffer_ finishCurrentSegment];
        outPtr = 0;
        outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
      }
      do {
        c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
        if (c == '\'') {
          goto break_main_loop;
        }
        if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
          goto break_ascii_loop;
        }
        *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
      }
      while (outPtr < outEnd);
    }
    break_ascii_loop: ;
    switch (IOSIntArray_Get(nil_chk(codes), c)) {
      case 1:
      c = [self _decodeEscaped];
      break;
      case 2:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_2WithInt_(self, c);
      break;
      case 3:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_3WithInt_(self, c);
      break;
      case 4:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_4WithInt_(self, c);
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ((jint) 0xD800 | (JreRShift32(c, 10)));
      if (outPtr >= outBuf->size_) {
        outBuf = [_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      c = (jint) 0xDC00 | (c & (jint) 0x3FF);
      break;
      default:
      if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
      }
      [self _reportInvalidCharWithInt:c];
    }
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
  }
  break_main_loop: ;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING);
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleInvalidNumberStartWithInt:(jint)ch
                                                           withBoolean:(jboolean)neg {
  while (ch == 'I') {
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    NSString *match;
    if (ch == 'N') {
      match = neg ? @"-INF" : @"+INF";
    }
    else if (ch == 'n') {
      match = neg ? @"-Infinity" : @"+Infinity";
    }
    else {
      break;
    }
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, match, 3);
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
      return [self resetAsNaNWithNSString:match withDouble:neg ? JavaLangDouble_NEGATIVE_INFINITY : JavaLangDouble_POSITIVE_INFINITY];
    }
    [self _reportErrorWithNSString:JreStrcat("$$$", @"Non-standard token '", match, @"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow")];
  }
  [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  return nil;
}

- (void)_matchTokenWithNSString:(NSString *)matchStr
                        withInt:(jint)i {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, matchStr, i);
}

- (void)_checkMatchEndWithNSString:(NSString *)matchStr
                           withInt:(jint)i
                           withInt:(jint)ch {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__checkMatchEndWithNSString_withInt_withInt_(self, matchStr, i, ch);
}

- (jint)_skipWS {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(self);
}

- (jint)_skipWSOrEnd {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSOrEnd(self);
}

- (jint)_skipWSCommentWithInt:(jint)i {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSCommentWithInt_(self, i);
}

- (jint)_skipColon {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon(self);
}

- (jint)_skipColon2WithInt:(jint)i
               withBoolean:(jboolean)gotColon {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, gotColon);
}

- (void)_skipComment {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipComment(self);
}

- (void)_skipCComment {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipCComment(self);
}

- (jboolean)_skipYAMLComment {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipYAMLComment(self);
}

- (void)_skipLine {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipLine(self);
}

- (jchar)_decodeEscaped {
  jint c = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  switch (c) {
    case 'b':
    return 0x0008;
    case 't':
    return 0x0009;
    case 'n':
    return 0x000a;
    case 'f':
    return 0x000c;
    case 'r':
    return 0x000d;
    case '"':
    case '/':
    case '\\':
    return (jchar) c;
    case 'u':
    break;
    default:
    return [self _handleUnrecognizedCharacterEscapeWithChar:(jchar) [self _decodeCharForErrorWithInt:c]];
  }
  jint value = 0;
  for (jint i = 0; i < 4; ++i) {
    jint ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    jint digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
    if (digit < 0) {
      [self _reportUnexpectedCharWithInt:ch withNSString:@"expected a hex-digit for character escape sequence"];
    }
    value = (JreLShift32(value, 4)) | digit;
  }
  return (jchar) value;
}

- (jint)_decodeCharForErrorWithInt:(jint)firstByte {
  jint c = firstByte & (jint) 0xFF;
  if (c > (jint) 0x7F) {
    jint needed;
    if ((c & (jint) 0xE0) == (jint) 0xC0) {
      c &= (jint) 0x1F;
      needed = 1;
    }
    else if ((c & (jint) 0xF0) == (jint) 0xE0) {
      c &= (jint) 0x0F;
      needed = 2;
    }
    else if ((c & (jint) 0xF8) == (jint) 0xF0) {
      c &= (jint) 0x07;
      needed = 3;
    }
    else {
      [self _reportInvalidInitialWithInt:c & (jint) 0xFF];
      needed = 1;
    }
    jint d = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
    if ((d & (jint) 0xC0) != (jint) 0x080) {
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
    }
    c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
    if (needed > 1) {
      d = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
      if ((d & (jint) 0xC0) != (jint) 0x080) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
      }
      c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
      if (needed > 2) {
        d = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
        if ((d & (jint) 0xC0) != (jint) 0x080) {
          ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
        }
        c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
      }
    }
  }
  return c;
}

- (jint)_decodeUtf8_2WithInt:(jint)c {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_2WithInt_(self, c);
}

- (jint)_decodeUtf8_3WithInt:(jint)c1 {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_3WithInt_(self, c1);
}

- (jint)_decodeUtf8_4WithInt:(jint)c {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_4WithInt_(self, c);
}

- (void)_skipUtf8_2 {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(self);
}

- (void)_skipUtf8_3 {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(self);
}

- (void)_skipUtf8_4 {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(self);
}

- (void)_reportInvalidTokenWithInt:(jint)ch
                      withNSString:(NSString *)matchedPart {
  [self _reportInvalidTokenWithInt:ch withNSString:matchedPart withNSString:@"'null', 'true', 'false' or NaN"];
}

- (void)_reportInvalidTokenWithInt:(jint)ch
                      withNSString:(NSString *)matchedPart
                      withNSString:(NSString *)msg {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(matchedPart);
  while (true) {
    jchar c = (jchar) [self _decodeCharForErrorWithInt:ch];
    if (!JavaLangCharacter_isJavaIdentifierPartWithChar_(c)) {
      break;
    }
    [sb appendWithChar:c];
    ch = [((id<JavaIoDataInput>) nil_chk(_inputData_)) readUnsignedByte];
  }
  [self _reportErrorWithNSString:JreStrcat("$$$$", @"Unrecognized token '", [sb description], @"': was expecting ", msg)];
}

- (void)_reportInvalidCharWithInt:(jint)c {
  if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    [self _throwInvalidSpaceWithInt:c];
  }
  [self _reportInvalidInitialWithInt:c];
}

- (void)_reportInvalidInitialWithInt:(jint)mask {
  [self _reportErrorWithNSString:JreStrcat("$$", @"Invalid UTF-8 start byte 0x", JavaLangInteger_toHexStringWithInt_(mask))];
}

- (void)_reportInvalidOtherWithInt:(jint)mask {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, mask);
}

+ (IOSIntArray *)_growArrayByWithIntArray:(IOSIntArray *)arr
                                  withInt:(jint)more {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(arr, more);
}

- (IOSByteArray *)_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeBase64WithComFasterxmlJacksonCoreBase64Variant_(self, b64variant);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation {
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, -1LL, _tokenInputRow_, -1);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, -1LL, _currInputRow_, -1);
}

- (void)_closeScopeWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(self, i);
}

+ (jint)padWithInt:(jint)q
           withInt:(jint)bytes {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(q, bytes);
}

- (void)dealloc {
  RELEASE_(_symbols_);
  RELEASE_(_quadBuffer_);
  RELEASE_(_inputData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 10, 11, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, 3, -1, -1, -1 },
    { NULL, "I", 0x4, 16, 17, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 18, 9, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 9, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 20, 21, 3, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 22, 9, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 23, 24, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 25, 9, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 26, 9, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 27, 28, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 29, 30, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 31, 30, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 31, 32, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 31, 33, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 34, 35, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 36, 9, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 37, 28, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 37, 30, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 37, 32, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 37, 39, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 40, 41, 38, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x12, 42, 43, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 44, 9, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 45, 46, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 47, 48, 3, -1, -1, -1 },
    { NULL, "V", 0x12, 49, 50, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 51, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 52, 46, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x4, 53, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 54, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 55, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 56, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 57, 58, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 57, 59, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 60, 9, 38, -1, -1, -1 },
    { NULL, "V", 0x4, 61, 9, 38, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 9, 38, -1, -1, -1 },
    { NULL, "[I", 0xa, 63, 64, -1, -1, -1, -1 },
    { NULL, "[B", 0x14, 65, 13, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 9, 38, -1, -1, -1 },
    { NULL, "I", 0x1a, 67, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:withComFasterxmlJacksonCoreIoIOContext:withInt:withJavaIoDataInput:withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:withInt:);
  methods[1].selector = @selector(releaseBufferedWithJavaIoOutputStream:);
  methods[2].selector = @selector(getInputSource);
  methods[3].selector = @selector(_closeInput);
  methods[4].selector = @selector(_releaseBuffers);
  methods[5].selector = @selector(getText);
  methods[6].selector = @selector(getTextWithJavaIoWriter:);
  methods[7].selector = @selector(getValueAsString);
  methods[8].selector = @selector(getValueAsStringWithNSString:);
  methods[9].selector = @selector(getValueAsInt);
  methods[10].selector = @selector(getValueAsIntWithInt:);
  methods[11].selector = @selector(_getText2WithComFasterxmlJacksonCoreJsonToken:);
  methods[12].selector = @selector(getTextCharacters);
  methods[13].selector = @selector(getTextLength);
  methods[14].selector = @selector(getTextOffset);
  methods[15].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[16].selector = @selector(readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:);
  methods[17].selector = @selector(_readBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:withByteArray:);
  methods[18].selector = @selector(nextToken);
  methods[19].selector = @selector(_nextTokenNotInObjectWithInt:);
  methods[20].selector = @selector(_nextAfterName);
  methods[21].selector = @selector(finishToken);
  methods[22].selector = @selector(nextFieldName);
  methods[23].selector = @selector(nextTextValue);
  methods[24].selector = @selector(nextIntValueWithInt:);
  methods[25].selector = @selector(nextLongValueWithLong:);
  methods[26].selector = @selector(nextBooleanValue);
  methods[27].selector = @selector(_parsePosNumberWithInt:);
  methods[28].selector = @selector(_parseNegNumber);
  methods[29].selector = @selector(_handleLeadingZeroes);
  methods[30].selector = @selector(_parseFloatWithCharArray:withInt:withInt:withBoolean:withInt:);
  methods[31].selector = @selector(_verifyRootSpace);
  methods[32].selector = @selector(_parseNameWithInt:);
  methods[33].selector = @selector(_parseMediumNameWithInt:);
  methods[34].selector = @selector(_parseMediumName2WithInt:withInt:);
  methods[35].selector = @selector(_parseLongNameWithInt:withInt:withInt:);
  methods[36].selector = @selector(parseNameWithInt:withInt:withInt:);
  methods[37].selector = @selector(parseNameWithInt:withInt:withInt:withInt:);
  methods[38].selector = @selector(parseNameWithInt:withInt:withInt:withInt:withInt:);
  methods[39].selector = @selector(parseEscapedNameWithIntArray:withInt:withInt:withInt:withInt:);
  methods[40].selector = @selector(_handleOddNameWithInt:);
  methods[41].selector = @selector(_parseAposName);
  methods[42].selector = @selector(findNameWithInt:withInt:);
  methods[43].selector = @selector(findNameWithInt:withInt:withInt:);
  methods[44].selector = @selector(findNameWithInt:withInt:withInt:withInt:);
  methods[45].selector = @selector(findNameWithIntArray:withInt:withInt:withInt:);
  methods[46].selector = @selector(addNameWithIntArray:withInt:withInt:);
  methods[47].selector = @selector(_finishString);
  methods[48].selector = @selector(_finishAndReturnString);
  methods[49].selector = @selector(_finishString2WithCharArray:withInt:withInt:);
  methods[50].selector = @selector(_skipString);
  methods[51].selector = @selector(_handleUnexpectedValueWithInt:);
  methods[52].selector = @selector(_handleApos);
  methods[53].selector = @selector(_handleInvalidNumberStartWithInt:withBoolean:);
  methods[54].selector = @selector(_matchTokenWithNSString:withInt:);
  methods[55].selector = @selector(_checkMatchEndWithNSString:withInt:withInt:);
  methods[56].selector = @selector(_skipWS);
  methods[57].selector = @selector(_skipWSOrEnd);
  methods[58].selector = @selector(_skipWSCommentWithInt:);
  methods[59].selector = @selector(_skipColon);
  methods[60].selector = @selector(_skipColon2WithInt:withBoolean:);
  methods[61].selector = @selector(_skipComment);
  methods[62].selector = @selector(_skipCComment);
  methods[63].selector = @selector(_skipYAMLComment);
  methods[64].selector = @selector(_skipLine);
  methods[65].selector = @selector(_decodeEscaped);
  methods[66].selector = @selector(_decodeCharForErrorWithInt:);
  methods[67].selector = @selector(_decodeUtf8_2WithInt:);
  methods[68].selector = @selector(_decodeUtf8_3WithInt:);
  methods[69].selector = @selector(_decodeUtf8_4WithInt:);
  methods[70].selector = @selector(_skipUtf8_2);
  methods[71].selector = @selector(_skipUtf8_3);
  methods[72].selector = @selector(_skipUtf8_4);
  methods[73].selector = @selector(_reportInvalidTokenWithInt:withNSString:);
  methods[74].selector = @selector(_reportInvalidTokenWithInt:withNSString:withNSString:);
  methods[75].selector = @selector(_reportInvalidCharWithInt:);
  methods[76].selector = @selector(_reportInvalidInitialWithInt:);
  methods[77].selector = @selector(_reportInvalidOtherWithInt:);
  methods[78].selector = @selector(_growArrayByWithIntArray:withInt:);
  methods[79].selector = @selector(_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:);
  methods[80].selector = @selector(getTokenLocation);
  methods[81].selector = @selector(getCurrentLocation);
  methods[82].selector = @selector(_closeScopeWithInt:);
  methods[83].selector = @selector(padWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE_LF", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_BYTE_LF, 0x18, -1, -1, -1, -1 },
    { "_icUTF8", "[I", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "_icLatin1", "[I", .constantValue.asLong = 0, 0x1c, -1, 69, -1, -1 },
    { "_symbols_", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_quadBuffer_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_tokenIncomplete_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_quad1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inputData_", "LJavaIoDataInput;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nextByte_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreObjectReadContext;LComFasterxmlJacksonCoreIoIOContext;ILJavaIoDataInput;LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;I", "releaseBuffered", "LJavaIoOutputStream;", "LJavaIoIOException;", "getText", "LJavaIoWriter;", "getValueAsString", "LNSString;", "getValueAsInt", "I", "_getText2", "LComFasterxmlJacksonCoreJsonToken;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "readBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;", "_readBinary", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;[B", "_nextTokenNotInObject", "nextIntValue", "nextLongValue", "J", "_parsePosNumber", "_parseFloat", "[CIIZI", "_parseName", "_parseMediumName", "_parseMediumName2", "II", "_parseLongName", "III", "parseName", "IIII", "IIIII", "parseEscapedName", "[IIIII", "_handleOddName", "findName", "LComFasterxmlJacksonCoreJsonParseException;", "[IIII", "addName", "[III", "_finishString2", "[CII", "_handleUnexpectedValue", "_handleInvalidNumberStart", "IZ", "_matchToken", "LNSString;I", "_checkMatchEnd", "LNSString;II", "_skipWSComment", "_skipColon2", "_decodeCharForError", "_decodeUtf8_2", "_decodeUtf8_3", "_decodeUtf8_4", "_reportInvalidToken", "ILNSString;", "ILNSString;LNSString;", "_reportInvalidChar", "_reportInvalidInitial", "_reportInvalidOther", "_growArrayBy", "[II", "_decodeBase64", "_closeScope", "pad", &ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8, &ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser = { "UTF8DataInputJsonParser", "com.fasterxml.jackson.core.json", ptrTable, methods, fields, 7, 0x1, 84, 9, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8, ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8());
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1, ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser)
  }
}

@end

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte) {
  ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_(self, readCtxt, ctxt, features);
  JreStrongAssignAndConsume(&self->_quadBuffer_, [IOSIntArray newArrayWithLength:16]);
  self->_nextByte_ = -1;
  JreStrongAssign(&self->_symbols_, sym);
  JreStrongAssign(&self->_inputData_, inputData);
  self->_nextByte_ = firstByte;
}

ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *new_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_, readCtxt, ctxt, features, inputData, sym, firstByte)
}

ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *create_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_, readCtxt, ctxt, features, inputData, sym, firstByte)
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, ComFasterxmlJacksonCoreJsonToken *t) {
  if (t == nil) {
    return nil;
  }
  switch ([t id__]) {
    case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
    return [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) currentName];
    case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsString];
    default:
    return [t asString];
  }
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextTokenNotInObjectWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i) {
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    self->_tokenIncomplete_ = true;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)));
  }
  switch (i) {
    case '[':
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildArrayContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)));
    case '{':
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildObjectContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)));
    case 't':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)));
    case 'f':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)));
    case 'n':
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)));
    case '-':
    return (JreStrongAssign(&self->_currToken_, [self _parseNegNumber]));
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return (JreStrongAssign(&self->_currToken_, [self _parsePosNumberWithInt:i]));
  }
  return (JreStrongAssign(&self->_currToken_, [self _handleUnexpectedValueWithInt:i]));
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__nextAfterName(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  self->_nameCopied_ = false;
  ComFasterxmlJacksonCoreJsonToken *t = self->_nextToken_;
  JreStrongAssign(&self->_nextToken_, nil);
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildArrayContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
  }
  else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildObjectContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
  }
  return (JreStrongAssign(&self->_currToken_, t));
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__handleLeadingZeroes(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
    return ch;
  }
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NUMERIC_LEADING_ZEROS)]) {
    [self reportInvalidNumberWithNSString:@"Leading zeroes not allowed"];
  }
  while (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
  return ch;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseFloatWithCharArray_withInt_withInt_withBoolean_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSCharArray *outBuf, jint outPtr, jint c, jboolean negative, jint integerPartLength) {
  jint fractLen = 0;
  if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    while (true) {
      c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
      if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || c > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
        goto break_fract_loop;
      }
      ++fractLen;
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    }
    break_fract_loop: ;
    if (fractLen == 0) {
      [self reportUnexpectedNumberCharWithInt:c withNSString:@"Decimal point not followed by a digit"];
    }
  }
  jint expLen = 0;
  if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (c == '-' || c == '+') {
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
      c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    while (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && c >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      ++expLen;
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
      c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    if (expLen == 0) {
      [self reportUnexpectedNumberCharWithInt:c withNSString:@"Exponent indicator not followed by a digit"];
    }
  }
  self->_nextByte_ = c;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(self);
  }
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) setCurrentLengthWithInt:outPtr];
  return [self resetFloatWithBoolean:negative withInt:integerPartLength withInt:fractLen withInt:expLen];
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__verifyRootSpace(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint ch = self->_nextByte_;
  if (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    self->_nextByte_ = -1;
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
      ++self->_currInputRow_;
    }
    return;
  }
  [self _reportMissingRootWSWithInt:ch];
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseNameWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i) {
  if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return [self _handleOddNameWithInt:i];
  }
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  jint q = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(nil_chk(codes), q) == 0) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(codes, i) == 0) {
      q = (JreLShift32(q, 8)) | i;
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
      if (IOSIntArray_Get(codes, i) == 0) {
        q = (JreLShift32(q, 8)) | i;
        i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
        if (IOSIntArray_Get(codes, i) == 0) {
          q = (JreLShift32(q, 8)) | i;
          i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
          if (IOSIntArray_Get(codes, i) == 0) {
            self->_quad1_ = q;
            return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumNameWithInt_(self, i);
          }
          if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
            return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(self, q, 4);
          }
          return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, q, i, 4);
        }
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
          return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(self, q, 3);
        }
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, q, i, 3);
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(self, q, 2);
      }
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, q, i, 2);
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(self, q, 1);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, q, i, 1);
  }
  if (q == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return @"";
  }
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(self, 0, q, 0);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumNameWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q2) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  jint i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(nil_chk(codes), i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(self, self->_quad1_, q2, 1);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, i, 1);
  }
  q2 = (JreLShift32(q2, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(self, self->_quad1_, q2, 2);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, i, 2);
  }
  q2 = (JreLShift32(q2, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(self, self->_quad1_, q2, 3);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, i, 3);
  }
  q2 = (JreLShift32(q2, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(self, self->_quad1_, q2, 4);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, i, 4);
  }
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumName2WithInt_withInt_(self, i, q2);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseMediumName2WithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q3, jint q2) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  jint i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(nil_chk(codes), i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, 1);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, i, 1);
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, 2);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, i, 2);
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, 3);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, i, 3);
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, 4);
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(self, self->_quad1_, q2, q3, i, 4);
  }
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseLongNameWithInt_withInt_withInt_(self, i, q2, q3);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__parseLongNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q, jint q2, jint q3) {
  *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), 0) = self->_quad1_;
  *IOSIntArray_GetRef(self->_quadBuffer_, 1) = q2;
  *IOSIntArray_GetRef(self->_quadBuffer_, 2) = q3;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  jint qlen = 3;
  while (true) {
    jint i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(nil_chk(codes), i) != 0) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, 1);
      }
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, i, 1);
    }
    q = (JreLShift32(q, 8)) | i;
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(codes, i) != 0) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, 2);
      }
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, i, 2);
    }
    q = (JreLShift32(q, 8)) | i;
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(codes, i) != 0) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, 3);
      }
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, i, 3);
    }
    q = (JreLShift32(q, 8)) | i;
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(codes, i) != 0) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, 4);
      }
      return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, qlen, q, i, 4);
    }
    if (qlen >= ((IOSIntArray *) nil_chk(self->_quadBuffer_))->size_) {
      JreStrongAssign(&self->_quadBuffer_, ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(self->_quadBuffer_, qlen));
    }
    *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), qlen++) = q;
    q = i;
  }
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint ch, jint lastQuadBytes) {
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, 0, q1, ch, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint ch, jint lastQuadBytes) {
  *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), 0) = q1;
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, 1, q2, ch, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseNameWithInt_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint q3, jint ch, jint lastQuadBytes) {
  *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), 0) = q1;
  *IOSIntArray_GetRef(self->_quadBuffer_, 1) = q2;
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(self, self->_quadBuffer_, 2, q3, ch, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_parseEscapedNameWithIntArray_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint currQuad, jint ch, jint currQuadBytes) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
  while (true) {
    if (IOSIntArray_Get(nil_chk(codes), ch) != 0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        break;
      }
      if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
        [self _throwUnquotedSpaceWithInt:ch withNSString:@"name"];
      }
      else {
        ch = [self _decodeEscaped];
      }
      if (ch > 127) {
        if (currQuadBytes >= 4) {
          if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
            JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
          }
          *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
          currQuad = 0;
          currQuadBytes = 0;
        }
        if (ch < (jint) 0x800) {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xc0 | (JreRShift32(ch, 6)));
          ++currQuadBytes;
        }
        else {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xe0 | (JreRShift32(ch, 12)));
          ++currQuadBytes;
          if (currQuadBytes >= 4) {
            if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
              JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
            }
            *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
            currQuad = 0;
            currQuadBytes = 0;
          }
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
          ++currQuadBytes;
        }
        ch = (jint) 0x80 | (ch & (jint) 0x3f);
      }
    }
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
    }
    else {
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
    }
    ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(currQuad, currQuadBytes);
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, qlen, currQuadBytes);
  }
  return name;
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint lastQuadBytes) {
  q1 = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(q1, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithInt:q1];
  if (name != nil) {
    return name;
  }
  *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), 0) = q1;
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, self->_quadBuffer_, 1, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint lastQuadBytes) {
  q2 = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(q2, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithInt:q1 withInt:q2];
  if (name != nil) {
    return name;
  }
  *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), 0) = q1;
  *IOSIntArray_GetRef(self->_quadBuffer_, 1) = q2;
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, self->_quadBuffer_, 2, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint q1, jint q2, jint q3, jint lastQuadBytes) {
  q3 = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(q3, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithInt:q1 withInt:q2 withInt:q3];
  if (name != nil) {
    return name;
  }
  IOSIntArray *quads = self->_quadBuffer_;
  *IOSIntArray_GetRef(nil_chk(quads), 0) = q1;
  *IOSIntArray_GetRef(quads, 1) = q2;
  *IOSIntArray_GetRef(quads, 2) = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(q3, lastQuadBytes);
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, 3, lastQuadBytes);
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_findNameWithIntArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint lastQuad, jint lastQuadBytes) {
  if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
    JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(quads, quads->size_));
  }
  *IOSIntArray_GetRef(nil_chk(quads), qlen++) = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(lastQuad, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(self, quads, qlen, lastQuadBytes);
  }
  return name;
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_addNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSIntArray *quads, jint qlen, jint lastQuadBytes) {
  jint byteLen = (JreLShift32(qlen, 2)) - 4 + lastQuadBytes;
  jint lastQuad;
  if (lastQuadBytes < 4) {
    lastQuad = IOSIntArray_Get(nil_chk(quads), qlen - 1);
    *IOSIntArray_GetRef(quads, qlen - 1) = (JreLShift32(lastQuad, (JreLShift32((4 - lastQuadBytes), 3))));
  }
  else {
    lastQuad = 0;
  }
  IOSCharArray *cbuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) emptyAndGetCurrentSegment];
  jint cix = 0;
  for (jint ix = 0; ix < byteLen; ) {
    jint ch = IOSIntArray_Get(nil_chk(quads), JreRShift32(ix, 2));
    jint byteIx = (ix & 3);
    ch = (JreRShift32(ch, (JreLShift32((3 - byteIx), 3)))) & (jint) 0xFF;
    ++ix;
    if (ch > 127) {
      jint needed;
      if ((ch & (jint) 0xE0) == (jint) 0xC0) {
        ch &= (jint) 0x1F;
        needed = 1;
      }
      else if ((ch & (jint) 0xF0) == (jint) 0xE0) {
        ch &= (jint) 0x0F;
        needed = 2;
      }
      else if ((ch & (jint) 0xF8) == (jint) 0xF0) {
        ch &= (jint) 0x07;
        needed = 3;
      }
      else {
        [self _reportInvalidInitialWithInt:ch];
        needed = ch = 1;
      }
      if ((ix + needed) > byteLen) {
        [self _reportInvalidEOFWithNSString:@" in field name" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)];
      }
      jint ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
      byteIx = (ix & 3);
      ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
      ++ix;
      if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, ch2);
      }
      ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
      if (needed > 1) {
        ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
        byteIx = (ix & 3);
        ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
        ++ix;
        if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
          ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, ch2);
        }
        ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
        if (needed > 2) {
          ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
          byteIx = (ix & 3);
          ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
          ++ix;
          if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
            ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, ch2 & (jint) 0xFF);
          }
          ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
        }
      }
      if (needed > 2) {
        ch -= (jint) 0x10000;
        if (cix >= ((IOSCharArray *) nil_chk(cbuf))->size_) {
          cbuf = [self->_textBuffer_ expandCurrentSegment];
        }
        *IOSCharArray_GetRef(nil_chk(cbuf), cix++) = (jchar) ((jint) 0xD800 + (JreRShift32(ch, 10)));
        ch = (jint) 0xDC00 | (ch & (jint) 0x03FF);
      }
    }
    if (cix >= ((IOSCharArray *) nil_chk(cbuf))->size_) {
      cbuf = [self->_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(cbuf), cix++) = (jchar) ch;
  }
  NSString *baseName = [NSString java_stringWithCharacters:cbuf offset:0 length:cix];
  if (lastQuadBytes < 4) {
    *IOSIntArray_GetRef(nil_chk(quads), qlen - 1) = lastQuad;
  }
  return [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) addNameWithNSString:baseName withIntArray:quads withInt:qlen];
}

NSString *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishAndReturnString(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint outPtr = 0;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) emptyAndGetCurrentSegment];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
  jint outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
  do {
    jint c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
      if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return [self->_textBuffer_ setCurrentAndReturnWithInt:outPtr];
      }
      ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(self, outBuf, outPtr, c);
      return [self->_textBuffer_ contentsAsString];
    }
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  }
  while (outPtr < outEnd);
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(self, outBuf, outPtr, [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte]);
  return [self->_textBuffer_ contentsAsString];
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__finishString2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, IOSCharArray *outBuf, jint outPtr, jint c) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icUTF8;
  jint outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
  for (; ; c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte]) {
    while (IOSIntArray_Get(nil_chk(codes), c) == 0) {
      if (outPtr >= outEnd) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
        outPtr = 0;
        outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
      }
      *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
      c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      goto break_main_loop;
    }
    switch (IOSIntArray_Get(codes, c)) {
      case 1:
      c = [self _decodeEscaped];
      break;
      case 2:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_2WithInt_(self, c);
      break;
      case 3:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_3WithInt_(self, c);
      break;
      case 4:
      c = ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_4WithInt_(self, c);
      *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) ((jint) 0xD800 | (JreRShift32(c, 10)));
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
        outPtr = 0;
        outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
      }
      c = (jint) 0xDC00 | (c & (jint) 0x3FF);
      break;
      default:
      if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
      }
      else {
        [self _reportInvalidCharWithInt:c];
      }
    }
    if (outPtr >= outBuf->size_) {
      outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) finishCurrentSegment];
      outPtr = 0;
      outEnd = ((IOSCharArray *) nil_chk(outBuf))->size_;
    }
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  }
  break_main_loop: ;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) setCurrentLengthWithInt:outPtr];
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__matchTokenWithNSString_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, NSString *matchStr, jint i) {
  jint len = [((NSString *) nil_chk(matchStr)) java_length];
  do {
    jint ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (ch != [matchStr charAtWithInt:i]) {
      [self _reportInvalidTokenWithInt:ch withNSString:[matchStr java_substring:0 endIndex:i]];
    }
  }
  while (++i < len);
  jint ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (ch >= '0' && ch != ']' && ch != '}') {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__checkMatchEndWithNSString_withInt_withInt_(self, matchStr, i, ch);
  }
  self->_nextByte_ = ch;
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__checkMatchEndWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, NSString *matchStr, jint i, jint ch) {
  jchar c = (jchar) [self _decodeCharForErrorWithInt:ch];
  if (JavaLangCharacter_isJavaIdentifierPartWithChar_(c)) {
    [self _reportInvalidTokenWithInt:c withNSString:[((NSString *) nil_chk(matchStr)) java_substring:0 endIndex:i]];
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWS(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint i = self->_nextByte_;
  if (i < 0) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
  else {
    self->_nextByte_ = -1;
  }
  while (true) {
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSCommentWithInt_(self, i);
      }
      return i;
    }
    else {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
      }
    }
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSOrEnd(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint i = self->_nextByte_;
  if (i < 0) {
    @try {
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    @catch (JavaIoEOFException *e) {
      return [self _eofAsNextChar];
    }
  }
  else {
    self->_nextByte_ = -1;
  }
  while (true) {
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSCommentWithInt_(self, i);
      }
      return i;
    }
    else {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
      }
    }
    @try {
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    @catch (JavaIoEOFException *e) {
      return [self _eofAsNextChar];
    }
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipWSCommentWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i) {
  while (true) {
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipComment(self);
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        if (!ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipYAMLComment(self)) {
          return i;
        }
      }
      else {
        return i;
      }
    }
    else {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
      }
    }
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint i = self->_nextByte_;
  if (i < 0) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
  else {
    self->_nextByte_ = -1;
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
      }
      return i;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
        }
        return i;
      }
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
    i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
      }
      return i;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
        }
        return i;
      }
    }
    return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, true);
  }
  return ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(self, i, false);
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipColon2WithInt_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i, jboolean gotColon) {
  for (; ; i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte]) {
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipComment(self);
        continue;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        if (ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipYAMLComment(self)) {
          continue;
        }
      }
      if (gotColon) {
        return i;
      }
      if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
        [self _reportUnexpectedCharWithInt:i withNSString:@"was expecting a colon to separate field name and value"];
      }
      gotColon = true;
    }
    else {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
      }
    }
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_COMMENTS)]) {
    [self _reportUnexpectedCharWithInt:'/' withNSString:@"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"];
  }
  jint c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if (c == '/') {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipLine(self);
  }
  else if (c == '*') {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipCComment(self);
  }
  else {
    [self _reportUnexpectedCharWithInt:c withNSString:@"was expecting either '*' or '/' for a comment"];
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipCComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeComment();
  jint i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  while (true) {
    {
      jint code = IOSIntArray_Get(nil_chk(codes), i);
      if (code != 0) {
        switch (code) {
          case '*':
          i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
          if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
            return;
          }
          goto continue_main_loop;
          case ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF:
          case ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR:
          ++self->_currInputRow_;
          break;
          case 2:
          ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(self);
          break;
          case 3:
          ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(self);
          break;
          case 4:
          ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(self);
          break;
          default:
          [self _reportInvalidCharWithInt:i];
        }
      }
      i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    continue_main_loop: ;
  }
}

jboolean ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipYAMLComment(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_YAML_COMMENTS)]) {
    return false;
  }
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipLine(self);
  return true;
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipLine(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeComment();
  while (true) {
    jint i = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    jint code = IOSIntArray_Get(nil_chk(codes), i);
    if (code != 0) {
      switch (code) {
        case ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF:
        case ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR:
        ++self->_currInputRow_;
        return;
        case '*':
        break;
        case 2:
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(self);
        break;
        case 3:
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(self);
        break;
        case 4:
        ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(self);
        break;
        default:
        if (code < 0) {
          [self _reportInvalidCharWithInt:i];
        }
      }
    }
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_2WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c) {
  jint d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  return (JreLShift32((c & (jint) 0x1F), 6)) | (d & (jint) 0x3F);
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_3WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c1) {
  c1 &= (jint) 0x0F;
  jint d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  jint c = (JreLShift32(c1, 6)) | (d & (jint) 0x3F);
  d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
  return c;
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeUtf8_4WithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint c) {
  jint d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  c = (JreLShift32((c & (jint) 0x07), 6)) | (d & (jint) 0x3F);
  d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
  d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  return ((JreLShift32(c, 6)) | (d & (jint) 0x3F)) - (jint) 0x10000;
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_2(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((c & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, c & (jint) 0xFF);
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_3(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((c & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, c & (jint) 0xFF);
  }
  c = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((c & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, c & (jint) 0xFF);
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__skipUtf8_4(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self) {
  jint d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
  d = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(self, d & (jint) 0xFF);
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__reportInvalidOtherWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint mask) {
  [self _reportErrorWithNSString:JreStrcat("$$", @"Invalid UTF-8 middle byte 0x", JavaLangInteger_toHexStringWithInt_(mask))];
}

IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__growArrayByWithIntArray_withInt_(IOSIntArray *arr, jint more) {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initialize();
  if (arr == nil) {
    return [IOSIntArray arrayWithLength:more];
  }
  return JavaUtilArrays_copyOfWithIntArray_withInt_(arr, arr->size_ + more);
}

IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__decodeBase64WithComFasterxmlJacksonCoreBase64Variant_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, ComFasterxmlJacksonCoreBase64Variant *b64variant) {
  ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
  while (true) {
    jint ch;
    do {
      ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    }
    while (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE);
    jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        return [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray];
      }
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:0];
      if (bits < 0) {
        continue;
      }
    }
    jint decodedData = bits;
    ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:1];
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 4);
          [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendWithInt:decodedData];
          return [builder toByteArray];
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:2];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
        if (![b64variant usesPaddingCharWithInt:ch]) {
          @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3 withNSString:JreStrcat("$CC", @"expected padding character '", [b64variant getPaddingChar], '\'')]);
        }
        JreRShiftAssignInt(&decodedData, 4);
        [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendWithInt:decodedData];
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    ch = [((id<JavaIoDataInput>) nil_chk(self->_inputData_)) readUnsignedByte];
    bits = [b64variant decodeBase64CharWithInt:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 2);
          [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendTwoBytesWithInt:decodedData];
          return [builder toByteArray];
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        JreRShiftAssignInt(&decodedData, 2);
        [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendTwoBytesWithInt:decodedData];
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendThreeBytesWithInt:decodedData];
  }
}

void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__closeScopeWithInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, jint i) {
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) {
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inArray]) {
      [self _reportMismatchedEndMarkerWithInt:i withChar:'}'];
    }
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) clearAndGetParent]);
    JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY));
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inObject]) {
      [self _reportMismatchedEndMarkerWithInt:i withChar:']'];
    }
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) clearAndGetParent]);
    JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT));
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_padWithInt_withInt_(jint q, jint bytes) {
  ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initialize();
  return (bytes == 4) ? q : (q | (JreLShift32(-1, (JreLShift32(bytes, 3)))));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser)
