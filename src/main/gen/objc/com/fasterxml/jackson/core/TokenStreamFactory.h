//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/TokenStreamFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTokenStreamFactory
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTokenStreamFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTokenStreamFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory || defined(INCLUDE_ComFasterxmlJacksonCoreTokenStreamFactory))
#define ComFasterxmlJacksonCoreTokenStreamFactory_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_ComFasterxmlJacksonCoreUtilSnapshottable 1
#define INCLUDE_ComFasterxmlJacksonCoreUtilSnapshottable 1
#include "com/fasterxml/jackson/core/util/Snapshottable.h"

@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreJsonEncoding;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreSymFieldNameMatcher;
@class ComFasterxmlJacksonCoreTokenStreamFactory_Feature;
@class ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder;
@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class ComFasterxmlJacksonCoreVersion;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaNetURL;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCoreObjectReadContext;
@protocol ComFasterxmlJacksonCoreObjectWriteContext;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaUtilList;

/*!
 @brief The main factory class of Jackson streaming package, used to configure and
  construct token reader (aka parser, <code>JsonParser</code>)
  and token writer (aka generator, <code>JsonGenerator</code>)
  instances.
 <p>
  Factory instances are thread-safe and reusable after configuration
  (if any). Typically applications and services use only a single
  globally shared factory instance, unless they need differently
  configured factories. Factory reuse is important if efficiency matters;
  most recycling of expensive construct is done on per-factory basis.
 <p>
  Creation of a factory instance is a light-weight operation.
 @since 3.0 (refactored out of <code>JsonFactory</code>)
 */
@interface ComFasterxmlJacksonCoreTokenStreamFactory : NSObject < ComFasterxmlJacksonCoreVersioned, ComFasterxmlJacksonCoreUtilSnapshottable > {
 @public
  /*!
   @brief Currently enabled <code>TokenStreamFactory.Feature</code>s features as a bitmask.
   */
  jint _factoryFeatures_;
  /*!
   @brief Currently enabled <code>JsonParser.Feature</code>s as a bitmask.
   */
  jint _parserFeatures_;
  /*!
   @brief Currently enabled <code>JsonGenerator.Feature</code>s as a bitmask.
   */
  jint _generatorFeatures_;
}

#pragma mark Public

/*!
 @brief Method used by factory to create buffer recycler instances
  for parsers and generators.
 <p>
  Note: only public to give access for <code>ObjectMapper</code>
 */
- (ComFasterxmlJacksonCoreUtilBufferRecycler *)_getBufferRecycler;

/*!
 @brief Introspection method that higher-level functionality may call
  to see whether underlying data format can read and write binary
  data natively; that is, embeded it as-is without using encodings
  such as Base64.
 <p>
  Default implementation returns <code>false</code> as JSON does not
  support native access: all binary content must use Base64 encoding.
  Most binary formats (like Smile and Avro) support native binary content.
 */
- (jboolean)canHandleBinaryNatively;

/*!
 @brief Introspection method that can be used to check whether this
  factory can create non-blocking parsers: parsers that do not
  use blocking I/O abstractions but instead use a 
 <code>com.fasterxml.jackson.core.async.NonBlockingInputFeeder</code>.
 */
- (jboolean)canParseAsync;

/*!
 @brief Method that can be used to quickly check whether given schema
  is something that parsers and/or generators constructed by this
  factory could use.Note that this means possible use, at the level
  of data format (i.e. schema is for same data format as parsers and
  generators this factory constructs); individual schema instances
  may have further usage restrictions.
 */
- (jboolean)canUseSchemaWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Factory method for constructing case-insensitive <code>FieldNameMatcher</code>
  for given names.It will call <code>String.intern</code> on names unless specified
  that this has already been done by caller.
 @param matches Names to match, including both primary names and possible aliases
 */
- (ComFasterxmlJacksonCoreSymFieldNameMatcher *)constructCIFieldNameMatcherWithJavaUtilList:(id<JavaUtilList>)matches
                                                                                withBoolean:(jboolean)alreadyInterned;

/*!
 @brief Factory method for constructing case-sensitive <code>FieldNameMatcher</code>
  for given names.It will call <code>String.intern</code> on names unless specified
  that this has already been done by caller.
 @param matches Names to match, including both primary names and possible aliases
 */
- (ComFasterxmlJacksonCoreSymFieldNameMatcher *)constructFieldNameMatcherWithJavaUtilList:(id<JavaUtilList>)matches
                                                                              withBoolean:(jboolean)alreadyInterned;

/*!
 @brief Method similar to <code>snapshot()</code>, but one that forces creation of actual
  new copy that does NOT share any state, even non-visible to calling code,
  such as symbol table reuse.
 <p>
  Implementation should be functionally equivalent to
 @code

     factoryInstance.rebuild().build();
 
@endcode
 */
- (ComFasterxmlJacksonCoreTokenStreamFactory *)copy__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Convenience method for constructing generator that uses default
  encoding of the format (UTF-8 for JSON and most other data formats).
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats).
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Method for constructing generator for writing content using specified 
 <code>DataOutput</code> instance.
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                                      withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  to specified file, overwriting contents it might have (or creating
  it if such file does not yet exist).
 Encoding to use must be specified, and needs to be one of available
  types (as per JSON specification).
 <p>
  Underlying stream <b>is owned</b> by the generator constructed,
  i.e. generator will handle closing of file when 
 <code>JsonGenerator.close</code> is called.
 @param f File to write contents to
 @param enc Character encoding to use
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoFile:(JavaIoFile *)f
                                withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing generator that writes content into specified <code>DataOutput</code>,
  using UTF-8 encoding (with formats where encoding is user-configurable).
 @param writeCtxt Object-binding context where applicable; used for providing contextual     configuration
 @since 3.0
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                                                                  withJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Method for constructing generator that writes contents
  to specified file, overwriting contents it might have (or creating
  it if such file does not yet exist).
 <p>
  Underlying stream <b>is owned</b> by the generator constructed,
  i.e. generator will handle closing of file when 
 <code>JsonGenerator.close</code> is called.
 @since 3.0
 @param writeCtxt Object-binding context where applicable; used for providing contextual     configuration
 @param f File to write contents to
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                                                                        withJavaIoFile:(JavaIoFile *)f
                                                               withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing generator that writes contents
  using specified <code>OutputStream</code>.
 Textual encoding used will be UTF-8, where applicable.
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the output stream when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  is enabled).
  Using application needs to close it explicitly if this is the case.
 @param writeCtxt Object-binding context where applicable; used for providing contextual     configuration
 @param outArg OutputStream to use for writing JSON content
 @since 3.0
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                                                                withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for constructing generator that writes contents
  using specified <code>OutputStream</code> with specified textual encoding
  (if applicable).
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the output stream when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  is enabled).
  Using application needs to close it explicitly if this is the case.
 @param writeCtxt Object-binding context where applicable; used for providing contextual     configuration
 @param outArg OutputStream to use for writing JSON content
 @since 3.0
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                                                                withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                               withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing generator that writes contents
  using specified <code>Writer</code>.
 Textual encoding used will be UTF-8, where applicable.
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the Reader when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code> is enabled).
  Using application needs to close it explicitly.
 @param writeCtxt Object-binding context where applicable; used for providing contextual     configuration
 @param w Writer to use for writing JSON content
 @since 3.0
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                                                                      withJavaIoWriter:(JavaIoWriter *)w;

/*!
 @brief Convenience method for constructing generator that uses default
  encoding of the format (UTF-8 for JSON and most other data formats).
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats).
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified output stream.
 Encoding to use must be specified, and needs to be one of available
  types (as per JSON specification).
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the output stream when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  is enabled).
  Using application needs to close it explicitly if this is the case.
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats)
  and that ignore passed in encoding.
 @param outArg OutputStream to use for writing JSON content
 @param enc Character encoding to use
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                        withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified Writer.
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the Reader when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code> is enabled).
  Using application needs to close it explicitly.
 @param w Writer to use for writing JSON content
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoWriter:(JavaIoWriter *)w;

/*!
 @brief Optional method for constructing parser for non-blocking parsing
  via <code>com.fasterxml.jackson.core.async.ByteArrayFeeder</code>
  interface (accessed using <code>JsonParser.getNonBlockingInputFeeder()</code>
  from constructed instance).
 <p>
  If this factory does not support non-blocking parsing (either at all,
  or from byte array),
  will throw <code>UnsupportedOperationException</code>
 */
- (ComFasterxmlJacksonCoreJsonParser *)createNonBlockingByteArrayParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithByteArray:(IOSByteArray *)data;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithByteArray:(IOSByteArray *)data
                                                         withInt:(jint)offset
                                                         withInt:(jint)len;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithCharArray:(IOSCharArray *)content;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithCharArray:(IOSCharArray *)content
                                                         withInt:(jint)offset
                                                         withInt:(jint)len;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoFile:(JavaIoFile *)src;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method for constructing parser for parsing
  the contents of given byte array.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                  withByteArray:(IOSByteArray *)data;

/*!
 @brief Method for constructing parser for parsing
  the contents of given byte array.
 @param data Buffer that contains data to parse
 @param offset Offset of the first data byte within buffer
 @param len Length of contents to parse within buffer
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                  withByteArray:(IOSByteArray *)data
                                                                                        withInt:(jint)offset
                                                                                        withInt:(jint)len;

/*!
 @brief Method for constructing parser for parsing contents of given char array.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                  withCharArray:(IOSCharArray *)content;

/*!
 @brief Method for constructing parser for parsing contents of given char array.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                  withCharArray:(IOSCharArray *)content
                                                                                        withInt:(jint)offset
                                                                                        withInt:(jint)len;

/*!
 @brief Optional method for constructing parser for reading contents from specified <code>DataInput</code>
  instance.
 <p>
  If this factory does not support <code>DataInput</code> as source,
  will throw <code>UnsupportedOperationException</code>
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtx
                                                                            withJavaIoDataInput:(id<JavaIoDataInput>)inArg;

/*!
 @brief Method for constructing parser instance to decode
  contents of specified file.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param f File that contains JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                 withJavaIoFile:(JavaIoFile *)f;

/*!
 @brief Method for constructing JSON parser instance to parse
  the contents accessed via specified input stream.
 <p>
  The input stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 <p>
  Note: no encoding argument is taken since it can always be
  auto-detected as suggested by JSON RFC. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 @param inArg InputStream to use for reading JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                          withJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method for constructing parser for parsing
  the contents accessed via specified Reader.
 <p>
  The read stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 @param r Reader to use for reading JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                               withJavaIoReader:(JavaIoReader *)r;

/*!
 @brief Method for constructing parser for parsing contents of given String.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                   withNSString:(NSString *)content;

/*!
 @brief Method for constructing JSON parser instance to decode
  contents of resource reference by given URL.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param url URL pointing to resource that contains JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                 withJavaNetURL:(JavaNetURL *)url;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoReader:(JavaIoReader *)r;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithNSString:(NSString *)content;

/*!
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaNetURL:(JavaNetURL *)src;

/*!
 @since 3.0
 */
- (jint)getFormatGeneratorFeatures;

/*!
 @brief Method that returns short textual id identifying format
  this factory supports.
 <p>
  Note: sub-classes should override this method; default
  implementation will return null for all sub-classes
 */
- (NSString *)getFormatName;

/*!
 @since 3.0
 */
- (jint)getFormatParserFeatures;

/*!
 @brief Method for accessing kind of <code>FormatFeature</code> that a parser 
 <code>JsonParser</code> produced by this factory would accept, if any; 
 <code>null</code> returned if none.
 */
- (IOSClass *)getFormatReadFeatureType;

/*!
 @brief Method for accessing kind of <code>FormatFeature</code> that a parser 
 <code>JsonGenerator</code> produced by this factory would accept, if any; 
 <code>null</code> returned if none.
 */
- (IOSClass *)getFormatWriteFeatureType;

/*!
 @since 3.0
 */
- (jint)getGeneratorFeatures;

/*!
 @since 3.0
 */
- (jint)getParserFeatures;

- (jboolean)isEnabledWithComFasterxmlJacksonCoreTokenStreamFactory_Feature:(ComFasterxmlJacksonCoreTokenStreamFactory_Feature *)f;

/*!
 @brief Checked whether specified parser feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

/*!
 @brief Check whether specified generator feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method that can be used to create differently configured stream factories.
 @since 3.0
 */
- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)rebuild;

/*!
 @brief Introspection method that higher-level functionality may call
  to see whether underlying data format requires a stable ordering
  of object properties or not.
 This is usually used for determining
  whether to force a stable ordering (like alphabetic ordering by name)
  if no ordering if explicitly specified.
 <p>
  Default implementation returns <code>false</code> as JSON does NOT
  require stable ordering. Formats that require ordering include positional
  textual formats like <code>CSV</code>, and schema-based binary formats
  like <code>Avro</code>.
 */
- (jboolean)requiresPropertyOrdering;

/*!
 @brief Method for constructing a new <code>TokenStreamFactory</code> that has
  the same settings as this instance, but is otherwise
  independent (i.e.nothing is actually shared, symbol tables
  are separate).
 <p>
  Although assumption is that all factories are immutable -- and that we could
  usually simply return `this` -- method is left unimplemented at this level
  to make implementors aware of requirement to consider immutability.
 @since 3.0
 */
- (ComFasterxmlJacksonCoreTokenStreamFactory *)snapshot;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

/*!
 @brief Default constructor used to create factory instances.
 Creation of a factory instance is a light-weight operation,
  but it is still a good idea to reuse limited number of
  factory instances (and quite often just a single instance):
  factories are used as context for storing some reused
  processing objects (such as symbol tables parsers use)
  and this reuse only works within context of a single
  factory instance.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructor used if a snapshot is created, or possibly for sub-classing or
  wrapping (delegating)
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreTokenStreamFactory:(ComFasterxmlJacksonCoreTokenStreamFactory *)src;

/*!
 @brief Constructors used by <code>TSFBuilder</code> for instantiation.Base builder is
  passed as-is to try to make interface between base types and implementations
  less likely to change (given that sub-classing is a fragile way to do it):
  if and when new general-purpose properties are added, implementation classes
  do not have to use different constructors.
 @since 3.0
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder:(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)baseBuilder;

/*!
 @brief Overridable factory method that actually instantiates desired
  context object.
 */
- (ComFasterxmlJacksonCoreIoIOContext *)_createContextWithId:(id)srcRef
                                                 withBoolean:(jboolean)resourceManaged;

/*!
 @brief Overridable factory method that actually instantiates desired
  context object.
 */
- (ComFasterxmlJacksonCoreIoIOContext *)_createContextWithId:(id)srcRef
                                                 withBoolean:(jboolean)resourceManaged
                     withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

- (JavaIoOutputStream *)_createDataOutputWrapperWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Helper methods used for constructing an optimal stream for
  parsers to use, when input is to be read from an URL.
 This helps when reading file content via URL.
 */
- (JavaIoInputStream *)_optimizedStreamFromURLWithJavaNetURL:(JavaNetURL *)url;

- (id)_unsupported;

- (id)_unsupportedWithNSString:(NSString *)str
             withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreTokenStreamFactory)

/*!
 @brief Shareable stateles "empty" <code>ObjectWriteContext</code> Object, passed in
  cases where caller had not passed actual context -- "null object" of sort.
 */
inline id<ComFasterxmlJacksonCoreObjectWriteContext> ComFasterxmlJacksonCoreTokenStreamFactory_get_EMPTY_WRITE_CONTEXT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComFasterxmlJacksonCoreObjectWriteContext> ComFasterxmlJacksonCoreTokenStreamFactory_EMPTY_WRITE_CONTEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreTokenStreamFactory, EMPTY_WRITE_CONTEXT, id<ComFasterxmlJacksonCoreObjectWriteContext>)

/*!
 @brief Bitfield (set of flags) of all factory features that are enabled by default.
 */
inline jint ComFasterxmlJacksonCoreTokenStreamFactory_get_DEFAULT_FACTORY_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreTokenStreamFactory_DEFAULT_FACTORY_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreTokenStreamFactory, DEFAULT_FACTORY_FEATURE_FLAGS, jint)

/*!
 @brief Bitfield (set of flags) of all parser features that are enabled
  by default.
 */
inline jint ComFasterxmlJacksonCoreTokenStreamFactory_get_DEFAULT_PARSER_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreTokenStreamFactory_DEFAULT_PARSER_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreTokenStreamFactory, DEFAULT_PARSER_FEATURE_FLAGS, jint)

/*!
 @brief Bitfield (set of flags) of all generator features that are enabled
  by default.
 */
inline jint ComFasterxmlJacksonCoreTokenStreamFactory_get_DEFAULT_GENERATOR_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreTokenStreamFactory_DEFAULT_GENERATOR_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreTokenStreamFactory, DEFAULT_GENERATOR_FEATURE_FLAGS, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_init(ComFasterxmlJacksonCoreTokenStreamFactory *self);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_initWithComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_(ComFasterxmlJacksonCoreTokenStreamFactory *self, ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *baseBuilder);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_initWithComFasterxmlJacksonCoreTokenStreamFactory_(ComFasterxmlJacksonCoreTokenStreamFactory *self, ComFasterxmlJacksonCoreTokenStreamFactory *src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTokenStreamFactory)

#endif

#if !defined (ComFasterxmlJacksonCoreTokenStreamFactory_Feature_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory || defined(INCLUDE_ComFasterxmlJacksonCoreTokenStreamFactory_Feature))
#define ComFasterxmlJacksonCoreTokenStreamFactory_Feature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreTokenStreamFactory_Feature_Enum) {
  ComFasterxmlJacksonCoreTokenStreamFactory_Feature_Enum_INTERN_FIELD_NAMES = 0,
  ComFasterxmlJacksonCoreTokenStreamFactory_Feature_Enum_CANONICALIZE_FIELD_NAMES = 1,
  ComFasterxmlJacksonCoreTokenStreamFactory_Feature_Enum_FAIL_ON_SYMBOL_HASH_OVERFLOW = 2,
  ComFasterxmlJacksonCoreTokenStreamFactory_Feature_Enum_USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING = 3,
};

/*!
 @brief Enumeration that defines all on/off features that can only be
  changed for <code>TokenStreamFactory</code>.
 */
@interface ComFasterxmlJacksonCoreTokenStreamFactory_Feature : JavaLangEnum

#pragma mark Public

/*!
 @brief Method that calculates bit set (flags) of all features that
  are enabled by default.
 */
+ (jint)collectDefaults;

- (jboolean)enabledByDefault;

- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonCoreTokenStreamFactory_Feature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreTokenStreamFactory_Feature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_values_[];

/*!
 @brief Feature that determines whether JSON object field names are
  to be canonicalized using <code>String.intern</code> or not:
  if enabled, all field names will be intern()ed (and caller
  can count on this being true for all such names); if disabled,
  no intern()ing is done.There may still be basic
  canonicalization (that is, same String will be used to represent
  all identical object property names for a single document).
 <p>
  Note: this setting only has effect if 
 <code>CANONICALIZE_FIELD_NAMES</code> is true -- otherwise no
  canonicalization of any sort is done.
 <p>
  This setting is disabled by default since 3.0 (was enabled in 1.x and 2.x)
 */
inline ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_get_INTERN_FIELD_NAMES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTokenStreamFactory_Feature, INTERN_FIELD_NAMES)

/*!
 @brief Feature that determines whether JSON object field names are
  to be canonicalized (details of how canonicalization is done
  then further specified by 
 <code>INTERN_FIELD_NAMES</code>).
 <p>
  This setting is enabled by default.
 */
inline ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_get_CANONICALIZE_FIELD_NAMES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTokenStreamFactory_Feature, CANONICALIZE_FIELD_NAMES)

/*!
 @brief Feature that determines what happens if we encounter a case in symbol
  handling where number of hash collisions exceeds a safety threshold
  -- which almost certainly means a denial-of-service attack via generated
  duplicate hash codes.
 If feature is enabled, an <code>IllegalStateException</code> is
  thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but
  canonicalization (and thereby <code>intern()</code>ing) is disabled) as protective
  measure.
 <p>
  This setting is enabled by default.
 */
inline ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_get_FAIL_ON_SYMBOL_HASH_OVERFLOW(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTokenStreamFactory_Feature, FAIL_ON_SYMBOL_HASH_OVERFLOW)

/*!
 @brief Feature that determines whether we will use <code>BufferRecycler</code> with 
 <code>ThreadLocal</code> and <code>SoftReference</code>, for efficient reuse of
  underlying input/output buffers.
 This usually makes sense on normal J2SE/J2EE server-side processing;
  but may not make sense on platforms where <code>SoftReference</code> handling
  is broken (like Android), or if there are retention issues due to 
 <code>ThreadLocal</code> (see 
 <a href="https://github.com/FasterXML/jackson-core/issues/189">Issue #189</a>
  for a possible case)
 <p>
  This setting is enabled by default.
 */
inline ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_get_USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTokenStreamFactory_Feature, USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreTokenStreamFactory_Feature_collectDefaults(void);

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTokenStreamFactory_Feature *ComFasterxmlJacksonCoreTokenStreamFactory_Feature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTokenStreamFactory_Feature)

#endif

#if !defined (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory || defined(INCLUDE_ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder))
#define ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_

@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreTokenStreamFactory;
@class ComFasterxmlJacksonCoreTokenStreamFactory_Feature;
@class IOSObjectArray;

/*!
 @brief Since factory instances are immutable, a Builder class is needed for creating
  configurations for differently configured factory instances.
 @since 3.0
 */
@interface ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder : NSObject {
 @public
  /*!
   @brief Set of <code>TokenStreamFactory.Feature</code>s enabled, as bitmask.
   */
  jint _factoryFeatures_;
  /*!
   @brief Set of <code>JsonParser.Feature</code>s enabled, as bitmask.
   */
  jint _parserFeatures_;
  /*!
   @brief Set of <code>JsonGenerator.Feature</code>s enabled, as bitmask.
   */
  jint _generatorFeatures_;
}

#pragma mark Public

/*!
 @brief Method for constructing actual <code>TokenStreamFactory</code> instance, given
  configuration.
 */
- (ComFasterxmlJacksonCoreTokenStreamFactory *)build;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)configureWithComFasterxmlJacksonCoreTokenStreamFactory_Feature:(ComFasterxmlJacksonCoreTokenStreamFactory_Feature *)f
                                                                                                             withBoolean:(jboolean)state;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)configureWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f
                                                                                                     withBoolean:(jboolean)state;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)configureWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f
                                                                                                        withBoolean:(jboolean)state;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)disableWithComFasterxmlJacksonCoreTokenStreamFactory_Feature:(ComFasterxmlJacksonCoreTokenStreamFactory_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)disableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)disableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)disableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)first
                                                            withComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)other;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)disableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)first
                                                            withComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)other;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)enableWithComFasterxmlJacksonCoreTokenStreamFactory_Feature:(ComFasterxmlJacksonCoreTokenStreamFactory_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)enableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)enableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)enableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)first
                                                           withComFasterxmlJacksonCoreJsonParser_FeatureArray:(IOSObjectArray *)other;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)enableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)first
                                                           withComFasterxmlJacksonCoreJsonGenerator_FeatureArray:(IOSObjectArray *)other;

- (jint)factoryFeaturesMask;

- (jint)generatorFeaturesMask;

- (jint)parserFeaturesMask;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)factoryFeatures
                              withInt:(jint)parserFeatures
                              withInt:(jint)generatorFeatures;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreTokenStreamFactory:(ComFasterxmlJacksonCoreTokenStreamFactory *)base;

- (ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *)_this;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_init(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *self);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_initWithComFasterxmlJacksonCoreTokenStreamFactory_(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *self, ComFasterxmlJacksonCoreTokenStreamFactory *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder_initWithInt_withInt_withInt_(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder *self, jint factoryFeatures, jint parserFeatures, jint generatorFeatures);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTokenStreamFactory_TSFBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamFactory")
