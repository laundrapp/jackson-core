//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFormatDataFormatDetector")
#ifdef RESTRICT_ComFasterxmlJacksonCoreFormatDataFormatDetector
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFormatDataFormatDetector 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFormatDataFormatDetector 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreFormatDataFormatDetector

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreFormatDataFormatDetector_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreFormatDataFormatDetector || defined(INCLUDE_ComFasterxmlJacksonCoreFormatDataFormatDetector))
#define ComFasterxmlJacksonCoreFormatDataFormatDetector_

@class ComFasterxmlJacksonCoreFormatDataFormatMatcher;
@class ComFasterxmlJacksonCoreFormatMatchStrength;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@protocol JavaUtilCollection;

/*!
 @brief Simple helper class that allows data format (content type) auto-detection,
  given an ordered set of <code>JsonFactory</code> instances to use for actual low-level
  detection.
 */
@interface ComFasterxmlJacksonCoreFormatDataFormatDetector : NSObject {
 @public
  /*!
   @brief Ordered list of factories which both represent data formats to
  detect (in precedence order, starting with highest) and are used
  for actual detection.
   */
  IOSObjectArray *_detectors_;
  /*!
   @brief Strength of match we consider to be good enough to be used
  without checking any other formats.
   Default value is <code>MatchStrength.SOLID_MATCH</code>,
   */
  ComFasterxmlJacksonCoreFormatMatchStrength *_optimalMatch_;
  /*!
   @brief Strength of minimal match we accept as the answer, unless
  better matches are found.
   Default value is <code>MatchStrength.WEAK_MATCH</code>,
   */
  ComFasterxmlJacksonCoreFormatMatchStrength *_minimalMatch_;
  /*!
   @brief Maximum number of leading bytes of the input that we can read
  to determine data format.
   <p>
  Default value is <code>DEFAULT_MAX_INPUT_LOOKAHEAD</code>.
   */
  jint _maxInputLookahead_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)detectors;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonFactoryArray:(IOSObjectArray *)detectors;

/*!
 @brief Method to call to find format that given content (full document)
  has, as per configuration of this detector instance.
 @return Matcher object which contains result; never null, even in cases
     where no match (with specified minimal match strength) is found.
 */
- (ComFasterxmlJacksonCoreFormatDataFormatMatcher *)findFormatWithByteArray:(IOSByteArray *)fullInputData;

/*!
 @brief Method to call to find format that given content (full document)
  has, as per configuration of this detector instance.
 @return Matcher object which contains result; never null, even in cases
     where no match (with specified minimal match strength) is found.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreFormatDataFormatMatcher *)findFormatWithByteArray:(IOSByteArray *)fullInputData
                                                                    withInt:(jint)offset
                                                                    withInt:(jint)len;

/*!
 @brief Method to call to find format that content (accessible via given 
 <code>InputStream</code>) given has, as per configuration of this detector
  instance.
 @return Matcher object which contains result; never null, even in cases
     where no match (with specified minimal match strength) is found.
 */
- (ComFasterxmlJacksonCoreFormatDataFormatMatcher *)findFormatWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (NSString *)description;

/*!
 @brief Method that will return a detector instance that allows detectors to
  read up to specified number of bytes when determining format match strength.
 */
- (ComFasterxmlJacksonCoreFormatDataFormatDetector *)withMaxInputLookaheadWithInt:(jint)lookaheadBytes;

/*!
 @brief Method that will return a detector instance that uses given
  minimal match level; match that may be returned unless a stronger match
  is found with other format detectors.
 */
- (ComFasterxmlJacksonCoreFormatDataFormatDetector *)withMinimalMatchWithComFasterxmlJacksonCoreFormatMatchStrength:(ComFasterxmlJacksonCoreFormatMatchStrength *)minMatch;

/*!
 @brief Method that will return a detector instance that uses given
  optimal match level (match that is considered sufficient to return, without
  trying to find stronger matches with other formats).
 */
- (ComFasterxmlJacksonCoreFormatDataFormatDetector *)withOptimalMatchWithComFasterxmlJacksonCoreFormatMatchStrength:(ComFasterxmlJacksonCoreFormatMatchStrength *)optMatch;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreFormatDataFormatDetector)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFormatDataFormatDetector, _detectors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFormatDataFormatDetector, _optimalMatch_, ComFasterxmlJacksonCoreFormatMatchStrength *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFormatDataFormatDetector, _minimalMatch_, ComFasterxmlJacksonCoreFormatMatchStrength *)

/*!
 @brief By default we will look ahead at most 64 bytes; in most cases,
  much less (4 bytes or so) is needed, but we will allow bit more
  leniency to support data formats that need more complex heuristics.
 */
inline jint ComFasterxmlJacksonCoreFormatDataFormatDetector_get_DEFAULT_MAX_INPUT_LOOKAHEAD(void);
#define ComFasterxmlJacksonCoreFormatDataFormatDetector_DEFAULT_MAX_INPUT_LOOKAHEAD 64
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreFormatDataFormatDetector, DEFAULT_MAX_INPUT_LOOKAHEAD, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithComFasterxmlJacksonCoreJsonFactoryArray_(ComFasterxmlJacksonCoreFormatDataFormatDetector *self, IOSObjectArray *detectors);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatDataFormatDetector *new_ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithComFasterxmlJacksonCoreJsonFactoryArray_(IOSObjectArray *detectors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatDataFormatDetector *create_ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithComFasterxmlJacksonCoreJsonFactoryArray_(IOSObjectArray *detectors);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithJavaUtilCollection_(ComFasterxmlJacksonCoreFormatDataFormatDetector *self, id<JavaUtilCollection> detectors);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatDataFormatDetector *new_ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithJavaUtilCollection_(id<JavaUtilCollection> detectors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatDataFormatDetector *create_ComFasterxmlJacksonCoreFormatDataFormatDetector_initWithJavaUtilCollection_(id<JavaUtilCollection> detectors);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreFormatDataFormatDetector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFormatDataFormatDetector")
