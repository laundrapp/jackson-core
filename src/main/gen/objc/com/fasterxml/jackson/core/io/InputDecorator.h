//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoInputDecorator")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoInputDecorator
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoInputDecorator 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoInputDecorator 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoInputDecorator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoInputDecorator_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoInputDecorator || defined(INCLUDE_ComFasterxmlJacksonCoreIoInputDecorator))
#define ComFasterxmlJacksonCoreIoInputDecorator_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreIoIOContext;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@protocol JavaIoDataInput;

/*!
 @brief Handler class that can be used to decorate input sources.
 Typical use is to use a filter abstraction (filtered stream,
  reader) around original input source, and apply additional
  processing during read operations.
 */
@interface ComFasterxmlJacksonCoreIoInputDecorator : NSObject < JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called by <code>com.fasterxml.jackson.core.JsonFactory</code> instance when
  creating parser on given "raw" byte source.
 Method can either construct a <code>InputStream</code> for reading; or return
  null to indicate that no wrapping should occur.
 @param ctxt IO context in use (provides access to declared encoding)    NOTE: at this point context may not have all information initialized;
     specifically auto-detected encoding is only available once parsing starts,
     which may occur only after this method is called.
 @param src Input buffer that contains contents to parse
 @param offset Offset of the first available byte in the input buffer
 @param length Number of bytes available in the input buffer
 @return Either <code>InputStream</code> to use as input source; or null to indicate
    that contents are to be processed as-is by caller
 */
- (JavaIoInputStream *)decorateWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                        withByteArray:(IOSByteArray *)src
                                                              withInt:(jint)offset
                                                              withInt:(jint)length;

/*!
 @brief Method called by <code>com.fasterxml.jackson.core.JsonFactory</code> instance when
  creating parser given an <code>DataInput</code>, when this decorator
  has been registered.
 <p>
  Default implementation simply throws <code>UnsupportedOperationException</code>
 @param ctxt IO context in use (provides access to declared encoding).    NOTE: at this point context may not have all information initialized;
     specifically auto-detected encoding is only available once parsing starts,
     which may occur only after this method is called.
 @param input Original input source
 @return InputStream to use; either 'input' as is, or decorator
    version that typically delogates to 'input'
 @since 2.8
 */
- (id<JavaIoDataInput>)decorateWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                  withJavaIoDataInput:(id<JavaIoDataInput>)input;

/*!
 @brief Method called by <code>com.fasterxml.jackson.core.JsonFactory</code> instance when
  creating parser given an <code>InputStream</code>, when this decorator
  has been registered.
 @param ctxt IO context in use (provides access to declared encoding).    NOTE: at this point context may not have all information initialized;
     specifically auto-detected encoding is only available once parsing starts,
     which may occur only after this method is called.
 @param inArg Original input source
 @return InputStream to use; either 'in' as is, or decorator
    version that typically delogates to 'in'
 */
- (JavaIoInputStream *)decorateWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                withJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method called by <code>com.fasterxml.jackson.core.JsonFactory</code> instance when
  creating parser given an <code>Reader</code>, when this decorator
  has been registered.
 @param ctxt IO context in use (provides access to declared encoding)    NOTE: at this point context may not have all information initialized;
     specifically auto-detected encoding is only available once parsing starts,
     which may occur only after this method is called.
 @param r Original reader
 @return Reader to use; either passed in argument, or something that
    calls it (for example, a <code>FilterReader</code>)
 */
- (JavaIoReader *)decorateWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                withJavaIoReader:(JavaIoReader *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreIoInputDecorator)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoInputDecorator_init(ComFasterxmlJacksonCoreIoInputDecorator *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoInputDecorator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoInputDecorator")
