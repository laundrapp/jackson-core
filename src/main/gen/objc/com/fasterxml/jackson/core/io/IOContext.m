//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/IOContext.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonEncoding.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/util/BufferRecycler.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface ComFasterxmlJacksonCoreIoIOContext ()

- (JavaLangIllegalArgumentException *)wrongBuf;

@end

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(ComFasterxmlJacksonCoreIoIOContext *self, id buffer);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(ComFasterxmlJacksonCoreIoIOContext *self, IOSByteArray *toRelease, IOSByteArray *src);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(ComFasterxmlJacksonCoreIoIOContext *self, IOSCharArray *toRelease, IOSCharArray *src);

__attribute__((unused)) static JavaLangIllegalArgumentException *ComFasterxmlJacksonCoreIoIOContext_wrongBuf(ComFasterxmlJacksonCoreIoIOContext *self);

@implementation ComFasterxmlJacksonCoreIoIOContext

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br
                                                                     withId:(id)sourceRef
                                                                withBoolean:(jboolean)managedResource {
  ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(self, br, sourceRef, managedResource);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br
                                                                     withId:(id)sourceRef
                                                                withBoolean:(jboolean)managedResource
                                    withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc {
  ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(self, br, sourceRef, managedResource, enc);
  return self;
}

- (ComFasterxmlJacksonCoreIoIOContext *)setEncodingWithComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc {
  JreStrongAssign(&_encoding_, enc);
  return self;
}

- (id)getSourceReference {
  return _sourceRef_;
}

- (ComFasterxmlJacksonCoreJsonEncoding *)getEncoding {
  return _encoding_;
}

- (jboolean)isResourceManaged {
  return _managedResource_;
}

- (ComFasterxmlJacksonCoreUtilTextBuffer *)constructTextBuffer {
  return create_ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(_bufferRecycler_);
}

- (IOSByteArray *)allocReadIOBuffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _readIOBuffer_);
  return (JreStrongAssign(&_readIOBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_READ_IO_BUFFER]));
}

- (IOSByteArray *)allocReadIOBufferWithInt:(jint)minSize {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _readIOBuffer_);
  return (JreStrongAssign(&_readIOBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_READ_IO_BUFFER withInt:minSize]));
}

- (IOSByteArray *)allocWriteEncodingBuffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _writeEncodingBuffer_);
  return (JreStrongAssign(&_writeEncodingBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_WRITE_ENCODING_BUFFER]));
}

- (IOSByteArray *)allocWriteEncodingBufferWithInt:(jint)minSize {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _writeEncodingBuffer_);
  return (JreStrongAssign(&_writeEncodingBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_WRITE_ENCODING_BUFFER withInt:minSize]));
}

- (IOSByteArray *)allocBase64Buffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _base64Buffer_);
  return (JreStrongAssign(&_base64Buffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_BASE64_CODEC_BUFFER]));
}

- (IOSByteArray *)allocBase64BufferWithInt:(jint)minSize {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _base64Buffer_);
  return (JreStrongAssign(&_base64Buffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_BASE64_CODEC_BUFFER withInt:minSize]));
}

- (IOSCharArray *)allocTokenBuffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _tokenCBuffer_);
  return (JreStrongAssign(&_tokenCBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_TOKEN_BUFFER]));
}

- (IOSCharArray *)allocTokenBufferWithInt:(jint)minSize {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _tokenCBuffer_);
  return (JreStrongAssign(&_tokenCBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_TOKEN_BUFFER withInt:minSize]));
}

- (IOSCharArray *)allocConcatBuffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _concatCBuffer_);
  return (JreStrongAssign(&_concatCBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_CONCAT_BUFFER]));
}

- (IOSCharArray *)allocNameCopyBufferWithInt:(jint)minSize {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, _nameCopyBuffer_);
  return (JreStrongAssign(&_nameCopyBuffer_, [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) allocCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_NAME_COPY_BUFFER withInt:minSize]));
}

- (void)releaseReadIOBufferWithByteArray:(IOSByteArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(self, buf, _readIOBuffer_);
    JreStrongAssign(&_readIOBuffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_READ_IO_BUFFER withByteArray:buf];
  }
}

- (void)releaseWriteEncodingBufferWithByteArray:(IOSByteArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(self, buf, _writeEncodingBuffer_);
    JreStrongAssign(&_writeEncodingBuffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_WRITE_ENCODING_BUFFER withByteArray:buf];
  }
}

- (void)releaseBase64BufferWithByteArray:(IOSByteArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(self, buf, _base64Buffer_);
    JreStrongAssign(&_base64Buffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseByteBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_BYTE_BASE64_CODEC_BUFFER withByteArray:buf];
  }
}

- (void)releaseTokenBufferWithCharArray:(IOSCharArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(self, buf, _tokenCBuffer_);
    JreStrongAssign(&_tokenCBuffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_TOKEN_BUFFER withCharArray:buf];
  }
}

- (void)releaseConcatBufferWithCharArray:(IOSCharArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(self, buf, _concatCBuffer_);
    JreStrongAssign(&_concatCBuffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_CONCAT_BUFFER withCharArray:buf];
  }
}

- (void)releaseNameCopyBufferWithCharArray:(IOSCharArray *)buf {
  if (buf != nil) {
    ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(self, buf, _nameCopyBuffer_);
    JreStrongAssign(&_nameCopyBuffer_, nil);
    [((ComFasterxmlJacksonCoreUtilBufferRecycler *) nil_chk(_bufferRecycler_)) releaseCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_NAME_COPY_BUFFER withCharArray:buf];
  }
}

- (void)_verifyAllocWithId:(id)buffer {
  ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(self, buffer);
}

- (void)_verifyReleaseWithByteArray:(IOSByteArray *)toRelease
                      withByteArray:(IOSByteArray *)src {
  ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(self, toRelease, src);
}

- (void)_verifyReleaseWithCharArray:(IOSCharArray *)toRelease
                      withCharArray:(IOSCharArray *)src {
  ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(self, toRelease, src);
}

- (JavaLangIllegalArgumentException *)wrongBuf {
  return ComFasterxmlJacksonCoreIoIOContext_wrongBuf(self);
}

- (void)dealloc {
  RELEASE_(_sourceRef_);
  RELEASE_(_encoding_);
  RELEASE_(_bufferRecycler_);
  RELEASE_(_readIOBuffer_);
  RELEASE_(_writeEncodingBuffer_);
  RELEASE_(_base64Buffer_);
  RELEASE_(_tokenCBuffer_);
  RELEASE_(_concatCBuffer_);
  RELEASE_(_nameCopyBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreIoIOContext;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonEncoding;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreUtilTextBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 20, 22, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreUtilBufferRecycler:withId:withBoolean:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreUtilBufferRecycler:withId:withBoolean:withComFasterxmlJacksonCoreJsonEncoding:);
  methods[2].selector = @selector(setEncodingWithComFasterxmlJacksonCoreJsonEncoding:);
  methods[3].selector = @selector(getSourceReference);
  methods[4].selector = @selector(getEncoding);
  methods[5].selector = @selector(isResourceManaged);
  methods[6].selector = @selector(constructTextBuffer);
  methods[7].selector = @selector(allocReadIOBuffer);
  methods[8].selector = @selector(allocReadIOBufferWithInt:);
  methods[9].selector = @selector(allocWriteEncodingBuffer);
  methods[10].selector = @selector(allocWriteEncodingBufferWithInt:);
  methods[11].selector = @selector(allocBase64Buffer);
  methods[12].selector = @selector(allocBase64BufferWithInt:);
  methods[13].selector = @selector(allocTokenBuffer);
  methods[14].selector = @selector(allocTokenBufferWithInt:);
  methods[15].selector = @selector(allocConcatBuffer);
  methods[16].selector = @selector(allocNameCopyBufferWithInt:);
  methods[17].selector = @selector(releaseReadIOBufferWithByteArray:);
  methods[18].selector = @selector(releaseWriteEncodingBufferWithByteArray:);
  methods[19].selector = @selector(releaseBase64BufferWithByteArray:);
  methods[20].selector = @selector(releaseTokenBufferWithCharArray:);
  methods[21].selector = @selector(releaseConcatBufferWithCharArray:);
  methods[22].selector = @selector(releaseNameCopyBufferWithCharArray:);
  methods[23].selector = @selector(_verifyAllocWithId:);
  methods[24].selector = @selector(_verifyReleaseWithByteArray:withByteArray:);
  methods[25].selector = @selector(_verifyReleaseWithCharArray:withCharArray:);
  methods[26].selector = @selector(wrongBuf);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sourceRef_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_encoding_", "LComFasterxmlJacksonCoreJsonEncoding;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_managedResource_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_bufferRecycler_", "LComFasterxmlJacksonCoreUtilBufferRecycler;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_readIOBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_writeEncodingBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_base64Buffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_tokenCBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_concatCBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nameCopyBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreUtilBufferRecycler;LNSObject;Z", "LComFasterxmlJacksonCoreUtilBufferRecycler;LNSObject;ZLComFasterxmlJacksonCoreJsonEncoding;", "setEncoding", "LComFasterxmlJacksonCoreJsonEncoding;", "allocReadIOBuffer", "I", "allocWriteEncodingBuffer", "allocBase64Buffer", "allocTokenBuffer", "allocNameCopyBuffer", "releaseReadIOBuffer", "[B", "releaseWriteEncodingBuffer", "releaseBase64Buffer", "releaseTokenBuffer", "[C", "releaseConcatBuffer", "releaseNameCopyBuffer", "_verifyAlloc", "LNSObject;", "_verifyRelease", "[B[B", "[C[C" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreIoIOContext = { "IOContext", "com.fasterxml.jackson.core.io", ptrTable, methods, fields, 7, 0x1, 27, 10, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreIoIOContext;
}

@end

void ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource) {
  NSObject_init(self);
  JreStrongAssign(&self->_bufferRecycler_, br);
  JreStrongAssign(&self->_sourceRef_, sourceRef);
  self->_managedResource_ = managedResource;
}

ComFasterxmlJacksonCoreIoIOContext *new_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreIoIOContext, initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_, br, sourceRef, managedResource)
}

ComFasterxmlJacksonCoreIoIOContext *create_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreIoIOContext, initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_, br, sourceRef, managedResource)
}

void ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreIoIOContext *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc) {
  NSObject_init(self);
  JreStrongAssign(&self->_bufferRecycler_, br);
  JreStrongAssign(&self->_sourceRef_, sourceRef);
  self->_managedResource_ = managedResource;
  JreStrongAssign(&self->_encoding_, enc);
}

ComFasterxmlJacksonCoreIoIOContext *new_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreIoIOContext, initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_, br, sourceRef, managedResource, enc)
}

ComFasterxmlJacksonCoreIoIOContext *create_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreIoIOContext, initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_, br, sourceRef, managedResource, enc)
}

void ComFasterxmlJacksonCoreIoIOContext__verifyAllocWithId_(ComFasterxmlJacksonCoreIoIOContext *self, id buffer) {
  if (buffer != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Trying to call same allocXxx() method second time");
  }
}

void ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithByteArray_withByteArray_(ComFasterxmlJacksonCoreIoIOContext *self, IOSByteArray *toRelease, IOSByteArray *src) {
  if ((toRelease != src) && (((IOSByteArray *) nil_chk(toRelease))->size_ < ((IOSByteArray *) nil_chk(src))->size_)) {
    @throw nil_chk(ComFasterxmlJacksonCoreIoIOContext_wrongBuf(self));
  }
}

void ComFasterxmlJacksonCoreIoIOContext__verifyReleaseWithCharArray_withCharArray_(ComFasterxmlJacksonCoreIoIOContext *self, IOSCharArray *toRelease, IOSCharArray *src) {
  if ((toRelease != src) && (((IOSCharArray *) nil_chk(toRelease))->size_ < ((IOSCharArray *) nil_chk(src))->size_)) {
    @throw nil_chk(ComFasterxmlJacksonCoreIoIOContext_wrongBuf(self));
  }
}

JavaLangIllegalArgumentException *ComFasterxmlJacksonCoreIoIOContext_wrongBuf(ComFasterxmlJacksonCoreIoIOContext *self) {
  return create_JavaLangIllegalArgumentException_initWithNSString_(@"Trying to release buffer smaller than original");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreIoIOContext)
