//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonPointer.h"
#include "com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.h"
#include "com/fasterxml/jackson/core/filter/TokenFilter.h"

@implementation ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter

- (instancetype __nonnull)initWithNSString:(NSString *)ptrExpr {
  ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithNSString_(self, ptrExpr);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)match {
  ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(self, match);
  return self;
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)includeElementWithInt:(jint)index {
  ComFasterxmlJacksonCoreJsonPointer *next = [((ComFasterxmlJacksonCoreJsonPointer *) nil_chk(_pathToMatch_)) matchElementWithInt:index];
  if (next == nil) {
    return nil;
  }
  if ([next matches]) {
    return JreLoadStatic(ComFasterxmlJacksonCoreFilterTokenFilter, INCLUDE_ALL);
  }
  return create_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(next);
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)includePropertyWithNSString:(NSString *)name {
  ComFasterxmlJacksonCoreJsonPointer *next = [((ComFasterxmlJacksonCoreJsonPointer *) nil_chk(_pathToMatch_)) matchPropertyWithNSString:name];
  if (next == nil) {
    return nil;
  }
  if ([next matches]) {
    return JreLoadStatic(ComFasterxmlJacksonCoreFilterTokenFilter, INCLUDE_ALL);
  }
  return create_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(next);
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartArray {
  return self;
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartObject {
  return self;
}

- (jboolean)_includeScalar {
  return [((ComFasterxmlJacksonCoreJsonPointer *) nil_chk(_pathToMatch_)) matches];
}

- (NSString *)description {
  return JreStrcat("$@C", @"[JsonPointerFilter at: ", _pathToMatch_, ']');
}

- (void)dealloc {
  RELEASE_(_pathToMatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreJsonPointer:);
  methods[2].selector = @selector(includeElementWithInt:);
  methods[3].selector = @selector(includePropertyWithNSString:);
  methods[4].selector = @selector(filterStartArray);
  methods[5].selector = @selector(filterStartObject);
  methods[6].selector = @selector(_includeScalar);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pathToMatch_", "LComFasterxmlJacksonCoreJsonPointer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LComFasterxmlJacksonCoreJsonPointer;", "includeElement", "I", "includeProperty", "toString" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter = { "JsonPointerBasedFilter", "com.fasterxml.jackson.core.filter", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter;
}

@end

void ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithNSString_(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *self, NSString *ptrExpr) {
  ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(self, ComFasterxmlJacksonCoreJsonPointer_compileWithNSString_(ptrExpr));
}

ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *new_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithNSString_(NSString *ptrExpr) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter, initWithNSString_, ptrExpr)
}

ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *create_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithNSString_(NSString *ptrExpr) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter, initWithNSString_, ptrExpr)
}

void ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *self, ComFasterxmlJacksonCoreJsonPointer *match) {
  ComFasterxmlJacksonCoreFilterTokenFilter_init(self);
  JreStrongAssign(&self->_pathToMatch_, match);
}

ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *new_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonCoreJsonPointer *match) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter, initWithComFasterxmlJacksonCoreJsonPointer_, match)
}

ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter *create_ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter_initWithComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonCoreJsonPointer *match) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter, initWithComFasterxmlJacksonCoreJsonPointer_, match)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreFilterJsonPointerBasedFilter)
