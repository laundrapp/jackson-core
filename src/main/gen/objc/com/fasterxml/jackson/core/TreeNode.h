//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/TreeNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTreeNode")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTreeNode
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTreeNode 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTreeNode 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTreeNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTreeNode_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTreeNode || defined(INCLUDE_ComFasterxmlJacksonCoreTreeNode))
#define ComFasterxmlJacksonCoreTreeNode_

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_NumberType;
@class ComFasterxmlJacksonCoreJsonPointer;
@class ComFasterxmlJacksonCoreJsonToken;
@protocol ComFasterxmlJacksonCoreObjectReadContext;
@protocol JavaUtilIterator;

/*!
 @brief Marker interface used to denote JSON Tree nodes, as far as
  the core package knows them (which is very little): mostly
  needed to allow <code>ObjectReadContext</code> and <code>ObjectWriteContext</code>
  to have some level of interoperability.
 Most functionality is within <code>JsonNode</code>
  base class in <code>databind</code> package.
 */
@protocol ComFasterxmlJacksonCoreTreeNode < JavaObject >

/*!
 @brief Method that can be used for efficient type detection
  when using stream abstraction for traversing nodes.
 Will return the first <code>JsonToken</code> that equivalent
  stream event would produce (for most nodes there is just
  one token but for structured/container types multiple)
 */
- (ComFasterxmlJacksonCoreJsonToken *)asToken;

/*!
 @brief If this node is a numeric type (as per <code>JsonToken.isNumeric</code>),
  returns native type that node uses to store the numeric value;
  otherwise returns null.
 @return Type of number contained, if any; or null if node does not
   contain numeric value.
 */
- (ComFasterxmlJacksonCoreJsonParser_NumberType *)numberType;

/*!
 @brief Method that returns number of child nodes this node contains:
  for Array nodes, number of child elements, for Object nodes,
  number of fields, and for all other nodes 0.
 @return For non-container nodes returns 0; for arrays number of
    contained elements, and for objects number of fields.
 */
- (jint)size;

/*!
 @brief Method that returns true for all value nodes: ones that 
  are not containers, and that do not represent "missing" nodes
  in the path.Such value nodes represent String, Number, Boolean
  and null values from JSON.
 <p>
  Note: one and only one of methods <code>isValueNode</code>,
  <code>isContainerNode</code> and <code>isMissingNode</code> ever
  returns true for any given node.
 */
- (jboolean)isValueNode;

/*!
 @brief Method that returns true for container nodes: Arrays and Objects.
 <p>
  Note: one and only one of methods <code>isValueNode</code>,
  <code>isContainerNode</code> and <code>isMissingNode</code> ever
  returns true for any given node.
 */
- (jboolean)isContainerNode;

/*!
 @brief Method that returns true for "virtual" nodes which represent
  missing entries constructed by path accessor methods when
  there is no actual node matching given criteria.
 <p>
  Note: one and only one of methods <code>isValueNode</code>,
  <code>isContainerNode</code> and <code>isMissingNode</code> ever
  returns true for any given node.
 */
- (jboolean)isMissingNode;

/*!
 @brief Method that returns true if this node is an Array node, false
  otherwise.
 Note that if true is returned, <code>isContainerNode</code>
  must also return true.
 */
- (jboolean)isArray;

/*!
 @brief Method that returns true if this node is an Object node, false
  otherwise.
 Note that if true is returned, <code>isContainerNode</code>
  must also return true.
 */
- (jboolean)isObject;

/*!
 @brief Method that returns true if this node represents an embedded
  "foreign" (or perhaps native?)
 object (like POJO), not represented
  as regular content.Such nodes are used to pass information that
  either native format can not express as-is, metadata not included within
  at all, or something else that requires special handling.
 @since 3.0
 */
- (jboolean)isEmbeddedValue;

/*!
 @brief Method for accessing value of the specified field of
  an object node.If this node is not an object (or it
  does not have a value for specified field name), or
  if there is no field with such name, null is returned.
 <p>
  NOTE: handling of explicit null values may vary between
  implementations; some trees may retain explicit nulls, others
  not.
 @return Node that represent value of the specified field,
    if this node is an object and has value for the specified
    field. Null otherwise.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)getWithNSString:(NSString *)fieldName;

/*!
 @brief Method for accessing value of the specified element of
  an array node.For other nodes, null is returned.
 <p>
  For array nodes, index specifies
  exact location within array and allows for efficient iteration
  over child elements (underlying storage is guaranteed to
  be efficiently indexable, i.e. has random-access to elements).
  If index is less than 0, or equal-or-greater than 
 <code>node.size()</code>, null is returned; no exception is
  thrown for any index.
 @return Node that represent value of the specified element,
    if this node is an array and has specified element.
    Null otherwise.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)getWithInt:(jint)index;

/*!
 @brief Method for accessing value of the specified field of
  an object node.
 For other nodes, a "missing node" (virtual node
  for which <code>isMissingNode</code> returns true) is returned.
 @return Node that represent value of the specified field,
    if this node is an object and has value for the specified field;
    otherwise "missing node" is returned.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)pathWithNSString:(NSString *)fieldName;

/*!
 @brief Method for accessing value of the specified element of
  an array node.
 For other nodes, a "missing node" (virtual node
  for which <code>isMissingNode</code> returns true) is returned.
 <p>
  For array nodes, index specifies
  exact location within array and allows for efficient iteration
  over child elements (underlying storage is guaranteed to
  be efficiently indexable, i.e. has random-access to elements).
  If index is less than 0, or equal-or-greater than 
 <code>node.size()</code>, "missing node" is returned; no exception is
  thrown for any index.
 @return Node that represent value of the specified element,
    if this node is an array and has specified element;
    otherwise "missing node" is returned.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)pathWithInt:(jint)index;

/*!
 @brief Method for accessing names of all fields for this node, iff
  this node is an Object node.Number of field names accessible
  will be <code>size</code>.
 */
- (id<JavaUtilIterator>)fieldNames;

/*!
 @brief Method for locating node specified by given JSON pointer instances.
 Method will never return null; if no matching node exists, 
    will return a node for which <code>TreeNode.isMissingNode()</code> returns true.
 @return Node that matches given JSON Pointer: if no match exists,
    will return a node for which <code>TreeNode.isMissingNode()</code> returns true.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)atWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)ptr;

/*!
 @brief Convenience method that is functionally equivalent to:
 @code

    return at(JsonPointer.valueOf(jsonPointerExpression));
 
@endcode
 <p>
  Note that if the same expression is used often, it is preferable to construct 
 <code>JsonPointer</code> instance once and reuse it: this method will not perform
  any caching of compiled expressions.
 @param ptrExpr Expression to compile as a <code>JsonPointer</code>  instance
 @return Node that matches given JSON Pointer: if no match exists,
    will return a node for which <code>TreeNode.isMissingNode()</code> returns true.
 */
- (id<ComFasterxmlJacksonCoreTreeNode>)atWithNSString:(NSString *)ptrExpr;

/*!
 @brief Method for constructing a <code>JsonParser</code> instance for
  iterating over contents of the tree that this node is root of.
 Functionally equivalent to first serializing tree and then re-parsing but
  more efficient.
 <p>
  NOTE: constructed parser instance will NOT initially point to a token,
  so before passing it to deserializers, it is typically necessary to
  advance it to the first available token by calling <code>JsonParser.nextToken()</code>.
 */
- (ComFasterxmlJacksonCoreJsonParser *)traverseWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTreeNode)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTreeNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTreeNode")
