//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/TokenStreamContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamContext")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTokenStreamContext
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTokenStreamContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTokenStreamContext_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamContext || defined(INCLUDE_ComFasterxmlJacksonCoreTokenStreamContext))
#define ComFasterxmlJacksonCoreTokenStreamContext_

@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonPointer;

/*!
 @brief Shared base class for streaming processing contexts used during
  reading and writing of token streams using Streaming API.
 This context is also exposed to applications:
  context object can be used by applications to get an idea of
  relative position of the parser/generator within content
  being processed. This allows for some contextual processing: for
  example, output within Array context can differ from that of
  Object context. Perhaps more importantly context is hierarchic so
  that enclosing contexts can be inspected as well. All levels
  also include information about current property name (for Objects)
  and element index (for Arrays).
 <p>
  NOTE: In jackson 2.x this class was named <code>JsonStreamContext</code>
 */
@interface ComFasterxmlJacksonCoreTokenStreamContext : NSObject {
 @public
  jint _type_;
  /*!
   @brief Index of the currently processed entry.Starts with -1 to signal
  that no entries have been started, and gets advanced each
  time a new entry is started, either by encountering an expected
  separator, or with new values if no separators are expected
  (the case for root context).
   */
  jint _index_;
}

#pragma mark Public

/*!
 @brief Method for accessing name associated with the current location.
 Non-null for <code>FIELD_NAME</code> and value events that directly
  follow field names; null for root level and array values.
 */
- (NSString *)currentName;

/*!
 @return Index of the currently processed entry, if any
 */
- (jint)getCurrentIndex;

/*!
 @brief Method for accessing currently active value being used by data-binding
  (as the source of streaming data to write, or destination of data being
  read), at this level in hierarchy.
 <p>
  Note that "current value" is NOT populated (or used) by Streaming parser or generator;
  it is only used by higher-level data-binding functionality.
  The reason it is included here is that it can be stored and accessed hierarchically,
  and gets passed through data-binding.
 @return Currently active value, if one has been assigned.
 */
- (id)getCurrentValue;

/*!
 @return Number of entries that are complete and started.
 */
- (jint)getEntryCount;

/*!
 @brief Accessor for finding parent context of this context; will
  return null for root context.
 */
- (ComFasterxmlJacksonCoreTokenStreamContext *)getParent;

/*!
 @brief Optional method that may be used to access starting location of this context:
  for example, in case of JSON `Object` context, offset at which `[` token was
  read or written.Often used for error reporting purposes.
 Implementations that do not keep track of such location are expected to return 
 <code>JsonLocation.NA</code>; this is what the default implementation does.
 @return Location pointing to the point where the context
    start marker was found (or written); never `null`.
 <p>
  NOTE: demoted from <code>JsonReadContext</code> in 2.9, to allow use for
  "non-standard" read contexts.
 */
- (ComFasterxmlJacksonCoreJsonLocation *)getStartLocationWithId:(id)srcRef;

/*!
 @brief Method that may be called to verify whether this context has valid index:
  will return `false` before the first entry of Object context or before
  first element of Array context; otherwise returns `true`.
 */
- (jboolean)hasCurrentIndex;

- (jboolean)hasCurrentName;

/*!
 @brief Method that may be called to check if this context is either:
 <ul>
  <li>Object, with at least one entry written (partially or completely)
   </li>
  <li>Array, with at least one entry written (partially or completely)
   </li>
 </ul>
  and if so, return `true`; otherwise return `false`.Latter case includes
  Root context (always), and Object/Array contexts before any entries/elements
  have been read or written.
 <p>
  Method is mostly used to determine whether this context should be used for
  constructing <code>JsonPointer</code>
 */
- (jboolean)hasPathSegment;

/*!
 @brief Method that returns true if this context is an Array context;
  that is, content is being read from or written to a Json Array.
 */
- (jboolean)inArray;

/*!
 @brief Method that returns true if this context is an Object context;
  that is, content is being read from or written to a Json Object.
 */
- (jboolean)inObject;

/*!
 @brief Method that returns true if this context is a Root context;
  that is, content is being read from or written to without
  enclosing array or object structure.
 */
- (jboolean)inRoot;

/*!
 @brief Factory method for constructing a <code>JsonPointer</code> that points to the current
  location within the stream that this context is for, excluding information about
  "root context" (only relevant for multi-root-value cases)
 */
- (ComFasterxmlJacksonCoreJsonPointer *)pathAsPointer;

/*!
 @brief Factory method for constructing a <code>JsonPointer</code> that points to the current
  location within the stream that this context is for, optionally including
  "root value index"
 @param includeRoot Whether root-value offset is included as the first segment or not
 */
- (ComFasterxmlJacksonCoreJsonPointer *)pathAsPointerWithBoolean:(jboolean)includeRoot;

/*!
 @brief Method to call to pass value to be returned via <code>getCurrentValue</code>; typically
  called indirectly through <code>JsonParser.setCurrentValue</code>
  or <code>JsonGenerator.setCurrentValue</code>).
 */
- (void)setCurrentValueWithId:(id)v;

/*!
 @brief Overridden to provide developer readable "JsonPath" representation
  of the context.
 */
- (NSString *)description;

- (NSString *)typeDesc;

#pragma mark Protected

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)type
                              withInt:(jint)index;

/*!
 @brief Copy constructor used by sub-classes for creating copies for buffering.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreTokenStreamContext:(ComFasterxmlJacksonCoreTokenStreamContext *)base;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTokenStreamContext)

inline jint ComFasterxmlJacksonCoreTokenStreamContext_get_TYPE_ROOT(void);
#define ComFasterxmlJacksonCoreTokenStreamContext_TYPE_ROOT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreTokenStreamContext, TYPE_ROOT, jint)

inline jint ComFasterxmlJacksonCoreTokenStreamContext_get_TYPE_ARRAY(void);
#define ComFasterxmlJacksonCoreTokenStreamContext_TYPE_ARRAY 1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreTokenStreamContext, TYPE_ARRAY, jint)

inline jint ComFasterxmlJacksonCoreTokenStreamContext_get_TYPE_OBJECT(void);
#define ComFasterxmlJacksonCoreTokenStreamContext_TYPE_OBJECT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreTokenStreamContext, TYPE_OBJECT, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamContext_init(ComFasterxmlJacksonCoreTokenStreamContext *self);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamContext_initWithComFasterxmlJacksonCoreTokenStreamContext_(ComFasterxmlJacksonCoreTokenStreamContext *self, ComFasterxmlJacksonCoreTokenStreamContext *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTokenStreamContext_initWithInt_withInt_(ComFasterxmlJacksonCoreTokenStreamContext *self, jint type, jint index);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTokenStreamContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTokenStreamContext")
