//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/filter/TokenFilter.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreFilterTokenFilter)

ComFasterxmlJacksonCoreFilterTokenFilter *ComFasterxmlJacksonCoreFilterTokenFilter_INCLUDE_ALL;

@implementation ComFasterxmlJacksonCoreFilterTokenFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreFilterTokenFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartObject {
  return self;
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartArray {
  return self;
}

- (void)filterFinishObject {
}

- (void)filterFinishArray {
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)includePropertyWithNSString:(NSString *)name {
  return self;
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)includeElementWithInt:(jint)index {
  return self;
}

- (ComFasterxmlJacksonCoreFilterTokenFilter *)includeRootValueWithInt:(jint)index {
  return self;
}

- (jboolean)includeValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p {
  return [self _includeScalar];
}

- (jboolean)includeBooleanWithBoolean:(jboolean)value {
  return [self _includeScalar];
}

- (jboolean)includeNull {
  return [self _includeScalar];
}

- (jboolean)includeStringWithNSString:(NSString *)value {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithInt:(jint)v {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithLong:(jlong)v {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithFloat:(jfloat)v {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithDouble:(jdouble)v {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)v {
  return [self _includeScalar];
}

- (jboolean)includeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)v {
  return [self _includeScalar];
}

- (jboolean)includeBinary {
  return [self _includeScalar];
}

- (jboolean)includeRawValue {
  return [self _includeScalar];
}

- (jboolean)includeEmbeddedValueWithId:(id)ob {
  return [self _includeScalar];
}

- (NSString *)description {
  if (self == ComFasterxmlJacksonCoreFilterTokenFilter_INCLUDE_ALL) {
    return @"TokenFilter.INCLUDE_ALL";
  }
  return [super description];
}

- (jboolean)_includeScalar {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreFilterTokenFilter;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(filterStartObject);
  methods[2].selector = @selector(filterStartArray);
  methods[3].selector = @selector(filterFinishObject);
  methods[4].selector = @selector(filterFinishArray);
  methods[5].selector = @selector(includePropertyWithNSString:);
  methods[6].selector = @selector(includeElementWithInt:);
  methods[7].selector = @selector(includeRootValueWithInt:);
  methods[8].selector = @selector(includeValueWithComFasterxmlJacksonCoreJsonParser:);
  methods[9].selector = @selector(includeBooleanWithBoolean:);
  methods[10].selector = @selector(includeNull);
  methods[11].selector = @selector(includeStringWithNSString:);
  methods[12].selector = @selector(includeNumberWithInt:);
  methods[13].selector = @selector(includeNumberWithLong:);
  methods[14].selector = @selector(includeNumberWithFloat:);
  methods[15].selector = @selector(includeNumberWithDouble:);
  methods[16].selector = @selector(includeNumberWithJavaMathBigDecimal:);
  methods[17].selector = @selector(includeNumberWithJavaMathBigInteger:);
  methods[18].selector = @selector(includeBinary);
  methods[19].selector = @selector(includeRawValue);
  methods[20].selector = @selector(includeEmbeddedValueWithId:);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(_includeScalar);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INCLUDE_ALL", "LComFasterxmlJacksonCoreFilterTokenFilter;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "includeProperty", "LNSString;", "includeElement", "I", "includeRootValue", "includeValue", "LComFasterxmlJacksonCoreJsonParser;", "LJavaIoIOException;", "includeBoolean", "Z", "includeString", "includeNumber", "J", "F", "D", "LJavaMathBigDecimal;", "LJavaMathBigInteger;", "includeEmbeddedValue", "LNSObject;", "toString", &ComFasterxmlJacksonCoreFilterTokenFilter_INCLUDE_ALL };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreFilterTokenFilter = { "TokenFilter", "com.fasterxml.jackson.core.filter", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreFilterTokenFilter;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreFilterTokenFilter class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreFilterTokenFilter_INCLUDE_ALL, new_ComFasterxmlJacksonCoreFilterTokenFilter_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreFilterTokenFilter)
  }
}

@end

void ComFasterxmlJacksonCoreFilterTokenFilter_init(ComFasterxmlJacksonCoreFilterTokenFilter *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreFilterTokenFilter *new_ComFasterxmlJacksonCoreFilterTokenFilter_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreFilterTokenFilter, init)
}

ComFasterxmlJacksonCoreFilterTokenFilter *create_ComFasterxmlJacksonCoreFilterTokenFilter_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreFilterTokenFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreFilterTokenFilter)
