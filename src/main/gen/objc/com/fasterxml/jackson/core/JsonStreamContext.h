//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonStreamContext")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonStreamContext
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonStreamContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonStreamContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonStreamContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonStreamContext_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonStreamContext || defined(INCLUDE_ComFasterxmlJacksonCoreJsonStreamContext))
#define ComFasterxmlJacksonCoreJsonStreamContext_

@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonPointer;

/*!
 @brief Shared base class for streaming processing contexts used during
  reading and writing of Json content using Streaming API.
 This context is also exposed to applications:
  context object can be used by applications to get an idea of
  relative position of the parser/generator within json content
  being processed. This allows for some contextual processing: for
  example, output within Array context can differ from that of
  Object context.
 */
@interface ComFasterxmlJacksonCoreJsonStreamContext : NSObject {
 @public
  jint _type_;
  /*!
   @brief Index of the currently processed entry.Starts with -1 to signal
  that no entries have been started, and gets advanced each
  time a new entry is started, either by encountering an expected
  separator, or with new values if no separators are expected
  (the case for root context).
   */
  jint _index_;
}

#pragma mark Public

/*!
 @return Index of the currently processed entry, if any
 */
- (jint)getCurrentIndex;

/*!
 @brief Method for accessing name associated with the current location.
 Non-null for <code>FIELD_NAME</code> and value events that directly
  follow field names; null for root level and array values.
 */
- (NSString *)getCurrentName;

/*!
 @brief Method for accessing currently active value being used by data-binding
  (as the source of streaming data to write, or destination of data being
  read), at this level in hierarchy.
 <p>
  Note that "current value" is NOT populated (or used) by Streaming parser or generator;
  it is only used by higher-level data-binding functionality.
  The reason it is included here is that it can be stored and accessed hierarchically,
  and gets passed through data-binding.
 @return Currently active value, if one has been assigned.
 @since 2.5
 */
- (id)getCurrentValue;

/*!
 @return Number of entries that are complete and started.
 */
- (jint)getEntryCount;

/*!
 @brief Accessor for finding parent context of this context; will
  return null for root context.
 */
- (ComFasterxmlJacksonCoreJsonStreamContext *)getParent;

/*!
 @brief Optional method that may be used to access starting location of this context:
  for example, in case of JSON `Object` context, offset at which `[` token was
  read or written.Often used for error reporting purposes.
 Implementations that do not keep track of such location are expected to return 
 <code>JsonLocation.NA</code>; this is what the default implementation does.
 @return Location pointing to the point where the context
    start marker was found (or written); never `null`.
 <p>
  NOTE: demoted from <code>JsonReadContext</code> in 2.9, to allow use for
  "non-standard" read contexts.
 @since 2.9
 */
- (ComFasterxmlJacksonCoreJsonLocation *)getStartLocationWithId:(id)srcRef;

/*!
 @brief Method for accessing simple type description of current context;
  either ROOT (for root-level values), OBJECT (for field names and
  values of JSON Objects) or ARRAY (for values of JSON Arrays)
 */
- (NSString *)getTypeDesc;

/*!
 @brief Method that may be called to verify whether this context has valid index:
  will return `false` before the first entry of Object context or before
  first element of Array context; otherwise returns `true`.
 @since 2.9
 */
- (jboolean)hasCurrentIndex;

/*!
 @since 2.9
 */
- (jboolean)hasCurrentName;

/*!
 @brief Method that may be called to check if this context is either:
 <ul>
  <li>Object, with at least one entry written (partially or completely)
   </li>
  <li>Array, with at least one entry written (partially or completely)
   </li>
 </ul>
  and if so, return `true`; otherwise return `false`.Latter case includes
  Root context (always), and Object/Array contexts before any entries/elements
  have been read or written.
 <p>
  Method is mostly used to determine whether this context should be used for
  constructing <code>JsonPointer</code>
 @since 2.9
 */
- (jboolean)hasPathSegment;

/*!
 @brief Method that returns true if this context is an Array context;
  that is, content is being read from or written to a Json Array.
 */
- (jboolean)inArray;

/*!
 @brief Method that returns true if this context is an Object context;
  that is, content is being read from or written to a Json Object.
 */
- (jboolean)inObject;

/*!
 @brief Method that returns true if this context is a Root context;
  that is, content is being read from or written to without
  enclosing array or object structure.
 */
- (jboolean)inRoot;

/*!
 @brief Factory method for constructing a <code>JsonPointer</code> that points to the current
  location within the stream that this context is for, excluding information about
  "root context" (only relevant for multi-root-value cases)
 @since 2.9
 */
- (ComFasterxmlJacksonCoreJsonPointer *)pathAsPointer;

/*!
 @brief Factory method for constructing a <code>JsonPointer</code> that points to the current
  location within the stream that this context is for, optionally including
  "root value index"
 @param includeRoot Whether root-value offset is included as the first segment or not;
 @since 2.9
 */
- (ComFasterxmlJacksonCoreJsonPointer *)pathAsPointerWithBoolean:(jboolean)includeRoot;

/*!
 @brief Method to call to pass value to be returned via <code>getCurrentValue</code>; typically
  called indirectly through <code>JsonParser.setCurrentValue</code>
  or <code>JsonGenerator.setCurrentValue</code>).
 @since 2.5
 */
- (void)setCurrentValueWithId:(id)v;

/*!
 @brief Overridden to provide developer readable "JsonPath" representation
  of the context.
 @since 2.9
 */
- (NSString *)description;

/*!
 @since 2.8
 */
- (NSString *)typeDesc;

#pragma mark Protected

- (instancetype __nonnull)init;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithInt:(jint)type
                              withInt:(jint)index;

/*!
 @brief Copy constructor used by sub-classes for creating copies for
  buffering.
 @since 2.9
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonStreamContext:(ComFasterxmlJacksonCoreJsonStreamContext *)base;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreJsonStreamContext)

inline jint ComFasterxmlJacksonCoreJsonStreamContext_get_TYPE_ROOT(void);
#define ComFasterxmlJacksonCoreJsonStreamContext_TYPE_ROOT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonStreamContext, TYPE_ROOT, jint)

inline jint ComFasterxmlJacksonCoreJsonStreamContext_get_TYPE_ARRAY(void);
#define ComFasterxmlJacksonCoreJsonStreamContext_TYPE_ARRAY 1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonStreamContext, TYPE_ARRAY, jint)

inline jint ComFasterxmlJacksonCoreJsonStreamContext_get_TYPE_OBJECT(void);
#define ComFasterxmlJacksonCoreJsonStreamContext_TYPE_OBJECT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonStreamContext, TYPE_OBJECT, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonStreamContext_init(ComFasterxmlJacksonCoreJsonStreamContext *self);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonStreamContext_initWithComFasterxmlJacksonCoreJsonStreamContext_(ComFasterxmlJacksonCoreJsonStreamContext *self, ComFasterxmlJacksonCoreJsonStreamContext *base);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonStreamContext_initWithInt_withInt_(ComFasterxmlJacksonCoreJsonStreamContext *self, jint type, jint index);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonStreamContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonStreamContext")
