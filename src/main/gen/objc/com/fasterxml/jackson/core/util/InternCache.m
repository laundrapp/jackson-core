//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/InternCache.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/util/InternCache.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComFasterxmlJacksonCoreUtilInternCache () {
 @public
  /*!
   @brief As minor optimization let's try to avoid "flush storms",
  cases where multiple threads might try to concurrently
  flush the map.
   */
  id lock_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilInternCache, lock_, id)

inline jlong ComFasterxmlJacksonCoreUtilInternCache_get_serialVersionUID(void);
#define ComFasterxmlJacksonCoreUtilInternCache_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreUtilInternCache, serialVersionUID, jlong)

/*!
 @brief Size to use is somewhat arbitrary, so let's choose something that's
  neither too small (low hit ratio) nor too large (waste of memory).
 <p>
  One consideration is possible attack via colliding <code>String.hashCode</code>;
  because of this, limit to reasonably low setting.
 */
inline jint ComFasterxmlJacksonCoreUtilInternCache_get_MAX_ENTRIES(void);
#define ComFasterxmlJacksonCoreUtilInternCache_MAX_ENTRIES 180
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreUtilInternCache, MAX_ENTRIES, jint)

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilInternCache_init(ComFasterxmlJacksonCoreUtilInternCache *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreUtilInternCache *new_ComFasterxmlJacksonCoreUtilInternCache_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreUtilInternCache *create_ComFasterxmlJacksonCoreUtilInternCache_init(void);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreUtilInternCache)

ComFasterxmlJacksonCoreUtilInternCache *ComFasterxmlJacksonCoreUtilInternCache_instance;

@implementation ComFasterxmlJacksonCoreUtilInternCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreUtilInternCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)internWithNSString:(NSString *)input {
  NSString *result = [self getWithId:input];
  if (result != nil) {
    return result;
  }
  if ([self size] >= ComFasterxmlJacksonCoreUtilInternCache_MAX_ENTRIES) {
    @synchronized(lock_) {
      if ([self size] >= ComFasterxmlJacksonCoreUtilInternCache_MAX_ENTRIES) {
        [self clear];
      }
    }
  }
  result = [((NSString *) nil_chk(input)) java_intern];
  [self putWithId:result withId:result];
  return result;
}

- (void)dealloc {
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(internWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonCoreUtilInternCache_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MAX_ENTRIES", "I", .constantValue.asInt = ComFasterxmlJacksonCoreUtilInternCache_MAX_ENTRIES, 0x1a, -1, -1, -1, -1 },
    { "instance", "LComFasterxmlJacksonCoreUtilInternCache;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "intern", "LNSString;", &ComFasterxmlJacksonCoreUtilInternCache_instance, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilInternCache = { "InternCache", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, 3, -1 };
  return &_ComFasterxmlJacksonCoreUtilInternCache;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreUtilInternCache class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreUtilInternCache_instance, new_ComFasterxmlJacksonCoreUtilInternCache_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreUtilInternCache)
  }
}

@end

void ComFasterxmlJacksonCoreUtilInternCache_init(ComFasterxmlJacksonCoreUtilInternCache *self) {
  JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(self, ComFasterxmlJacksonCoreUtilInternCache_MAX_ENTRIES, 0.8f, 4);
  JreStrongAssignAndConsume(&self->lock_, new_NSObject_init());
}

ComFasterxmlJacksonCoreUtilInternCache *new_ComFasterxmlJacksonCoreUtilInternCache_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilInternCache, init)
}

ComFasterxmlJacksonCoreUtilInternCache *create_ComFasterxmlJacksonCoreUtilInternCache_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilInternCache, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilInternCache)
