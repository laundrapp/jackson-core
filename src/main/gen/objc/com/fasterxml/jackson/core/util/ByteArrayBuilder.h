//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilByteArrayBuilder")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilByteArrayBuilder
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilByteArrayBuilder 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilByteArrayBuilder 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilByteArrayBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilByteArrayBuilder_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilByteArrayBuilder || defined(INCLUDE_ComFasterxmlJacksonCoreUtilByteArrayBuilder))
#define ComFasterxmlJacksonCoreUtilByteArrayBuilder_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class IOSByteArray;

/*!
 @brief Helper class that is similar to <code>java.io.ByteArrayOutputStream</code>
  in usage, but more geared to Jackson use cases internally.
 Specific changes include segment storage (no need to have linear
  backing buffer, can avoid reallocations, copying), as well API
  not based on <code>java.io.OutputStream</code>. In short, a very much
  specialized builder object.
 <p>
  Also implements <code>OutputStream</code> to allow
  efficient aggregation of output content as a byte array, similar
  to how <code>java.io.ByteArrayOutputStream</code> works, but somewhat more
  efficiently for many use cases.
 <p>
  NOTE: maximum size limited to Java Array maximum, 2 gigabytes: this
  because usage pattern is to collect content for a `byte[]` and so although
  theoretically this builder can aggregate more content it will not be usable
  as things are. Behavior may be improved if we solve the access problem.
 */
@interface ComFasterxmlJacksonCoreUtilByteArrayBuilder : JavaIoOutputStream

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br
                                                                    withInt:(jint)firstBlockSize;

- (instancetype __nonnull)initWithInt:(jint)firstBlockSize;

- (void)appendWithInt:(jint)i;

/*!
 @since 2.9
 */
- (void)appendFourBytesWithInt:(jint)b32;

- (void)appendThreeBytesWithInt:(jint)b24;

- (void)appendTwoBytesWithInt:(jint)b16;

- (void)close;

/*!
 @brief Method that will complete "manual" output process, coalesce
  content (if necessary) and return results as a contiguous buffer.
 @param lastBlockLength Amount of content in the current segment  buffer.
 @return Coalesced contents
 */
- (IOSByteArray *)completeAndCoalesceWithInt:(jint)lastBlockLength;

/*!
 @brief Method called when the current segment buffer is full; will
  append to current contents, allocate a new segment buffer
  and return it
 */
- (IOSByteArray *)finishCurrentSegment;

- (void)flush;

- (IOSByteArray *)getCurrentSegment;

- (jint)getCurrentSegmentLength;

/*!
 @brief Clean up method to call to release all buffers this object may be
  using.After calling the method, no other accessors can be used (and
  attempt to do so may result in an exception)
 */
- (void)release__;

- (void)reset;

/*!
 @brief Method called when starting "manual" output: will clear out
  current state and return the first segment buffer to fill
 */
- (IOSByteArray *)resetAndGetFirstSegment;

- (void)setCurrentSegmentLengthWithInt:(jint)len;

/*!
 @since 2.9
 */
- (jint)size;

/*!
 @brief Method called when results are finalized and we can get the
  full aggregated result buffer to return to the caller
 */
- (IOSByteArray *)toByteArray;

- (void)writeWithByteArray:(IOSByteArray *)b;

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreUtilByteArrayBuilder)

inline IOSByteArray *ComFasterxmlJacksonCoreUtilByteArrayBuilder_get_NO_BYTES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *ComFasterxmlJacksonCoreUtilByteArrayBuilder_NO_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilByteArrayBuilder, NO_BYTES, IOSByteArray *)

inline jint ComFasterxmlJacksonCoreUtilByteArrayBuilder_get_DEFAULT_BLOCK_ARRAY_SIZE(void);
#define ComFasterxmlJacksonCoreUtilByteArrayBuilder_DEFAULT_BLOCK_ARRAY_SIZE 40
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreUtilByteArrayBuilder, DEFAULT_BLOCK_ARRAY_SIZE, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilByteArrayBuilder_init(ComFasterxmlJacksonCoreUtilByteArrayBuilder *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *new_ComFasterxmlJacksonCoreUtilByteArrayBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *create_ComFasterxmlJacksonCoreUtilByteArrayBuilder_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilByteArrayBuilder *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *new_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *br) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *create_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *br);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithInt_(ComFasterxmlJacksonCoreUtilByteArrayBuilder *self, jint firstBlockSize);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *new_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithInt_(jint firstBlockSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *create_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithInt_(jint firstBlockSize);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withInt_(ComFasterxmlJacksonCoreUtilByteArrayBuilder *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br, jint firstBlockSize);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *new_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withInt_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, jint firstBlockSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilByteArrayBuilder *create_ComFasterxmlJacksonCoreUtilByteArrayBuilder_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withInt_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, jint firstBlockSize);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilByteArrayBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilByteArrayBuilder")
