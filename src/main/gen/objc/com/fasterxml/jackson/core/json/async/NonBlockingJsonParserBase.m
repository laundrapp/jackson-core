//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/JsonTokenId.h"
#include "com/fasterxml/jackson/core/ObjectReadContext.h"
#include "com/fasterxml/jackson/core/base/ParserBase.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/json/JsonReadContext.h"
#include "com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.h"
#include "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/io/OutputStream.h"
#include "java/io/Writer.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase *self, ComFasterxmlJacksonCoreJsonToken *t);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase *self, IOSIntArray *quads, jint qlen, jint lastQuadBytes);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase)

IOSObjectArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKENS;
IOSDoubleArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_VALUES;

@implementation ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)parserFeatures
                      withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym {
  ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(self, readCtxt, ctxt, parserFeatures, sym);
  return self;
}

- (jboolean)canParseAsync {
  return true;
}

- (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)symbolTableForTests {
  return _symbols_;
}

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)_releaseBuffers {
  [super _releaseBuffers];
  [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) release__];
}

- (id)getInputSource {
  return nil;
}

- (void)_closeInput {
  _currBufferStart_ = 0;
  _inputEnd_ = 0;
}

- (jboolean)hasTextCharacters {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) hasTextAsCharacters];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return _nameCopied_;
  }
  return false;
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  jint col = _inputPtr_ - _currInputRowStart_ + 1;
  jint row = JavaLangMath_maxWithInt_withInt_(_currInputRow_, _currInputRowAlt_);
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], _currInputProcessed_ + (_inputPtr_ - _currBufferStart_), -1LL, row, col);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation {
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], _tokenInputTotal_, -1LL, _tokenInputRow_, _tokenInputCol_);
}

- (NSString *)getText {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__getText2WithComFasterxmlJacksonCoreJsonToken_(self, _currToken_);
}

- (NSString *)_getText2WithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__getText2WithComFasterxmlJacksonCoreJsonToken_(self, t);
}

- (jint)getTextWithJavaIoWriter:(JavaIoWriter *)writer {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
  }
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    NSString *n = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:n];
    return [((NSString *) nil_chk(n)) java_length];
  }
  if (t != nil) {
    if ([t isNumeric]) {
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)) {
      [self _reportErrorWithNSString:@"Current token not available: can not call this method"];
    }
    IOSCharArray *ch = [t asCharArray];
    [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:ch];
    return ((IOSCharArray *) nil_chk(ch))->size_;
  }
  return 0;
}

- (NSString *)getValueAsString {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:nil];
}

- (NSString *)getValueAsStringWithNSString:(NSString *)defValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:defValue];
}

- (IOSCharArray *)getTextCharacters {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      if (!_nameCopied_) {
        NSString *name = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
        jint nameLen = [((NSString *) nil_chk(name)) java_length];
        if (_nameCopyBuffer_ == nil) {
          JreStrongAssign(&_nameCopyBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocNameCopyBufferWithInt:nameLen]);
        }
        else if (_nameCopyBuffer_->size_ < nameLen) {
          JreStrongAssignAndConsume(&_nameCopyBuffer_, [IOSCharArray newArrayWithLength:nameLen]);
        }
        [name java_getChars:0 sourceEnd:nameLen destination:_nameCopyBuffer_ destinationBegin:0];
        _nameCopied_ = true;
      }
      return _nameCopyBuffer_;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextBuffer];
      default:
      return [((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray];
    }
  }
  return nil;
}

- (jint)getTextLength {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      return [((NSString *) nil_chk([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName])) java_length];
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) size];
      default:
      return ((IOSCharArray *) nil_chk([((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray]))->size_;
    }
  }
  return 0;
}

- (jint)getTextOffset {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      return 0;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextOffset];
      default:
      ;
    }
  }
  return 0;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  if (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    [self _reportErrorWithNSString:@"Current token (%s) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary" withId:_currToken_];
  }
  if (_binaryValue_ == nil) {
    ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
    [self _decodeBase64WithNSString:[self getText] withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder withComFasterxmlJacksonCoreBase64Variant:b64variant];
    JreStrongAssign(&_binaryValue_, [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray]);
  }
  return _binaryValue_;
}

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  IOSByteArray *b = [self getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:b64variant];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b];
  return ((IOSByteArray *) nil_chk(b))->size_;
}

- (id)getEmbeddedObject {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_EMBEDDED_OBJECT)) {
    return _binaryValue_;
  }
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_startArrayScope {
  JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:-1 withInt:-1]);
  _majorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_FIRST;
  _majorStateAfterValue_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_NEXT;
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)));
}

- (ComFasterxmlJacksonCoreJsonToken *)_startObjectScope {
  JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:-1 withInt:-1]);
  _majorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_FIRST;
  _majorStateAfterValue_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_NEXT;
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)));
}

- (ComFasterxmlJacksonCoreJsonToken *)_closeArrayScope {
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inArray]) {
    [self _reportMismatchedEndMarkerWithInt:']' withChar:'}'];
  }
  ComFasterxmlJacksonCoreJsonJsonReadContext *ctxt = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getParent];
  JreStrongAssign(&_parsingContext_, ctxt);
  jint st;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(ctxt)) inObject]) {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_NEXT;
  }
  else if ([ctxt inArray]) {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_NEXT;
  }
  else {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ROOT;
  }
  _majorState_ = st;
  _majorStateAfterValue_ = st;
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY)));
}

- (ComFasterxmlJacksonCoreJsonToken *)_closeObjectScope {
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inObject]) {
    [self _reportMismatchedEndMarkerWithInt:'}' withChar:']'];
  }
  ComFasterxmlJacksonCoreJsonJsonReadContext *ctxt = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getParent];
  JreStrongAssign(&_parsingContext_, ctxt);
  jint st;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(ctxt)) inObject]) {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_NEXT;
  }
  else if ([ctxt inArray]) {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_NEXT;
  }
  else {
    st = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ROOT;
  }
  _majorState_ = st;
  _majorStateAfterValue_ = st;
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT)));
}

- (NSString *)_findNameWithInt:(jint)q1
                       withInt:(jint)lastQuadBytes {
  q1 = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(q1, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) findNameWithInt:q1];
  if (name != nil) {
    return name;
  }
  *IOSIntArray_GetRef(nil_chk(_quadBuffer_), 0) = q1;
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(self, _quadBuffer_, 1, lastQuadBytes);
}

- (NSString *)_findNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)lastQuadBytes {
  q2 = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(q2, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) findNameWithInt:q1 withInt:q2];
  if (name != nil) {
    return name;
  }
  *IOSIntArray_GetRef(nil_chk(_quadBuffer_), 0) = q1;
  *IOSIntArray_GetRef(_quadBuffer_, 1) = q2;
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(self, _quadBuffer_, 2, lastQuadBytes);
}

- (NSString *)_findNameWithInt:(jint)q1
                       withInt:(jint)q2
                       withInt:(jint)q3
                       withInt:(jint)lastQuadBytes {
  q3 = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(q3, lastQuadBytes);
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(_symbols_)) findNameWithInt:q1 withInt:q2 withInt:q3];
  if (name != nil) {
    return name;
  }
  IOSIntArray *quads = _quadBuffer_;
  *IOSIntArray_GetRef(nil_chk(quads), 0) = q1;
  *IOSIntArray_GetRef(quads, 1) = q2;
  *IOSIntArray_GetRef(quads, 2) = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(q3, lastQuadBytes);
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(self, quads, 3, lastQuadBytes);
}

- (NSString *)_addNameWithIntArray:(IOSIntArray *)quads
                           withInt:(jint)qlen
                           withInt:(jint)lastQuadBytes {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(self, quads, qlen, lastQuadBytes);
}

+ (jint)_padLastQuadWithInt:(jint)q
                    withInt:(jint)bytes {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(q, bytes);
}

- (ComFasterxmlJacksonCoreJsonToken *)_eofAsNextToken {
  _majorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_CLOSED;
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inRoot]) {
    [self _handleEOF];
  }
  [self close];
  return (JreStrongAssign(&_currToken_, nil));
}

- (ComFasterxmlJacksonCoreJsonToken *)_fieldCompleteWithNSString:(NSString *)name {
  _majorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_VALUE;
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:name];
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)));
}

- (ComFasterxmlJacksonCoreJsonToken *)_valueCompleteWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t {
  _majorState_ = _majorStateAfterValue_;
  JreStrongAssign(&_currToken_, t);
  return t;
}

- (ComFasterxmlJacksonCoreJsonToken *)_valueCompleteIntWithInt:(jint)value
                                                  withNSString:(NSString *)asText {
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithStringWithNSString:asText];
  _intLength_ = [((NSString *) nil_chk(asText)) java_length];
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
  _numberInt_ = value;
  _majorState_ = _majorStateAfterValue_;
  ComFasterxmlJacksonCoreJsonToken *t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT);
  JreStrongAssign(&_currToken_, t);
  return t;
}

- (ComFasterxmlJacksonCoreJsonToken *)_valueNonStdNumberCompleteWithInt:(jint)type {
  NSString *tokenStr = IOSObjectArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKENS), type);
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithStringWithNSString:tokenStr];
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
    [self _reportErrorWithNSString:@"Non-standard token '%s': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow" withId:tokenStr];
  }
  _intLength_ = 0;
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE;
  _numberDouble_ = IOSDoubleArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_VALUES), type);
  _majorState_ = _majorStateAfterValue_;
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)));
}

- (NSString *)_nonStdTokenWithInt:(jint)type {
  return IOSObjectArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKENS), type);
}

- (void)_updateTokenLocation {
  _tokenInputRow_ = JavaLangMath_maxWithInt_withInt_(_currInputRow_, _currInputRowAlt_);
  jint ptr = _inputPtr_;
  _tokenInputCol_ = ptr - _currInputRowStart_;
  _tokenInputTotal_ = _currInputProcessed_ + (ptr - _currBufferStart_);
}

- (void)_reportInvalidCharWithInt:(jint)c {
  if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    [self _throwInvalidSpaceWithInt:c];
  }
  [self _reportInvalidInitialWithInt:c];
}

- (void)_reportInvalidInitialWithInt:(jint)mask {
  [self _reportErrorWithNSString:JreStrcat("$$", @"Invalid UTF-8 start byte 0x", JavaLangInteger_toHexStringWithInt_(mask))];
}

- (void)_reportInvalidOtherWithInt:(jint)mask
                           withInt:(jint)ptr {
  _inputPtr_ = ptr;
  [self _reportInvalidOtherWithInt:mask];
}

- (void)_reportInvalidOtherWithInt:(jint)mask {
  [self _reportErrorWithNSString:JreStrcat("$$", @"Invalid UTF-8 middle byte 0x", JavaLangInteger_toHexStringWithInt_(mask))];
}

- (void)dealloc {
  RELEASE_(_symbols_);
  RELEASE_(_quadBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 14, 15, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 14, 17, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 14, 18, 16, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 19, 20, 16, -1, -1, -1 },
    { NULL, "I", 0x1c, 21, 15, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 22, 9, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 23, 5, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 24, 25, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 26, 27, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 27, 16, -1, -1, -1 },
    { NULL, "V", 0x4, 30, 27, 16, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 15, 16, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 27, 16, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:withComFasterxmlJacksonCoreIoIOContext:withInt:withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:);
  methods[1].selector = @selector(canParseAsync);
  methods[2].selector = @selector(symbolTableForTests);
  methods[3].selector = @selector(releaseBufferedWithJavaIoOutputStream:);
  methods[4].selector = @selector(_releaseBuffers);
  methods[5].selector = @selector(getInputSource);
  methods[6].selector = @selector(_closeInput);
  methods[7].selector = @selector(hasTextCharacters);
  methods[8].selector = @selector(getCurrentLocation);
  methods[9].selector = @selector(getTokenLocation);
  methods[10].selector = @selector(getText);
  methods[11].selector = @selector(_getText2WithComFasterxmlJacksonCoreJsonToken:);
  methods[12].selector = @selector(getTextWithJavaIoWriter:);
  methods[13].selector = @selector(getValueAsString);
  methods[14].selector = @selector(getValueAsStringWithNSString:);
  methods[15].selector = @selector(getTextCharacters);
  methods[16].selector = @selector(getTextLength);
  methods[17].selector = @selector(getTextOffset);
  methods[18].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[19].selector = @selector(readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:);
  methods[20].selector = @selector(getEmbeddedObject);
  methods[21].selector = @selector(_startArrayScope);
  methods[22].selector = @selector(_startObjectScope);
  methods[23].selector = @selector(_closeArrayScope);
  methods[24].selector = @selector(_closeObjectScope);
  methods[25].selector = @selector(_findNameWithInt:withInt:);
  methods[26].selector = @selector(_findNameWithInt:withInt:withInt:);
  methods[27].selector = @selector(_findNameWithInt:withInt:withInt:withInt:);
  methods[28].selector = @selector(_addNameWithIntArray:withInt:withInt:);
  methods[29].selector = @selector(_padLastQuadWithInt:withInt:);
  methods[30].selector = @selector(_eofAsNextToken);
  methods[31].selector = @selector(_fieldCompleteWithNSString:);
  methods[32].selector = @selector(_valueCompleteWithComFasterxmlJacksonCoreJsonToken:);
  methods[33].selector = @selector(_valueCompleteIntWithInt:withNSString:);
  methods[34].selector = @selector(_valueNonStdNumberCompleteWithInt:);
  methods[35].selector = @selector(_nonStdTokenWithInt:);
  methods[36].selector = @selector(_updateTokenLocation);
  methods[37].selector = @selector(_reportInvalidCharWithInt:);
  methods[38].selector = @selector(_reportInvalidInitialWithInt:);
  methods[39].selector = @selector(_reportInvalidOtherWithInt:withInt:);
  methods[40].selector = @selector(_reportInvalidOtherWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAJOR_INITIAL", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_INITIAL, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_ROOT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ROOT, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_OBJECT_FIELD_FIRST", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_FIRST, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_OBJECT_FIELD_NEXT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_NEXT, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_OBJECT_VALUE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_VALUE, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_ARRAY_ELEMENT_FIRST", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_FIRST, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_ARRAY_ELEMENT_NEXT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_NEXT, 0x1c, -1, -1, -1, -1 },
    { "MAJOR_CLOSED", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_CLOSED, 0x1c, -1, -1, -1, -1 },
    { "MINOR_ROOT_BOM", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_BOM, 0x1c, -1, -1, -1, -1 },
    { "MINOR_ROOT_NEED_SEPARATOR", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_NEED_SEPARATOR, 0x1c, -1, -1, -1, -1 },
    { "MINOR_ROOT_GOT_SEPARATOR", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_GOT_SEPARATOR, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_LEADING_WS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_LEADING_COMMA", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_NAME", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_NAME_ESCAPE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME_ESCAPE, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_APOS_NAME", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_APOS_NAME, 0x1c, -1, -1, -1, -1 },
    { "MINOR_FIELD_UNQUOTED_NAME", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_UNQUOTED_NAME, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_LEADING_WS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_EXPECTING_COMMA", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_EXPECTING_COLON", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_WS_AFTER_COMMA", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_TOKEN_NULL", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NULL, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_TOKEN_TRUE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_TRUE, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_TOKEN_FALSE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_FALSE, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_TOKEN_NON_STD", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NON_STD, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_MINUS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_ZERO", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_ZERO, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_MINUSZERO", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUSZERO, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_INTEGER_DIGITS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_FRACTION_DIGITS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_FRACTION_DIGITS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_EXPONENT_MARKER", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_MARKER, 0x1c, -1, -1, -1, -1 },
    { "MINOR_NUMBER_EXPONENT_DIGITS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_STRING", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_STRING_ESCAPE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_ESCAPE, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_STRING_UTF8_2", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_2, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_STRING_UTF8_3", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_3, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_STRING_UTF8_4", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_4, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_APOS_STRING", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING, 0x1c, -1, -1, -1, -1 },
    { "MINOR_VALUE_TOKEN_ERROR", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_ERROR, 0x1c, -1, -1, -1, -1 },
    { "MINOR_COMMENT_LEADING_SLASH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_LEADING_SLASH, 0x1c, -1, -1, -1, -1 },
    { "MINOR_COMMENT_CLOSING_ASTERISK", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CLOSING_ASTERISK, 0x1c, -1, -1, -1, -1 },
    { "MINOR_COMMENT_C", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_C, 0x1c, -1, -1, -1, -1 },
    { "MINOR_COMMENT_CPP", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CPP, 0x1c, -1, -1, -1, -1 },
    { "MINOR_COMMENT_YAML", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_YAML, 0x1c, -1, -1, -1, -1 },
    { "_symbols_", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_quadBuffer_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_quadLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_quad1_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_pending32_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_pendingBytes_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_quoted32_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_quotedDigits_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_majorState_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_majorStateAfterValue_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_minorState_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_minorStateAfterSplit_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_endOfInput_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "NON_STD_TOKEN_NAN", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_NAN, 0x1c, -1, -1, -1, -1 },
    { "NON_STD_TOKEN_INFINITY", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_INFINITY, 0x1c, -1, -1, -1, -1 },
    { "NON_STD_TOKEN_PLUS_INFINITY", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_PLUS_INFINITY, 0x1c, -1, -1, -1, -1 },
    { "NON_STD_TOKEN_MINUS_INFINITY", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_MINUS_INFINITY, 0x1c, -1, -1, -1, -1 },
    { "NON_STD_TOKENS", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 32, -1, -1 },
    { "NON_STD_TOKEN_VALUES", "[D", .constantValue.asLong = 0, 0x1c, -1, 33, -1, -1 },
    { "_nonStdTokenType_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currBufferStart_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currInputRowAlt_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreObjectReadContext;LComFasterxmlJacksonCoreIoIOContext;ILComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", "releaseBuffered", "LJavaIoOutputStream;", "LJavaIoIOException;", "_getText2", "LComFasterxmlJacksonCoreJsonToken;", "getText", "LJavaIoWriter;", "getValueAsString", "LNSString;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "readBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;", "_findName", "II", "LComFasterxmlJacksonCoreJsonParseException;", "III", "IIII", "_addName", "[III", "_padLastQuad", "_fieldComplete", "_valueComplete", "_valueCompleteInt", "ILNSString;", "_valueNonStdNumberComplete", "I", "_nonStdToken", "_reportInvalidChar", "_reportInvalidInitial", "_reportInvalidOther", &ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKENS, &ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_VALUES };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase = { "NonBlockingJsonParserBase", "com.fasterxml.jackson.core.json.async", ptrTable, methods, fields, 7, 0x401, 41, 66, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKENS, [IOSObjectArray newArrayWithObjects:(id[]){ @"NaN", @"Infinity", @"+Infinity", @"-Infinity" } count:4 type:NSString_class_()]);
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_VALUES, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY } count:4]);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase)
  }
}

@end

void ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym) {
  ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_(self, readCtxt, ctxt, parserFeatures);
  JreStrongAssignAndConsume(&self->_quadBuffer_, [IOSIntArray newArrayWithLength:8]);
  self->_endOfInput_ = false;
  self->_currBufferStart_ = 0;
  self->_currInputRowAlt_ = 1;
  JreStrongAssign(&self->_symbols_, sym);
  JreStrongAssign(&self->_currToken_, nil);
  self->_majorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_INITIAL;
  self->_majorStateAfterValue_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ROOT;
}

NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase *self, ComFasterxmlJacksonCoreJsonToken *t) {
  if (t == nil) {
    return nil;
  }
  switch ([t id__]) {
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NOT_AVAILABLE:
    return nil;
    case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
    return [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) currentName];
    case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsString];
    default:
    return [t asString];
  }
}

NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__addNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase *self, IOSIntArray *quads, jint qlen, jint lastQuadBytes) {
  jint byteLen = (JreLShift32(qlen, 2)) - 4 + lastQuadBytes;
  jint lastQuad;
  if (lastQuadBytes < 4) {
    lastQuad = IOSIntArray_Get(nil_chk(quads), qlen - 1);
    *IOSIntArray_GetRef(quads, qlen - 1) = (JreLShift32(lastQuad, (JreLShift32((4 - lastQuadBytes), 3))));
  }
  else {
    lastQuad = 0;
  }
  IOSCharArray *cbuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) emptyAndGetCurrentSegment];
  jint cix = 0;
  for (jint ix = 0; ix < byteLen; ) {
    jint ch = IOSIntArray_Get(nil_chk(quads), JreRShift32(ix, 2));
    jint byteIx = (ix & 3);
    ch = (JreRShift32(ch, (JreLShift32((3 - byteIx), 3)))) & (jint) 0xFF;
    ++ix;
    if (ch > 127) {
      jint needed;
      if ((ch & (jint) 0xE0) == (jint) 0xC0) {
        ch &= (jint) 0x1F;
        needed = 1;
      }
      else if ((ch & (jint) 0xF0) == (jint) 0xE0) {
        ch &= (jint) 0x0F;
        needed = 2;
      }
      else if ((ch & (jint) 0xF8) == (jint) 0xF0) {
        ch &= (jint) 0x07;
        needed = 3;
      }
      else {
        [self _reportInvalidInitialWithInt:ch];
        needed = ch = 1;
      }
      if ((ix + needed) > byteLen) {
        [self _reportInvalidEOFWithNSString:@" in field name" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)];
      }
      jint ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
      byteIx = (ix & 3);
      ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
      ++ix;
      if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
        [self _reportInvalidOtherWithInt:ch2];
      }
      ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
      if (needed > 1) {
        ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
        byteIx = (ix & 3);
        ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
        ++ix;
        if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
          [self _reportInvalidOtherWithInt:ch2];
        }
        ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
        if (needed > 2) {
          ch2 = IOSIntArray_Get(quads, JreRShift32(ix, 2));
          byteIx = (ix & 3);
          ch2 = (JreRShift32(ch2, (JreLShift32((3 - byteIx), 3))));
          ++ix;
          if ((ch2 & (jint) 0xC0) != (jint) 0x080) {
            [self _reportInvalidOtherWithInt:ch2 & (jint) 0xFF];
          }
          ch = (JreLShift32(ch, 6)) | (ch2 & (jint) 0x3F);
        }
      }
      if (needed > 2) {
        ch -= (jint) 0x10000;
        if (cix >= ((IOSCharArray *) nil_chk(cbuf))->size_) {
          cbuf = [self->_textBuffer_ expandCurrentSegment];
        }
        *IOSCharArray_GetRef(nil_chk(cbuf), cix++) = (jchar) ((jint) 0xD800 + (JreRShift32(ch, 10)));
        ch = (jint) 0xDC00 | (ch & (jint) 0x03FF);
      }
    }
    if (cix >= ((IOSCharArray *) nil_chk(cbuf))->size_) {
      cbuf = [self->_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(cbuf), cix++) = (jchar) ch;
  }
  NSString *baseName = [NSString java_stringWithCharacters:cbuf offset:0 length:cix];
  if (lastQuadBytes < 4) {
    *IOSIntArray_GetRef(nil_chk(quads), qlen - 1) = lastQuad;
  }
  return [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) addNameWithNSString:baseName withIntArray:quads withInt:qlen];
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(jint q, jint bytes) {
  ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_initialize();
  return (bytes == 4) ? q : (q | (JreLShift32(-1, (JreLShift32(bytes, 3)))));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase)
