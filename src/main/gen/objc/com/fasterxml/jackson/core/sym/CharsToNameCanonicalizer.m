//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonFactory.h"
#include "com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/InternCache.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@class ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;

@interface ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer () {
 @public
  /*!
   @brief Sharing of learnt symbols is done by optional linking of symbol
  table instances with their parents.When parent linkage is
  defined, and child instance is released (call to <code>release</code>),
  parent's shared tables may be updated from the child instance.
   */
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *_parent_;
  /*!
   @brief Member that is only used by the root table instance: root
  passes immutable state info child instances, and children
  may return new state if they add entries to the table.
   Child tables do NOT use the reference.
   */
  JavaUtilConcurrentAtomicAtomicReference *_tableInfo_;
  /*!
   @brief Seed value we use as the base to make hash codes non-static between
  different runs, but still stable for lifetime of a single symbol table
  instance.
   This is done for security reasons, to avoid potential DoS attack via
  hash collisions.
   @since 2.1
   */
  jint _seed_;
  jint _flags_;
  /*!
   @brief Whether any canonicalization should be attempted (whether using
  intern or not.
   <p>
  NOTE: non-final since we may need to disable this with overflow.
   */
  jboolean _canonicalize_;
  /*!
   @brief Primary matching symbols; it's expected most match occur from
  here.
   */
  IOSObjectArray *_symbols_;
  /*!
   @brief Overflow buckets; if primary doesn't match, lookup is done
  from here.
   <p>
  Note: Number of buckets is half of number of symbol entries, on
  assumption there's less need for buckets.
   */
  IOSObjectArray *_buckets_;
  /*!
   @brief Current size (number of entries); needed to know if and when
  rehash.
   */
  jint _size_;
  /*!
   @brief Limit that indicates maximum size this instance can hold before
  it needs to be expanded and rehashed.Calculated using fill
  factor passed in to constructor.
   */
  jint _sizeThreshold_;
  /*!
   @brief Mask used to get index from hash values; equal to 
 <code>_buckets.length - 1</code>, when _buckets.length is
  a power of two.
   */
  jint _indexMask_;
  /*!
   @brief We need to keep track of the longest collision list; this is needed
  both to indicate problems with attacks and to allow flushing for
  other cases.
   @since 2.1
   */
  jint _longestCollisionList_;
  /*!
   @brief Flag that indicates whether underlying data structures for
  the main hash area are shared or not.If they are, then they
  need to be handled in copy-on-write way, i.e. if they need
  to be modified, a copy needs to be made first; at this point
  it will not be shared any more, and can be modified.
   <p>
  This flag needs to be checked both when adding new main entries,
  and when adding new collision list queues (i.e. creating a new
  collision list head entry)
   */
  jboolean _hashShared_;
  /*!
   @brief Lazily constructed structure that is used to keep track of
  collision buckets that have overflowed once: this is used
  to detect likely attempts at denial-of-service attacks that
  uses hash collisions.
   @since 2.4
   */
  JavaUtilBitSet *_overflows_;
}

/*!
 @brief Main method for constructing a root symbol table instance.
 */
- (instancetype __nonnull)initWithInt:(jint)seed;

/*!
 @brief Internal constructor used when creating child instances.
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)parent
                                                                             withInt:(jint)flags
                                                                             withInt:(jint)seed
                    withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)parentState;

+ (jint)_thresholdSizeWithInt:(jint)hashAreaSize;

/*!
 @brief Method that allows contents of child table to potentially be
  "merged in" with contents of this symbol table.
 <p>
  Note that caller has to make sure symbol table passed in is
  really a child or sibling of this symbol table.
 */
- (void)mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)childState;

- (NSString *)_findSymbol2WithCharArray:(IOSCharArray *)buffer
                                withInt:(jint)start
                                withInt:(jint)len
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *)b;

- (NSString *)_addSymbolWithCharArray:(IOSCharArray *)buffer
                              withInt:(jint)start
                              withInt:(jint)len
                              withInt:(jint)h
                              withInt:(jint)index;

- (void)_handleSpillOverflowWithInt:(jint)bindex
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *)newBucket;

/*!
 @brief Method called when copy-on-write is needed; generally when first
  change is made to a derived symbol table.
 */
- (void)copyArrays OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method called when size (number of entries) of symbol table grows
  so big that load factor is exceeded.Since size has to remain
  power of two, arrays will then always be doubled.
 Main work
  is really redistributing old entries into new String/Bucket
  entries.
 */
- (void)rehash;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, _parent_, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, _tableInfo_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, _symbols_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, _buckets_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, _overflows_, JavaUtilBitSet *)

/*!
 @brief Default initial table size.Shouldn't be miniscule (as there's
  cost to both array realloc and rehashing), but let's keep
  it reasonably small.
 For systems that properly 
  reuse factories it doesn't matter either way; but when
  recreating factories often, initial overhead may dominate.
 */
inline jint ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_get_DEFAULT_T_SIZE(void);
#define ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, DEFAULT_T_SIZE, jint)

/*!
 @brief Let's not expand symbol tables past some maximum size;
  this should protected against OOMEs caused by large documents
  with unique (~= random) names.
 */
inline jint ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_get_MAX_T_SIZE(void);
#define ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_T_SIZE 65536
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, MAX_T_SIZE, jint)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, jint seed);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(jint seed) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(jint seed);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__thresholdSizeWithInt_(jint hashAreaSize);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *childState);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__findSymbol2WithCharArray_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, IOSCharArray *buffer, jint start, jint len, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *b);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__addSymbolWithCharArray_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, IOSCharArray *buffer, jint start, jint len, jint h, jint index);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__handleSpillOverflowWithInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, jint bindex, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *newBucket);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_copyArrays(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_rehash(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self);

/*!
 @brief Immutable value class used for sharing information as efficiently
  as possible, by only require synchronization of reference manipulation
  but not access to contents.
 @since 2.8.7
 */
@interface ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo : NSObject {
 @public
  jint size_;
  jint longestCollisionList_;
  IOSObjectArray *symbols_;
  IOSObjectArray *buckets_;
}

- (instancetype __nonnull)initWithInt:(jint)size
                              withInt:(jint)longestCollisionList
                    withNSStringArray:(IOSObjectArray *)symbols
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray:(IOSObjectArray *)buckets;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)src;

+ (ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)createInitialWithInt:(jint)sz;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, symbols_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, buckets_, IOSObjectArray *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *self, jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_createInitialWithInt_(jint sz);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo)

@implementation ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer

- (instancetype __nonnull)initWithInt:(jint)seed {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(self, seed);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)parent
                                                                             withInt:(jint)flags
                                                                             withInt:(jint)seed
                    withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)parentState {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(self, parent, flags, seed, parentState);
  return self;
}

+ (jint)_thresholdSizeWithInt:(jint)hashAreaSize {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__thresholdSizeWithInt_(hashAreaSize);
}

+ (ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)createRoot {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_createRoot();
}

+ (ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)createRootWithInt:(jint)seed {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_createRootWithInt_(seed);
}

- (ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)makeChildWithInt:(jint)flags {
  return create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(self, flags, _seed_, [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_tableInfo_)) get]);
}

- (void)release__ {
  if (![self maybeDirty]) {
    return;
  }
  if (_parent_ != nil && _canonicalize_) {
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(_parent_, create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(self));
    _hashShared_ = true;
  }
}

- (void)mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)childState {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(self, childState);
}

- (jint)size {
  if (_tableInfo_ != nil) {
    return ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *) nil_chk([_tableInfo_ get]))->size_;
  }
  return _size_;
}

- (jint)bucketCount {
  return ((IOSObjectArray *) nil_chk(_symbols_))->size_;
}

- (jboolean)maybeDirty {
  return !_hashShared_;
}

- (jint)hashSeed {
  return _seed_;
}

- (jint)collisionCount {
  jint count = 0;
  {
    IOSObjectArray *a__ = _buckets_;
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *bucket = *b__++;
      if (bucket != nil) {
        count += bucket->length_;
      }
    }
  }
  return count;
}

- (jint)maxCollisionLength {
  return _longestCollisionList_;
}

- (NSString *)findSymbolWithCharArray:(IOSCharArray *)buffer
                              withInt:(jint)start
                              withInt:(jint)len
                              withInt:(jint)h {
  if (len < 1) {
    return @"";
  }
  if (!_canonicalize_) {
    return [NSString java_stringWithCharacters:buffer offset:start length:len];
  }
  jint index = [self _hashToIndexWithInt:h];
  NSString *sym = IOSObjectArray_Get(nil_chk(_symbols_), index);
  if (sym != nil) {
    if ([sym java_length] == len) {
      jint i = 0;
      while ([sym charAtWithInt:i] == IOSCharArray_Get(nil_chk(buffer), start + i)) {
        if (++i == len) {
          return sym;
        }
      }
    }
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *b = IOSObjectArray_Get(nil_chk(_buckets_), JreRShift32(index, 1));
    if (b != nil) {
      sym = [b hasWithCharArray:buffer withInt:start withInt:len];
      if (sym != nil) {
        return sym;
      }
      sym = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__findSymbol2WithCharArray_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(self, buffer, start, len, b->next_);
      if (sym != nil) {
        return sym;
      }
    }
  }
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__addSymbolWithCharArray_withInt_withInt_withInt_withInt_(self, buffer, start, len, h, index);
}

- (NSString *)_findSymbol2WithCharArray:(IOSCharArray *)buffer
                                withInt:(jint)start
                                withInt:(jint)len
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *)b {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__findSymbol2WithCharArray_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(self, buffer, start, len, b);
}

- (NSString *)_addSymbolWithCharArray:(IOSCharArray *)buffer
                              withInt:(jint)start
                              withInt:(jint)len
                              withInt:(jint)h
                              withInt:(jint)index {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__addSymbolWithCharArray_withInt_withInt_withInt_withInt_(self, buffer, start, len, h, index);
}

- (void)_handleSpillOverflowWithInt:(jint)bindex
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *)newBucket {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__handleSpillOverflowWithInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(self, bindex, newBucket);
}

- (jint)_hashToIndexWithInt:(jint)rawHash {
  rawHash += (JreURShift32(rawHash, 15));
  rawHash ^= (JreLShift32(rawHash, 7));
  rawHash += (JreURShift32(rawHash, 3));
  return (rawHash & _indexMask_);
}

- (jint)calcHashWithCharArray:(IOSCharArray *)buffer
                      withInt:(jint)start
                      withInt:(jint)len {
  jint hash_ = _seed_;
  for (jint i = start, end = start + len; i < end; ++i) {
    hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + (jint) IOSCharArray_Get(nil_chk(buffer), i);
  }
  return (hash_ == 0) ? 1 : hash_;
}

- (jint)calcHashWithNSString:(NSString *)key {
  jint len = [((NSString *) nil_chk(key)) java_length];
  jint hash_ = _seed_;
  for (jint i = 0; i < len; ++i) {
    hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + (jint) [key charAtWithInt:i];
  }
  return (hash_ == 0) ? 1 : hash_;
}

- (void)copyArrays {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_copyArrays(self);
}

- (void)rehash {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_rehash(self);
}

- (void)reportTooManyCollisionsWithInt:(jint)maxLen {
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$", @"Longest collision chain in symbol table (of size ", _size_, @") now exceeds maximum, ", maxLen, @" -- suspect a DoS attack based on hash collisions"));
}

- (void)dealloc {
  RELEASE_(_parent_);
  RELEASE_(_tableInfo_);
  RELEASE_(_symbols_);
  RELEASE_(_buckets_);
  RELEASE_(_overflows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", 0xc, 3, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 20, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:withInt:withInt:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:);
  methods[2].selector = @selector(_thresholdSizeWithInt:);
  methods[3].selector = @selector(createRoot);
  methods[4].selector = @selector(createRootWithInt:);
  methods[5].selector = @selector(makeChildWithInt:);
  methods[6].selector = @selector(release__);
  methods[7].selector = @selector(mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo:);
  methods[8].selector = @selector(size);
  methods[9].selector = @selector(bucketCount);
  methods[10].selector = @selector(maybeDirty);
  methods[11].selector = @selector(hashSeed);
  methods[12].selector = @selector(collisionCount);
  methods[13].selector = @selector(maxCollisionLength);
  methods[14].selector = @selector(findSymbolWithCharArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(_findSymbol2WithCharArray:withInt:withInt:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:);
  methods[16].selector = @selector(_addSymbolWithCharArray:withInt:withInt:withInt:withInt:);
  methods[17].selector = @selector(_handleSpillOverflowWithInt:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:);
  methods[18].selector = @selector(_hashToIndexWithInt:);
  methods[19].selector = @selector(calcHashWithCharArray:withInt:withInt:);
  methods[20].selector = @selector(calcHashWithNSString:);
  methods[21].selector = @selector(copyArrays);
  methods[22].selector = @selector(rehash);
  methods[23].selector = @selector(reportTooManyCollisionsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HASH_MULT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_T_SIZE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_T_SIZE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_T_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_ENTRIES_FOR_REUSE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_ENTRIES_FOR_REUSE, 0x18, -1, -1, -1, -1 },
    { "MAX_COLL_CHAIN_LENGTH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_COLL_CHAIN_LENGTH, 0x18, -1, -1, -1, -1 },
    { "_parent_", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tableInfo_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "_seed_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_flags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_canonicalize_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_symbols_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_buckets_", "[LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sizeThreshold_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_indexMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_longestCollisionList_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hashShared_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_overflows_", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;IILComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;", "_thresholdSize", "createRoot", "makeChild", "release", "mergeChild", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;", "findSymbol", "[CIII", "_findSymbol2", "[CIILComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", "_addSymbol", "[CIIII", "_handleSpillOverflow", "ILComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", "_hashToIndex", "calcHash", "[CII", "LNSString;", "reportTooManyCollisions", "Ljava/util/concurrent/atomic/AtomicReference<Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$TableInfo;>;", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer = { "CharsToNameCanonicalizer", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x11, 24, 18, -1, 22, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;
}

@end

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, jint seed) {
  NSObject_init(self);
  JreStrongAssign(&self->_parent_, nil);
  self->_seed_ = seed;
  self->_canonicalize_ = true;
  self->_flags_ = -1;
  self->_hashShared_ = false;
  self->_longestCollisionList_ = 0;
  JreStrongAssignAndConsume(&self->_tableInfo_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_createInitialWithInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE)));
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(jint seed) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, initWithInt_, seed)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(jint seed) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, initWithInt_, seed)
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState) {
  NSObject_init(self);
  JreStrongAssign(&self->_parent_, parent);
  self->_seed_ = seed;
  JreStrongAssign(&self->_tableInfo_, nil);
  self->_flags_ = flags;
  self->_canonicalize_ = [((ComFasterxmlJacksonCoreJsonFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonFactory_Feature, CANONICALIZE_FIELD_NAMES))) enabledInWithInt:flags];
  JreStrongAssign(&self->_symbols_, ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *) nil_chk(parentState))->symbols_);
  JreStrongAssign(&self->_buckets_, parentState->buckets_);
  self->_size_ = parentState->size_;
  self->_longestCollisionList_ = parentState->longestCollisionList_;
  jint arrayLen = (((IOSObjectArray *) nil_chk(self->_symbols_))->size_);
  self->_sizeThreshold_ = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__thresholdSizeWithInt_(arrayLen);
  self->_indexMask_ = (arrayLen - 1);
  self->_hashShared_ = true;
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_, parent, flags, seed, parentState)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *parent, jint flags, jint seed, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *parentState) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer, initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_, parent, flags, seed, parentState)
}

jint ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__thresholdSizeWithInt_(jint hashAreaSize) {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initialize();
  return hashAreaSize - (JreRShift32(hashAreaSize, 2));
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_createRoot() {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initialize();
  jlong now = JavaLangSystem_currentTimeMillis();
  jint seed = (((jint) now) + ((jint) (JreURShift64(now, 32)))) | 1;
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_createRootWithInt_(seed);
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_createRootWithInt_(jint seed) {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initialize();
  return create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_initWithInt_(seed);
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *childState) {
  jint childCount = ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *) nil_chk(childState))->size_;
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *currState = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->_tableInfo_)) get];
  if (childCount == ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *) nil_chk(currState))->size_) {
    return;
  }
  if (childCount > ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_ENTRIES_FOR_REUSE) {
    childState = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_createInitialWithInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE);
  }
  [self->_tableInfo_ compareAndSetWithId:currState withId:childState];
}

NSString *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__findSymbol2WithCharArray_withInt_withInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, IOSCharArray *buffer, jint start, jint len, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *b) {
  while (b != nil) {
    NSString *sym = [b hasWithCharArray:buffer withInt:start withInt:len];
    if (sym != nil) {
      return sym;
    }
    b = b->next_;
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__addSymbolWithCharArray_withInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, IOSCharArray *buffer, jint start, jint len, jint h, jint index) {
  if (self->_hashShared_) {
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_copyArrays(self);
    self->_hashShared_ = false;
  }
  else if (self->_size_ >= self->_sizeThreshold_) {
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_rehash(self);
    index = [self _hashToIndexWithInt:[self calcHashWithCharArray:buffer withInt:start withInt:len]];
  }
  NSString *newSymbol = [NSString java_stringWithCharacters:buffer offset:start length:len];
  if ([((ComFasterxmlJacksonCoreJsonFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonFactory_Feature, INTERN_FIELD_NAMES))) enabledInWithInt:self->_flags_]) {
    newSymbol = [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance))) internWithNSString:newSymbol];
  }
  ++self->_size_;
  if (IOSObjectArray_Get(nil_chk(self->_symbols_), index) == nil) {
    IOSObjectArray_Set(self->_symbols_, index, newSymbol);
  }
  else {
    jint bix = (JreRShift32(index, 1));
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *newB = create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(newSymbol, IOSObjectArray_Get(nil_chk(self->_buckets_), bix));
    jint collLen = newB->length_;
    if (collLen > ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_COLL_CHAIN_LENGTH) {
      ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__handleSpillOverflowWithInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(self, bix, newB);
    }
    else {
      IOSObjectArray_Set(nil_chk(self->_buckets_), bix, newB);
      self->_longestCollisionList_ = JavaLangMath_maxWithInt_withInt_(collLen, self->_longestCollisionList_);
    }
  }
  return newSymbol;
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__handleSpillOverflowWithInt_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self, jint bindex, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *newBucket) {
  if (self->_overflows_ == nil) {
    JreStrongAssignAndConsume(&self->_overflows_, new_JavaUtilBitSet_init());
    [self->_overflows_ setWithInt:bindex];
  }
  else {
    if ([self->_overflows_ getWithInt:bindex]) {
      if ([((ComFasterxmlJacksonCoreJsonFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonFactory_Feature, FAIL_ON_SYMBOL_HASH_OVERFLOW))) enabledInWithInt:self->_flags_]) {
        [self reportTooManyCollisionsWithInt:ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_COLL_CHAIN_LENGTH];
      }
      self->_canonicalize_ = false;
    }
    else {
      [((JavaUtilBitSet *) nil_chk(self->_overflows_)) setWithInt:bindex];
    }
  }
  IOSObjectArray_Set(nil_chk(self->_symbols_), bindex + bindex, ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *) nil_chk(newBucket))->symbol_);
  IOSObjectArray_Set(nil_chk(self->_buckets_), bindex, nil);
  self->_size_ -= (newBucket->length_);
  self->_longestCollisionList_ = -1;
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_copyArrays(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self) {
  IOSObjectArray *oldSyms = self->_symbols_;
  JreStrongAssign(&self->_symbols_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(oldSyms, ((IOSObjectArray *) nil_chk(oldSyms))->size_));
  IOSObjectArray *oldBuckets = self->_buckets_;
  JreStrongAssign(&self->_buckets_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(oldBuckets, ((IOSObjectArray *) nil_chk(oldBuckets))->size_));
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_rehash(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *self) {
  jint size = ((IOSObjectArray *) nil_chk(self->_symbols_))->size_;
  jint newSize = size + size;
  if (newSize > ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_MAX_T_SIZE) {
    self->_size_ = 0;
    self->_canonicalize_ = false;
    JreStrongAssignAndConsume(&self->_symbols_, [IOSObjectArray newArrayWithLength:ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE type:NSString_class_()]);
    JreStrongAssignAndConsume(&self->_buckets_, [IOSObjectArray newArrayWithLength:JreRShift32(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE, 1) type:ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_class_()]);
    self->_indexMask_ = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_DEFAULT_T_SIZE - 1;
    self->_hashShared_ = false;
    return;
  }
  IOSObjectArray *oldSyms = self->_symbols_;
  IOSObjectArray *oldBuckets = self->_buckets_;
  JreStrongAssignAndConsume(&self->_symbols_, [IOSObjectArray newArrayWithLength:newSize type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->_buckets_, [IOSObjectArray newArrayWithLength:JreRShift32(newSize, 1) type:ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_class_()]);
  self->_indexMask_ = newSize - 1;
  self->_sizeThreshold_ = ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer__thresholdSizeWithInt_(newSize);
  jint count = 0;
  jint maxColl = 0;
  for (jint i = 0; i < size; ++i) {
    NSString *symbol = IOSObjectArray_Get(oldSyms, i);
    if (symbol != nil) {
      ++count;
      jint index = [self _hashToIndexWithInt:[self calcHashWithNSString:symbol]];
      if (IOSObjectArray_Get(nil_chk(self->_symbols_), index) == nil) {
        IOSObjectArray_Set(self->_symbols_, index, symbol);
      }
      else {
        jint bix = (JreRShift32(index, 1));
        ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *newB = create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(symbol, IOSObjectArray_Get(nil_chk(self->_buckets_), bix));
        IOSObjectArray_Set(nil_chk(self->_buckets_), bix, newB);
        maxColl = JavaLangMath_maxWithInt_withInt_(maxColl, newB->length_);
      }
    }
  }
  JreRShiftAssignInt(&size, 1);
  for (jint i = 0; i < size; ++i) {
    ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *b = IOSObjectArray_Get(nil_chk(oldBuckets), i);
    while (b != nil) {
      ++count;
      NSString *symbol = b->symbol_;
      jint index = [self _hashToIndexWithInt:[self calcHashWithNSString:symbol]];
      if (IOSObjectArray_Get(nil_chk(self->_symbols_), index) == nil) {
        IOSObjectArray_Set(self->_symbols_, index, symbol);
      }
      else {
        jint bix = (JreRShift32(index, 1));
        ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *newB = create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(symbol, IOSObjectArray_Get(nil_chk(self->_buckets_), bix));
        IOSObjectArray_Set(nil_chk(self->_buckets_), bix, newB);
        maxColl = JavaLangMath_maxWithInt_withInt_(maxColl, newB->length_);
      }
      b = b->next_;
    }
  }
  self->_longestCollisionList_ = maxColl;
  JreStrongAssign(&self->_overflows_, nil);
  if (count != self->_size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Internal error on SymbolTable.rehash(): had %d entries; now have %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(self->_size_), JavaLangInteger_valueOfWithInt_(count) } count:2 type:NSObject_class_()]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer)

@implementation ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket

- (instancetype __nonnull)initWithNSString:(NSString *)s
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *)n {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(self, s, n);
  return self;
}

- (NSString *)hasWithCharArray:(IOSCharArray *)buf
                       withInt:(jint)start
                       withInt:(jint)len {
  if ([((NSString *) nil_chk(symbol_)) java_length] != len) {
    return nil;
  }
  jint i = 0;
  do {
    if ([symbol_ charAtWithInt:i] != IOSCharArray_Get(nil_chk(buf), start + i)) {
      return nil;
    }
  }
  while (++i < len);
  return symbol_;
}

- (void)dealloc {
  RELEASE_(symbol_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket:);
  methods[1].selector = @selector(hasWithCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "symbol_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "next_", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", "has", "[CII", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket = { "Bucket", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x18, 2, 3, 3, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;
}

@end

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *self, NSString *s, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *n) {
  NSObject_init(self);
  JreStrongAssign(&self->symbol_, s);
  JreStrongAssign(&self->next_, n);
  self->length_ = (n == nil) ? 1 : ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *) nil_chk(n))->length_ + 1;
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(NSString *s, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *n) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket, initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_, s, n)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_(NSString *s, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket *n) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket, initWithNSString_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_, s, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket)

@implementation ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo

- (instancetype __nonnull)initWithInt:(jint)size
                              withInt:(jint)longestCollisionList
                    withNSStringArray:(IOSObjectArray *)symbols
withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray:(IOSObjectArray *)buckets {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(self, size, longestCollisionList, symbols, buckets);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)src {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(self, src);
  return self;
}

+ (ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *)createInitialWithInt:(jint)sz {
  return ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_createInitialWithInt_(sz);
}

- (void)dealloc {
  RELEASE_(symbols_);
  RELEASE_(buckets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withNSStringArray:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:);
  methods[2].selector = @selector(createInitialWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "longestCollisionList_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "symbols_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buckets_", "[LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II[LNSString;[LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket;", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", "createInitial", "I" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo = { "TableInfo", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x1a, 3, 4, 1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo;
}

@end

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *self, jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets) {
  NSObject_init(self);
  self->size_ = size;
  self->longestCollisionList_ = longestCollisionList;
  JreStrongAssign(&self->symbols_, symbols);
  JreStrongAssign(&self->buckets_, buckets);
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_, size, longestCollisionList, symbols, buckets)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(jint size, jint longestCollisionList, IOSObjectArray *symbols, IOSObjectArray *buckets) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_, size, longestCollisionList, symbols, buckets)
}

void ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *self, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src) {
  NSObject_init(self);
  self->size_ = ((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(src))->_size_;
  self->longestCollisionList_ = src->_longestCollisionList_;
  JreStrongAssign(&self->symbols_, src->_symbols_);
  JreStrongAssign(&self->buckets_, src->_buckets_);
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_, src)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *src) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo, initWithComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_, src)
}

ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo *ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_createInitialWithInt_(jint sz) {
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initialize();
  return create_ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo_initWithInt_withInt_withNSStringArray_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_BucketArray_(0, 0, [IOSObjectArray arrayWithLength:sz type:NSString_class_()], [IOSObjectArray arrayWithLength:JreRShift32(sz, 1) type:ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_Bucket_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_TableInfo)
