//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonFactory.h"
#include "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/InternCache.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@class ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo;

@interface ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer () {
 @public
  /*!
   @brief Reference to the root symbol table, for child tables, so
  that they can merge table information back as necessary.
   */
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *_parent_;
  /*!
   @brief Member that is only used by the root table instance: root
  passes immutable state info child instances, and children
  may return new state if they add entries to the table.
   Child tables do NOT use the reference.
   */
  JavaUtilConcurrentAtomicAtomicReference *_tableInfo_;
  /*!
   @brief Seed value we use as the base to make hash codes non-static between
  different runs, but still stable for lifetime of a single symbol table
  instance.
   This is done for security reasons, to avoid potential DoS attack via
  hash collisions.
   */
  jint _seed_;
  /*!
   @brief Whether canonical symbol Strings are to be intern()ed before added
  to the table or not.
   <p>
  NOTE: non-final to allow disabling intern()ing in case of excessive
  collisions.
   */
  jboolean _intern_;
  /*!
   @brief Flag that indicates whether we should throw an exception if enough 
  hash collisions are detected (true); or just worked around (false).
   @since 2.4
   */
  jboolean _failOnDoS_;
  /*!
   @brief Primary hash information area: consists of <code>2 * _hashSize</code>
  entries of 16 bytes (4 ints), arranged in a cascading lookup
  structure (details of which may be tweaked depending on expected rates
  of collisions).
   */
  IOSIntArray *_hashArea_;
  /*!
   @brief Number of slots for primary entries within <code>_hashArea</code>; which is
  at most <code>1/8</code> of actual size of the underlying array (4-int slots,
  primary covers only half of the area; plus, additional area for longer
  symbols after hash area).
   */
  jint _hashSize_;
  /*!
   @brief Offset within <code>_hashArea</code> where secondary entries start
   */
  jint _secondaryStart_;
  /*!
   @brief Offset within <code>_hashArea</code> where tertiary entries start
   */
  jint _tertiaryStart_;
  /*!
   @brief Constant that determines size of buckets for tertiary entries: 
 <code>1 &lt;&lt; _tertiaryShift</code> is the size, and shift value
  is also used for translating from primary offset into
  tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
   <p>
  Default value is 2, for buckets of 4 slots; grows bigger with
  bigger table sizes.
   */
  jint _tertiaryShift_;
  /*!
   @brief Total number of Strings in the symbol table; only used for child tables.
   */
  jint _count_;
  /*!
   @brief Array that contains <code>String</code> instances matching
  entries in <code>_hashArea</code>.
   Contains nulls for unused entries. Note that this size is twice
  that of <code>_hashArea</code>
   */
  IOSObjectArray *_names_;
  /*!
   @brief Pointer to the offset within spill-over area where there is room
  for more spilled over entries (if any).
   Spill over area is within fixed-size portion of <code>_hashArea</code>.
   */
  jint _spilloverEnd_;
  /*!
   @brief Offset within <code>_hashArea</code> that follows main slots and contains
  quads for longer names (13 bytes or longers), and points to the
  first available int that may be used for appending quads of the next
  long name.
   Note that long name area follows immediately after the fixed-size
  main hash area (<code>_hashArea</code>).
   */
  jint _longNameOffset_;
  /*!
   @brief This flag is set if, after adding a new entry, it is deemed
  that a rehash is warranted if any more entries are to be added.
   */
  jboolean _needRehash_;
  /*!
   @brief Flag that indicates whether underlying data structures for
  the main hash area are shared or not.If they are, then they
  need to be handled in copy-on-write way, i.e. if they need
  to be modified, a copy needs to be made first; at this point
  it will not be shared any more, and can be modified.
   <p>
  This flag needs to be checked both when adding new main entries,
  and when adding new collision list queues (i.e. creating a new
  collision list head entry)
   */
  jboolean _hashShared_;
}

/*!
 @brief Constructor used for creating per-<code>JsonFactory</code> "root"
  symbol tables: ones used for merging and sharing common symbols
 @param sz Initial primary hash area size
 @param intern Whether Strings contained should be <code>String.intern</code> ed
 @param seed Random seed valued used to make it more difficult to cause    collisions (used for collision-based DoS attacks).
 */
- (instancetype __nonnull)initWithInt:(jint)sz
                          withBoolean:(jboolean)intern
                              withInt:(jint)seed
                          withBoolean:(jboolean)failOnDoS;

/*!
 @brief Constructor used when creating a child instance
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)parent
                                                                       withBoolean:(jboolean)intern
                                                                           withInt:(jint)seed
                                                                       withBoolean:(jboolean)failOnDoS
                    withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)state;

- (void)mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)childState;

- (jint)_calcOffsetWithInt:(jint)hash_;

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1;

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1
                            withInt:(jint)q2;

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1
                            withInt:(jint)q2
                            withInt:(jint)q3;

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)hash_
                       withIntArray:(IOSIntArray *)q
                            withInt:(jint)qlen;

- (jboolean)_verifyLongNameWithIntArray:(IOSIntArray *)q
                                withInt:(jint)qlen
                                withInt:(jint)spillOffset;

- (jboolean)_verifyLongName2WithIntArray:(IOSIntArray *)q
                                 withInt:(jint)qlen
                                 withInt:(jint)spillOffset;

- (void)_verifyNeedForRehash;

- (void)_verifySharing;

/*!
 @brief Method called to find the location within hash table to add a new symbol in.
 */
- (jint)_findOffsetForAddWithInt:(jint)hash_;

- (jint)_appendLongNameWithIntArray:(IOSIntArray *)quads
                            withInt:(jint)qlen;

- (void)rehash;

/*!
 @brief Helper method called to empty all shared symbols, but to leave
  arrays allocated
 */
- (void)nukeSymbolsWithBoolean:(jboolean)fill;

/*!
 @brief Helper method that calculates start of the spillover area
 */
- (jint)_spilloverStart;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, _parent_, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, _tableInfo_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, _hashArea_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, _names_, IOSObjectArray *)

/*!
 @brief Initial size of the primary hash area.Each entry consumes 4 ints (16 bytes),
  and secondary area is same as primary; so default size will use 2kB of memory_tertiaryStart
  (plus 64x4 or 64x8 (256/512 bytes) for references to Strings, and Strings
  themselves).
 */
inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_DEFAULT_T_SIZE(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_DEFAULT_T_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, DEFAULT_T_SIZE, jint)

/*!
 @brief Let's not expand symbol tables past some maximum size;
  this should protected against OOMEs caused by large documents
  with unique (~= random) names.
 Size is in
 */
inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MAX_T_SIZE(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_T_SIZE 65536
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MAX_T_SIZE, jint)

/*!
 @brief No point in trying to construct tiny tables, just need to resize soon.
 */
inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MIN_HASH_SIZE(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MIN_HASH_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MIN_HASH_SIZE, jint)

inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MULT(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT 33
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MULT, jint)

inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MULT2(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT2 65599
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MULT2, jint)

inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MULT3(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT3 31
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MULT3, jint)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint sz, jboolean intern, jint seed, jboolean failOnDoS);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(jint sz, jboolean intern, jint seed, jboolean failOnDoS) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(jint sz, jboolean intern, jint seed, jboolean failOnDoS);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *childState);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint hash_);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1, jint q2);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1, jint q2, jint q3);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withIntArray_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint hash_, IOSIntArray *q, jint qlen);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *q, jint qlen, jint spillOffset);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongName2WithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *q, jint qlen, jint spillOffset);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint hash_);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__appendLongNameWithIntArray_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *quads, jint qlen);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_rehash(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_nukeSymbolsWithBoolean_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jboolean fill);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self);

/*!
 @brief Immutable value class used for sharing information as efficiently
  as possible, by only require synchronization of reference manipulation
  but not access to contents.
 @since 2.1
 */
@interface ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo : NSObject {
 @public
  jint size_;
  jint count_;
  jint tertiaryShift_;
  IOSIntArray *mainHash_;
  IOSObjectArray *names_;
  jint spilloverEnd_;
  jint longNameOffset_;
}

- (instancetype __nonnull)initWithInt:(jint)size
                              withInt:(jint)count
                              withInt:(jint)tertiaryShift
                         withIntArray:(IOSIntArray *)mainHash
                    withNSStringArray:(IOSObjectArray *)names
                              withInt:(jint)spilloverEnd
                              withInt:(jint)longNameOffset;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)src;

+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)createInitialWithInt:(jint)sz;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, mainHash_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, names_, IOSObjectArray *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *self, jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset);

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_createInitialWithInt_(jint sz);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo)

@implementation ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer

- (instancetype __nonnull)initWithInt:(jint)sz
                          withBoolean:(jboolean)intern
                              withInt:(jint)seed
                          withBoolean:(jboolean)failOnDoS {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(self, sz, intern, seed, failOnDoS);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)parent
                                                                       withBoolean:(jboolean)intern
                                                                           withInt:(jint)seed
                                                                       withBoolean:(jboolean)failOnDoS
                    withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)state {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(self, parent, intern, seed, failOnDoS, state);
  return self;
}

+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)createRoot {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRoot();
}

+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)createRootWithInt:(jint)seed {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRootWithInt_(seed);
}

- (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)makeChildWithInt:(jint)flags {
  return create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(self, [((ComFasterxmlJacksonCoreJsonFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonFactory_Feature, INTERN_FIELD_NAMES))) enabledInWithInt:flags], _seed_, [((ComFasterxmlJacksonCoreJsonFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonFactory_Feature, FAIL_ON_SYMBOL_HASH_OVERFLOW))) enabledInWithInt:flags], [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(_tableInfo_)) get]);
}

- (void)release__ {
  if (_parent_ != nil && [self maybeDirty]) {
    ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(_parent_, create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(self));
    _hashShared_ = true;
  }
}

- (void)mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)childState {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(self, childState);
}

- (jint)size {
  if (_tableInfo_ != nil) {
    return ((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *) nil_chk([_tableInfo_ get]))->count_;
  }
  return _count_;
}

- (jint)bucketCount {
  return _hashSize_;
}

- (jboolean)maybeDirty {
  return !_hashShared_;
}

- (jint)hashSeed {
  return _seed_;
}

- (jint)primaryCount {
  jint count = 0;
  for (jint offset = 3, end = _secondaryStart_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)secondaryCount {
  jint count = 0;
  jint offset = _secondaryStart_ + 3;
  for (jint end = _tertiaryStart_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)tertiaryCount {
  jint count = 0;
  jint offset = _tertiaryStart_ + 3;
  for (jint end = offset + _hashSize_; offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (jint)spilloverCount {
  return JreRShift32((_spilloverEnd_ - ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self)), 2);
}

- (jint)totalCount {
  jint count = 0;
  for (jint offset = 3, end = (JreLShift32(_hashSize_, 3)); offset < end; offset += 4) {
    if (IOSIntArray_Get(nil_chk(_hashArea_), offset) != 0) {
      ++count;
    }
  }
  return count;
}

- (NSString *)description {
  jint pri = [self primaryCount];
  jint sec = [self secondaryCount];
  jint tert = [self tertiaryCount];
  jint spill = [self spilloverCount];
  jint total = [self totalCount];
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getName], JavaLangInteger_valueOfWithInt_(_count_), JavaLangInteger_valueOfWithInt_(_hashSize_), JavaLangInteger_valueOfWithInt_(pri), JavaLangInteger_valueOfWithInt_(sec), JavaLangInteger_valueOfWithInt_(tert), JavaLangInteger_valueOfWithInt_(spill), JavaLangInteger_valueOfWithInt_((pri + sec + tert + spill)), JavaLangInteger_valueOfWithInt_(total) } count:9 type:NSObject_class_()]);
}

- (NSString *)findNameWithInt:(jint)q1 {
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, [self calcHashWithInt:q1]);
  IOSIntArray *hashArea = _hashArea_;
  jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if (len == 1) {
    if (IOSIntArray_Get(hashArea, offset) == q1) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  len = IOSIntArray_Get(hashArea, offset2 + 3);
  if (len == 1) {
    if (IOSIntArray_Get(hashArea, offset2) == q1) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset2, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_(self, offset, q1);
}

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2 {
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, [self calcHashWithInt:q1 withInt:q2]);
  IOSIntArray *hashArea = _hashArea_;
  jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if (len == 2) {
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1))) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  len = IOSIntArray_Get(hashArea, offset2 + 3);
  if (len == 2) {
    if ((q1 == IOSIntArray_Get(hashArea, offset2)) && (q2 == IOSIntArray_Get(hashArea, offset2 + 1))) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset2, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_(self, offset, q1, q2);
}

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)q3 {
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, [self calcHashWithInt:q1 withInt:q2 withInt:q3]);
  IOSIntArray *hashArea = _hashArea_;
  jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if (len == 3) {
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (IOSIntArray_Get(hashArea, offset + 1) == q2) && (IOSIntArray_Get(hashArea, offset + 2) == q3)) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  len = IOSIntArray_Get(hashArea, offset2 + 3);
  if (len == 3) {
    if ((q1 == IOSIntArray_Get(hashArea, offset2)) && (IOSIntArray_Get(hashArea, offset2 + 1) == q2) && (IOSIntArray_Get(hashArea, offset2 + 2) == q3)) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset2, 2));
    }
  }
  else if (len == 0) {
    return nil;
  }
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_withInt_(self, offset, q1, q2, q3);
}

- (NSString *)findNameWithIntArray:(IOSIntArray *)q
                           withInt:(jint)qlen {
  if (qlen < 4) {
    switch (qlen) {
      case 3:
      return [self findNameWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1) withInt:IOSIntArray_Get(q, 2)];
      case 2:
      return [self findNameWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1)];
      case 1:
      return [self findNameWithInt:IOSIntArray_Get(nil_chk(q), 0)];
      default:
      return @"";
    }
  }
  jint hash_ = [self calcHashWithIntArray:q withInt:qlen];
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, hash_);
  IOSIntArray *hashArea = _hashArea_;
  jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
  if ((hash_ == IOSIntArray_Get(hashArea, offset)) && (len == qlen)) {
    if (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset, 2));
    }
  }
  if (len == 0) {
    return nil;
  }
  jint offset2 = _secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  jint len2 = IOSIntArray_Get(hashArea, offset2 + 3);
  if ((hash_ == IOSIntArray_Get(hashArea, offset2)) && (len2 == qlen)) {
    if (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset2 + 1))) {
      return IOSObjectArray_Get(nil_chk(_names_), JreRShift32(offset2, 2));
    }
  }
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withIntArray_withInt_(self, offset, hash_, q, qlen);
}

- (jint)_calcOffsetWithInt:(jint)hash_ {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, hash_);
}

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1 {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_(self, origOffset, q1);
}

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1
                            withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_(self, origOffset, q1, q2);
}

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)q1
                            withInt:(jint)q2
                            withInt:(jint)q3 {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_withInt_(self, origOffset, q1, q2, q3);
}

- (NSString *)_findSecondaryWithInt:(jint)origOffset
                            withInt:(jint)hash_
                       withIntArray:(IOSIntArray *)q
                            withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withIntArray_withInt_(self, origOffset, hash_, q, qlen);
}

- (jboolean)_verifyLongNameWithIntArray:(IOSIntArray *)q
                                withInt:(jint)qlen
                                withInt:(jint)spillOffset {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
}

- (jboolean)_verifyLongName2WithIntArray:(IOSIntArray *)q
                                 withInt:(jint)qlen
                                 withInt:(jint)spillOffset {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongName2WithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
}

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1 {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(self);
  if (_intern_) {
    name = [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance))) internWithNSString:name];
  }
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, [self calcHashWithInt:q1]);
  *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(_hashArea_, offset + 3) = 1;
  IOSObjectArray_Set(nil_chk(_names_), JreRShift32(offset, 2), name);
  ++_count_;
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
  return name;
}

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1
                          withInt:(jint)q2 {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(self);
  if (_intern_) {
    name = [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance))) internWithNSString:name];
  }
  jint hash_ = (q2 == 0) ? [self calcHashWithInt:q1] : [self calcHashWithInt:q1 withInt:q2];
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, hash_);
  *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(_hashArea_, offset + 1) = q2;
  *IOSIntArray_GetRef(_hashArea_, offset + 3) = 2;
  IOSObjectArray_Set(nil_chk(_names_), JreRShift32(offset, 2), name);
  ++_count_;
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
  return name;
}

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1
                          withInt:(jint)q2
                          withInt:(jint)q3 {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(self);
  if (_intern_) {
    name = [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance))) internWithNSString:name];
  }
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, [self calcHashWithInt:q1 withInt:q2 withInt:q3]);
  *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = q1;
  *IOSIntArray_GetRef(_hashArea_, offset + 1) = q2;
  *IOSIntArray_GetRef(_hashArea_, offset + 2) = q3;
  *IOSIntArray_GetRef(_hashArea_, offset + 3) = 3;
  IOSObjectArray_Set(nil_chk(_names_), JreRShift32(offset, 2), name);
  ++_count_;
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
  return name;
}

- (NSString *)addNameWithNSString:(NSString *)name
                     withIntArray:(IOSIntArray *)q
                          withInt:(jint)qlen {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(self);
  if (_intern_) {
    name = [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance))) internWithNSString:name];
  }
  jint offset;
  {
    jint hash_;
    jint longStart;
    switch (qlen) {
      case 1:
      {
        offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, [self calcHashWithInt:IOSIntArray_Get(nil_chk(q), 0)]);
        *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = IOSIntArray_Get(q, 0);
        *IOSIntArray_GetRef(_hashArea_, offset + 3) = 1;
      }
      break;
      case 2:
      {
        offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, [self calcHashWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1)]);
        *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = IOSIntArray_Get(q, 0);
        *IOSIntArray_GetRef(_hashArea_, offset + 1) = IOSIntArray_Get(q, 1);
        *IOSIntArray_GetRef(_hashArea_, offset + 3) = 2;
      }
      break;
      case 3:
      {
        offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, [self calcHashWithInt:IOSIntArray_Get(nil_chk(q), 0) withInt:IOSIntArray_Get(q, 1) withInt:IOSIntArray_Get(q, 2)]);
        *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = IOSIntArray_Get(q, 0);
        *IOSIntArray_GetRef(_hashArea_, offset + 1) = IOSIntArray_Get(q, 1);
        *IOSIntArray_GetRef(_hashArea_, offset + 2) = IOSIntArray_Get(q, 2);
        *IOSIntArray_GetRef(_hashArea_, offset + 3) = 3;
      }
      break;
      default:
      hash_ = [self calcHashWithIntArray:q withInt:qlen];
      offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, hash_);
      *IOSIntArray_GetRef(nil_chk(_hashArea_), offset) = hash_;
      longStart = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__appendLongNameWithIntArray_withInt_(self, q, qlen);
      *IOSIntArray_GetRef(nil_chk(_hashArea_), offset + 1) = longStart;
      *IOSIntArray_GetRef(_hashArea_, offset + 3) = qlen;
    }
  }
  IOSObjectArray_Set(nil_chk(_names_), JreRShift32(offset, 2), name);
  ++_count_;
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
  return name;
}

- (void)_verifyNeedForRehash {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
}

- (void)_verifySharing {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(self);
}

- (jint)_findOffsetForAddWithInt:(jint)hash_ {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(self, hash_);
}

- (jint)_appendLongNameWithIntArray:(IOSIntArray *)quads
                            withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__appendLongNameWithIntArray_withInt_(self, quads, qlen);
}

- (jint)calcHashWithInt:(jint)q1 {
  jint hash_ = q1 ^ _seed_;
  hash_ += (JreURShift32(hash_, 16));
  hash_ ^= (JreLShift32(hash_, 3));
  hash_ += (JreURShift32(hash_, 12));
  return hash_;
}

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2 {
  jint hash_ = q1;
  hash_ += (JreURShift32(hash_, 15));
  hash_ ^= (JreURShift32(hash_, 9));
  hash_ += (q2 * ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT);
  hash_ ^= _seed_;
  hash_ += (JreURShift32(hash_, 16));
  hash_ ^= (JreURShift32(hash_, 4));
  hash_ += (JreLShift32(hash_, 3));
  return hash_;
}

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2
                withInt:(jint)q3 {
  jint hash_ = q1 ^ _seed_;
  hash_ += (JreURShift32(hash_, 9));
  hash_ *= ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT3;
  hash_ += q2;
  hash_ *= ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT;
  hash_ += (JreURShift32(hash_, 15));
  hash_ ^= q3;
  hash_ += (JreURShift32(hash_, 4));
  hash_ += (JreURShift32(hash_, 15));
  hash_ ^= (JreLShift32(hash_, 9));
  return hash_;
}

- (jint)calcHashWithIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen {
  if (qlen < 4) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  jint hash_ = IOSIntArray_Get(nil_chk(q), 0) ^ _seed_;
  hash_ += (JreURShift32(hash_, 9));
  hash_ += IOSIntArray_Get(q, 1);
  hash_ += (JreURShift32(hash_, 15));
  hash_ *= ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT;
  hash_ ^= IOSIntArray_Get(q, 2);
  hash_ += (JreURShift32(hash_, 4));
  for (jint i = 3; i < qlen; ++i) {
    jint next = IOSIntArray_Get(q, i);
    next = next ^ (JreRShift32(next, 21));
    hash_ += next;
  }
  hash_ *= ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT2;
  hash_ += (JreURShift32(hash_, 19));
  hash_ ^= (JreLShift32(hash_, 5));
  return hash_;
}

- (void)rehash {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_rehash(self);
}

- (void)nukeSymbolsWithBoolean:(jboolean)fill {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_nukeSymbolsWithBoolean_(self, fill);
}

- (jint)_spilloverStart {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self);
}

- (void)_reportTooManyCollisions {
  if (_hashSize_ <= 1024) {
    return;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$I$", @"Spill-over slots in symbol table with ", _count_, @" entries, hash area of ", _hashSize_, @" slots is now full (all ", (JreRShift32(_hashSize_, 3)), @" slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`"));
}

+ (jint)_calcTertiaryShiftWithInt:(jint)primarySlots {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcTertiaryShiftWithInt_(primarySlots);
}

- (void)dealloc {
  RELEASE_(_parent_);
  RELEASE_(_tableInfo_);
  RELEASE_(_hashArea_);
  RELEASE_(_names_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 13, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 25, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 30, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBoolean:withInt:withBoolean:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:withBoolean:withInt:withBoolean:withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:);
  methods[2].selector = @selector(createRoot);
  methods[3].selector = @selector(createRootWithInt:);
  methods[4].selector = @selector(makeChildWithInt:);
  methods[5].selector = @selector(release__);
  methods[6].selector = @selector(mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(bucketCount);
  methods[9].selector = @selector(maybeDirty);
  methods[10].selector = @selector(hashSeed);
  methods[11].selector = @selector(primaryCount);
  methods[12].selector = @selector(secondaryCount);
  methods[13].selector = @selector(tertiaryCount);
  methods[14].selector = @selector(spilloverCount);
  methods[15].selector = @selector(totalCount);
  methods[16].selector = @selector(description);
  methods[17].selector = @selector(findNameWithInt:);
  methods[18].selector = @selector(findNameWithInt:withInt:);
  methods[19].selector = @selector(findNameWithInt:withInt:withInt:);
  methods[20].selector = @selector(findNameWithIntArray:withInt:);
  methods[21].selector = @selector(_calcOffsetWithInt:);
  methods[22].selector = @selector(_findSecondaryWithInt:withInt:);
  methods[23].selector = @selector(_findSecondaryWithInt:withInt:withInt:);
  methods[24].selector = @selector(_findSecondaryWithInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(_findSecondaryWithInt:withInt:withIntArray:withInt:);
  methods[26].selector = @selector(_verifyLongNameWithIntArray:withInt:withInt:);
  methods[27].selector = @selector(_verifyLongName2WithIntArray:withInt:withInt:);
  methods[28].selector = @selector(addNameWithNSString:withInt:);
  methods[29].selector = @selector(addNameWithNSString:withInt:withInt:);
  methods[30].selector = @selector(addNameWithNSString:withInt:withInt:withInt:);
  methods[31].selector = @selector(addNameWithNSString:withIntArray:withInt:);
  methods[32].selector = @selector(_verifyNeedForRehash);
  methods[33].selector = @selector(_verifySharing);
  methods[34].selector = @selector(_findOffsetForAddWithInt:);
  methods[35].selector = @selector(_appendLongNameWithIntArray:withInt:);
  methods[36].selector = @selector(calcHashWithInt:);
  methods[37].selector = @selector(calcHashWithInt:withInt:);
  methods[38].selector = @selector(calcHashWithInt:withInt:withInt:);
  methods[39].selector = @selector(calcHashWithIntArray:withInt:);
  methods[40].selector = @selector(rehash);
  methods[41].selector = @selector(nukeSymbolsWithBoolean:);
  methods[42].selector = @selector(_spilloverStart);
  methods[43].selector = @selector(_reportTooManyCollisions);
  methods[44].selector = @selector(_calcTertiaryShiftWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_T_SIZE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_DEFAULT_T_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_T_SIZE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_T_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_HASH_SIZE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MIN_HASH_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_ENTRIES_FOR_REUSE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_ENTRIES_FOR_REUSE, 0x18, -1, -1, -1, -1 },
    { "_parent_", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tableInfo_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "_seed_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_intern_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_failOnDoS_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_hashArea_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hashSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_secondaryStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tertiaryStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tertiaryShift_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_names_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_spilloverEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_longNameOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_needRehash_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "_hashShared_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MULT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT, 0x1a, -1, -1, -1, -1 },
    { "MULT2", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT2, 0x1a, -1, -1, -1, -1 },
    { "MULT3", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MULT3, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZIZ", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;ZIZLComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo;", "createRoot", "I", "makeChild", "release", "mergeChild", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo;", "toString", "findName", "II", "III", "[II", "_calcOffset", "_findSecondary", "IIII", "II[II", "_verifyLongName", "[III", "_verifyLongName2", "addName", "LNSString;I", "LNSString;II", "LNSString;III", "LNSString;[II", "_findOffsetForAdd", "_appendLongName", "calcHash", "nukeSymbols", "Z", "_calcTertiaryShift", "Ljava/util/concurrent/atomic/AtomicReference<Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer = { "ByteQuadsCanonicalizer", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x11, 45, 23, -1, 7, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;
}

@end

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint sz, jboolean intern, jint seed, jboolean failOnDoS) {
  NSObject_init(self);
  JreStrongAssign(&self->_parent_, nil);
  self->_seed_ = seed;
  self->_intern_ = intern;
  self->_failOnDoS_ = failOnDoS;
  if (sz < ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MIN_HASH_SIZE) {
    sz = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MIN_HASH_SIZE;
  }
  else {
    if ((sz & (sz - 1)) != 0) {
      jint curr = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MIN_HASH_SIZE;
      while (curr < sz) {
        curr += curr;
      }
      sz = curr;
    }
  }
  JreStrongAssignAndConsume(&self->_tableInfo_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_createInitialWithInt_(sz)));
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(jint sz, jboolean intern, jint seed, jboolean failOnDoS) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, initWithInt_withBoolean_withInt_withBoolean_, sz, intern, seed, failOnDoS)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(jint sz, jboolean intern, jint seed, jboolean failOnDoS) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, initWithInt_withBoolean_withInt_withBoolean_, sz, intern, seed, failOnDoS)
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state) {
  NSObject_init(self);
  JreStrongAssign(&self->_parent_, parent);
  self->_seed_ = seed;
  self->_intern_ = intern;
  self->_failOnDoS_ = failOnDoS;
  JreStrongAssign(&self->_tableInfo_, nil);
  self->_count_ = ((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *) nil_chk(state))->count_;
  self->_hashSize_ = state->size_;
  self->_secondaryStart_ = JreLShift32(self->_hashSize_, 2);
  self->_tertiaryStart_ = self->_secondaryStart_ + (JreRShift32(self->_secondaryStart_, 1));
  self->_tertiaryShift_ = state->tertiaryShift_;
  JreStrongAssign(&self->_hashArea_, state->mainHash_);
  JreStrongAssign(&self->_names_, state->names_);
  self->_spilloverEnd_ = state->spilloverEnd_;
  self->_longNameOffset_ = state->longNameOffset_;
  self->_needRehash_ = false;
  self->_hashShared_ = true;
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_, parent, intern, seed, failOnDoS, state)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *parent, jboolean intern, jint seed, jboolean failOnDoS, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *state) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withBoolean_withInt_withBoolean_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_, parent, intern, seed, failOnDoS, state)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRoot() {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initialize();
  jlong now = JavaLangSystem_currentTimeMillis();
  jint seed = (((jint) now) + ((jint) (JreURShift64(now, 32)))) | 1;
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRootWithInt_(seed);
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRootWithInt_(jint seed) {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initialize();
  return create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initWithInt_withBoolean_withInt_withBoolean_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_DEFAULT_T_SIZE, true, seed, true);
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_mergeChildWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *childState) {
  jint childCount = ((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *) nil_chk(childState))->count_;
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *currState = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->_tableInfo_)) get];
  if (childCount == ((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *) nil_chk(currState))->count_) {
    return;
  }
  if (childCount > ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_ENTRIES_FOR_REUSE) {
    childState = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_createInitialWithInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_DEFAULT_T_SIZE);
  }
  [self->_tableInfo_ compareAndSetWithId:currState withId:childState];
}

jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint hash_) {
  jint ix = hash_ & (self->_hashSize_ - 1);
  return (JreLShift32(ix, 2));
}

NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (1 == len)) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
    if (len == 0) {
      return nil;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) && (1 == IOSIntArray_Get(hashArea, offset + 3))) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1, jint q2) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (2 == len)) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
    if (len == 0) {
      return nil;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (2 == IOSIntArray_Get(hashArea, offset + 3))) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint q1, jint q2, jint q3) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((q1 == IOSIntArray_Get(hashArea, offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (q3 == IOSIntArray_Get(hashArea, offset + 2)) && (3 == len)) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
    if (len == 0) {
      return nil;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((q1 == IOSIntArray_Get(nil_chk(hashArea), offset)) && (q2 == IOSIntArray_Get(hashArea, offset + 1)) && (q3 == IOSIntArray_Get(hashArea, offset + 2)) && (3 == IOSIntArray_Get(hashArea, offset + 3))) {
      return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
    }
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findSecondaryWithInt_withInt_withIntArray_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint origOffset, jint hash_, IOSIntArray *q, jint qlen) {
  jint offset = self->_tertiaryStart_ + (JreLShift32((JreRShift32(origOffset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  IOSIntArray *hashArea = self->_hashArea_;
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset + bucketSize; offset < end; offset += 4) {
    jint len = IOSIntArray_Get(nil_chk(hashArea), offset + 3);
    if ((hash_ == IOSIntArray_Get(hashArea, offset)) && (qlen == len)) {
      if (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
        return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
      }
    }
    if (len == 0) {
      return nil;
    }
  }
  for (offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self); offset < self->_spilloverEnd_; offset += 4) {
    if ((hash_ == IOSIntArray_Get(nil_chk(hashArea), offset)) && (qlen == IOSIntArray_Get(hashArea, offset + 3))) {
      if (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(self, q, qlen, IOSIntArray_Get(hashArea, offset + 1))) {
        return IOSObjectArray_Get(nil_chk(self->_names_), JreRShift32(offset, 2));
      }
    }
  }
  return nil;
}

jboolean ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongNameWithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *q, jint qlen, jint spillOffset) {
  IOSIntArray *hashArea = self->_hashArea_;
  jint ix = 0;
  switch (qlen) {
    default:
    return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongName2WithIntArray_withInt_withInt_(self, q, qlen, spillOffset);
    case 8:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 7:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 6:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 5:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    case 4:
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(hashArea), spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
    if (IOSIntArray_Get(q, ix++) != IOSIntArray_Get(hashArea, spillOffset++)) return false;
  }
  return true;
}

jboolean ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyLongName2WithIntArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *q, jint qlen, jint spillOffset) {
  jint ix = 0;
  do {
    if (IOSIntArray_Get(nil_chk(q), ix++) != IOSIntArray_Get(nil_chk(self->_hashArea_), spillOffset++)) {
      return false;
    }
  }
  while (ix < qlen);
  return true;
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self) {
  if (self->_count_ > (JreRShift32(self->_hashSize_, 1))) {
    jint spillCount = JreRShift32((self->_spilloverEnd_ - ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self)), 2);
    if ((spillCount > (JreRShift32(1 + self->_count_, 7))) || (self->_count_ > (self->_hashSize_ * 0.80))) {
      self->_needRehash_ = true;
    }
  }
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifySharing(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self) {
  if (self->_hashShared_) {
    JreStrongAssign(&self->_hashArea_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->_hashArea_, ((IOSIntArray *) nil_chk(self->_hashArea_))->size_));
    JreStrongAssign(&self->_names_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->_names_, ((IOSObjectArray *) nil_chk(self->_names_))->size_));
    self->_hashShared_ = false;
    ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__verifyNeedForRehash(self);
  }
  if (self->_needRehash_) {
    ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_rehash(self);
  }
}

jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__findOffsetForAddWithInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jint hash_) {
  jint offset = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcOffsetWithInt_(self, hash_);
  IOSIntArray *hashArea = self->_hashArea_;
  if (IOSIntArray_Get(nil_chk(hashArea), offset + 3) == 0) {
    return offset;
  }
  jint offset2 = self->_secondaryStart_ + (JreLShift32((JreRShift32(offset, 3)), 2));
  if (IOSIntArray_Get(hashArea, offset2 + 3) == 0) {
    return offset2;
  }
  offset2 = self->_tertiaryStart_ + (JreLShift32((JreRShift32(offset, (self->_tertiaryShift_ + 2))), self->_tertiaryShift_));
  jint bucketSize = (JreLShift32(1, self->_tertiaryShift_));
  for (jint end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
    if (IOSIntArray_Get(hashArea, offset2 + 3) == 0) {
      return offset2;
    }
  }
  offset = self->_spilloverEnd_;
  self->_spilloverEnd_ += 4;
  jint end = (JreLShift32(self->_hashSize_, 3));
  if (self->_spilloverEnd_ >= end) {
    if (self->_failOnDoS_) {
      [self _reportTooManyCollisions];
    }
    self->_needRehash_ = true;
  }
  return offset;
}

jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__appendLongNameWithIntArray_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, IOSIntArray *quads, jint qlen) {
  jint start = self->_longNameOffset_;
  if ((start + qlen) > ((IOSIntArray *) nil_chk(self->_hashArea_))->size_) {
    jint toAdd = (start + qlen) - self->_hashArea_->size_;
    jint minAdd = JavaLangMath_minWithInt_withInt_(4096, self->_hashSize_);
    jint newSize = ((IOSIntArray *) nil_chk(self->_hashArea_))->size_ + JavaLangMath_maxWithInt_withInt_(toAdd, minAdd);
    JreStrongAssign(&self->_hashArea_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->_hashArea_, newSize));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(quads, 0, self->_hashArea_, start, qlen);
  self->_longNameOffset_ += qlen;
  return start;
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_rehash(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self) {
  self->_needRehash_ = false;
  self->_hashShared_ = false;
  IOSIntArray *oldHashArea = self->_hashArea_;
  IOSObjectArray *oldNames = self->_names_;
  jint oldSize = self->_hashSize_;
  jint oldCount = self->_count_;
  jint newSize = oldSize + oldSize;
  jint oldEnd = self->_spilloverEnd_;
  if (newSize > ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_T_SIZE) {
    ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_nukeSymbolsWithBoolean_(self, true);
    return;
  }
  JreStrongAssignAndConsume(&self->_hashArea_, [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(oldHashArea))->size_ + (JreLShift32(oldSize, 3))]);
  self->_hashSize_ = newSize;
  self->_secondaryStart_ = (JreLShift32(newSize, 2));
  self->_tertiaryStart_ = self->_secondaryStart_ + (JreRShift32(self->_secondaryStart_, 1));
  self->_tertiaryShift_ = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcTertiaryShiftWithInt_(newSize);
  JreStrongAssignAndConsume(&self->_names_, [IOSObjectArray newArrayWithLength:JreLShift32(((IOSObjectArray *) nil_chk(oldNames))->size_, 1) type:NSString_class_()]);
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_nukeSymbolsWithBoolean_(self, false);
  jint copyCount = 0;
  IOSIntArray *q = [IOSIntArray arrayWithLength:16];
  for (jint offset = 0, end = oldEnd; offset < end; offset += 4) {
    jint len = IOSIntArray_Get(oldHashArea, offset + 3);
    if (len == 0) {
      continue;
    }
    ++copyCount;
    NSString *name = IOSObjectArray_Get(oldNames, JreRShift32(offset, 2));
    {
      jint qoff;
      switch (len) {
        case 1:
        *IOSIntArray_GetRef(q, 0) = IOSIntArray_Get(oldHashArea, offset);
        [self addNameWithNSString:name withIntArray:q withInt:1];
        break;
        case 2:
        *IOSIntArray_GetRef(q, 0) = IOSIntArray_Get(oldHashArea, offset);
        *IOSIntArray_GetRef(q, 1) = IOSIntArray_Get(oldHashArea, offset + 1);
        [self addNameWithNSString:name withIntArray:q withInt:2];
        break;
        case 3:
        *IOSIntArray_GetRef(q, 0) = IOSIntArray_Get(oldHashArea, offset);
        *IOSIntArray_GetRef(q, 1) = IOSIntArray_Get(oldHashArea, offset + 1);
        *IOSIntArray_GetRef(q, 2) = IOSIntArray_Get(oldHashArea, offset + 2);
        [self addNameWithNSString:name withIntArray:q withInt:3];
        break;
        default:
        if (len > q->size_) {
          q = [IOSIntArray arrayWithLength:len];
        }
        qoff = IOSIntArray_Get(oldHashArea, offset + 1);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldHashArea, qoff, q, 0, len);
        [self addNameWithNSString:name withIntArray:q withInt:len];
        break;
      }
    }
  }
  if (copyCount != oldCount) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Failed rehash(): old count=", oldCount, @", copyCount=", copyCount));
  }
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_nukeSymbolsWithBoolean_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self, jboolean fill) {
  self->_count_ = 0;
  self->_spilloverEnd_ = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(self);
  self->_longNameOffset_ = JreLShift32(self->_hashSize_, 3);
  if (fill) {
    JavaUtilArrays_fillWithIntArray_withInt_(self->_hashArea_, 0);
    JavaUtilArrays_fillWithNSObjectArray_withId_(self->_names_, nil);
  }
}

jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__spilloverStart(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *self) {
  jint offset = self->_hashSize_;
  return (JreLShift32(offset, 3)) - offset;
}

jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcTertiaryShiftWithInt_(jint primarySlots) {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_initialize();
  jint tertSlots = JreRShift32((primarySlots), 2);
  if (tertSlots < 64) {
    return 4;
  }
  if (tertSlots <= 256) {
    return 5;
  }
  if (tertSlots <= 1024) {
    return 6;
  }
  return 7;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer)

@implementation ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo

- (instancetype __nonnull)initWithInt:(jint)size
                              withInt:(jint)count
                              withInt:(jint)tertiaryShift
                         withIntArray:(IOSIntArray *)mainHash
                    withNSStringArray:(IOSObjectArray *)names
                              withInt:(jint)spilloverEnd
                              withInt:(jint)longNameOffset {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(self, size, count, tertiaryShift, mainHash, names, spilloverEnd, longNameOffset);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)src {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(self, src);
  return self;
}

+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *)createInitialWithInt:(jint)sz {
  return ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_createInitialWithInt_(sz);
}

- (void)dealloc {
  RELEASE_(mainHash_);
  RELEASE_(names_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withIntArray:withNSStringArray:withInt:withInt:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:);
  methods[2].selector = @selector(createInitialWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tertiaryShift_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "mainHash_", "[I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "names_", "[LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "spilloverEnd_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "longNameOffset_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III[I[LNSString;II", "LComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", "createInitial", "I" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo = { "TableInfo", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x1a, 3, 7, 1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo;
}

@end

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *self, jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset) {
  NSObject_init(self);
  self->size_ = size;
  self->count_ = count;
  self->tertiaryShift_ = tertiaryShift;
  JreStrongAssign(&self->mainHash_, mainHash);
  JreStrongAssign(&self->names_, names);
  self->spilloverEnd_ = spilloverEnd;
  self->longNameOffset_ = longNameOffset;
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_, size, count, tertiaryShift, mainHash, names, spilloverEnd, longNameOffset)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(jint size, jint count, jint tertiaryShift, IOSIntArray *mainHash, IOSObjectArray *names, jint spilloverEnd, jint longNameOffset) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_, size, count, tertiaryShift, mainHash, names, spilloverEnd, longNameOffset)
}

void ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *self, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src) {
  NSObject_init(self);
  self->size_ = ((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(src))->_hashSize_;
  self->count_ = src->_count_;
  self->tertiaryShift_ = src->_tertiaryShift_;
  JreStrongAssign(&self->mainHash_, src->_hashArea_);
  JreStrongAssign(&self->names_, src->_names_);
  self->spilloverEnd_ = src->_spilloverEnd_;
  self->longNameOffset_ = src->_longNameOffset_;
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *new_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_, src)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *src) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo, initWithComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_, src)
}

ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_createInitialWithInt_(jint sz) {
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initialize();
  jint hashAreaSize = JreLShift32(sz, 3);
  jint tertShift = ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcTertiaryShiftWithInt_(sz);
  return create_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo_initWithInt_withInt_withInt_withIntArray_withNSStringArray_withInt_withInt_(sz, 0, tertShift, [IOSIntArray arrayWithLength:hashAreaSize], [IOSObjectArray arrayWithLength:JreLShift32(sz, 1) type:NSString_class_()], hashAreaSize - sz, hashAreaSize);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_TableInfo)
