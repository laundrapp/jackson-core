//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser || defined(INCLUDE_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser))
#define ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_

#define RESTRICT_ComFasterxmlJacksonCoreBaseParserBase 1
#define INCLUDE_ComFasterxmlJacksonCoreBaseParserBase 1
#include "com/fasterxml/jackson/core/base/ParserBase.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaLangBoolean;
@protocol ComFasterxmlJacksonCoreObjectReadContext;
@protocol JavaIoDataInput;

/*!
 @brief This is a concrete implementation of <code>JsonParser</code>, which is
  based on a <code>java.io.DataInput</code> as the input source.
 <p>
  Due to limitations in look-ahead (basically there's none), as well
  as overhead of reading content mostly byte-by-byte,
  there are some
  minor differences from regular streaming parsing. Specifically:
 <ul>
  <li>Input location is not being tracked, as offsets would need to
    be updated for each read from all over the place; if caller wants
    this information, it has to track this with <code>DataInput</code>.
   </li>
  <li>As a consequence linefeed handling is removed so all white-space is
     equal; and checks are simplified NOT to check for control characters  
 </li>
  </ul>
 */
@interface ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser : ComFasterxmlJacksonCoreBaseParserBase {
 @public
  /*!
   @brief Symbol table that contains field names encountered so far
   */
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *_symbols_;
  /*!
   @brief Temporary buffer used for name parsing.
   */
  IOSIntArray *_quadBuffer_;
  /*!
   @brief Flag that indicates that the current token has not yet
  been fully processed, and needs to be finished for
  some access (or skipped to obtain the next token)
   */
  jboolean _tokenIncomplete_;
  id<JavaIoDataInput> _inputData_;
  /*!
   @brief Sometimes we need buffering for just a single byte we read but
  have to "push back"
   */
  jint _nextByte_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)features
                                                       withJavaIoDataInput:(id<JavaIoDataInput>)inputData
                      withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym
                                                                   withInt:(jint)firstByte;

- (void)finishToken;

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation;

- (id)getInputSource;

- (NSString *)getText;

- (jint)getTextWithJavaIoWriter:(JavaIoWriter *)writer;

- (IOSCharArray *)getTextCharacters;

- (jint)getTextLength;

- (jint)getTextOffset;

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation;

- (jint)getValueAsInt;

- (jint)getValueAsIntWithInt:(jint)defValue;

- (NSString *)getValueAsString;

- (NSString *)getValueAsStringWithNSString:(NSString *)defValue;

- (JavaLangBoolean *)nextBooleanValue;

- (NSString *)nextFieldName;

- (jint)nextIntValueWithInt:(jint)defaultValue;

- (jlong)nextLongValueWithLong:(jlong)defaultValue;

- (NSString *)nextTextValue;

/*!
 @return Next token from the stream, if any found, or null
    to indicate end-of-input
 */
- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Protected

- (void)_closeInput;

/*!
 @brief Efficient handling for incremental parsing of base64-encoded
  textual content.
 */
- (IOSByteArray *)_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

- (jint)_decodeCharForErrorWithInt:(jint)firstByte;

- (jchar)_decodeEscaped;

- (void)_finishString;

- (NSString *)_getText2WithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t;

- (ComFasterxmlJacksonCoreJsonToken *)_handleApos;

/*!
 @brief Method called if expected numeric value (due to leading sign) does not
  look like a number
 */
- (ComFasterxmlJacksonCoreJsonToken *)_handleInvalidNumberStartWithInt:(jint)ch
                                                           withBoolean:(jboolean)neg;

/*!
 @brief Method called when we see non-white space character other
  than double quote, when expecting a field name.
 In standard mode will just throw an exception; but
  in non-standard modes may be able to parse name.
 */
- (NSString *)_handleOddNameWithInt:(jint)ch;

/*!
 @brief Method for handling cases where first non-space character
  of an expected value token is not legal for standard JSON content.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_handleUnexpectedValueWithInt:(jint)c;

- (void)_matchTokenWithNSString:(NSString *)matchStr
                        withInt:(jint)i;

- (NSString *)_parseAposName;

- (NSString *)_parseNameWithInt:(jint)i;

- (ComFasterxmlJacksonCoreJsonToken *)_parseNegNumber;

/*!
 @brief Initial parsing method for number values.It needs to be able
  to parse enough input to be able to determine whether the
  value is to be considered a simple integer value, or a more
  generic decimal value: latter of which needs to be expressed
  as a floating point number.
 The basic rule is that if the number
  has no fractional or exponential part, it is an integer; otherwise
  a floating point number.
 <p>
  Because much of input has to be processed in any case, no partial
  parsing is done: all input text will be stored for further
  processing. However, actual numeric value conversion will be
  deferred, since it is usually the most complicated and costliest
  part of processing.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_parsePosNumberWithInt:(jint)c;

- (jint)_readBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                              withByteArray:(IOSByteArray *)buffer;

/*!
 @brief Method called to release internal buffers owned by the base
  reader.This may be called along with <code>_closeInput</code> (for
  example, when explicitly closing this reader instance), or
  separately (if need be).
 */
- (void)_releaseBuffers;

- (void)_reportInvalidCharWithInt:(jint)c;

- (void)_reportInvalidInitialWithInt:(jint)mask;

- (void)_reportInvalidTokenWithInt:(jint)ch
                      withNSString:(NSString *)matchedPart;

- (void)_reportInvalidTokenWithInt:(jint)ch
                      withNSString:(NSString *)matchedPart
                      withNSString:(NSString *)msg;

/*!
 @brief Method called to skim through rest of unparsed String value,
  if it is not needed.This can be done bit faster if contents
  need not be stored for future access.
 */
- (void)_skipString;

/*!
 @brief Slower parsing method which is generally branched to when
  an escape sequence is detected (or alternatively for long
  names, one crossing input buffer boundary).
 Needs to be able to handle more exceptional cases, gets slower,
  and hance is offlined to a separate method.
 */
- (NSString *)parseEscapedNameWithIntArray:(IOSIntArray *)quads
                                   withInt:(jint)qlen
                                   withInt:(jint)currQuad
                                   withInt:(jint)ch
                                   withInt:(jint)currQuadBytes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)arg0
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)arg1
                                                                   withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, _symbols_, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, _quadBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, _inputData_, id<JavaIoDataInput>)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_get_BYTE_LF(void);
#define ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_BYTE_LF 10
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, BYTE_LF, jbyte)

inline IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_get__icLatin1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser__icLatin1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser, _icLatin1, IOSIntArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *new_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser *create_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoDataInput_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withInt_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, id<JavaIoDataInput> inputData, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, jint firstByte);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8DataInputJsonParser")
