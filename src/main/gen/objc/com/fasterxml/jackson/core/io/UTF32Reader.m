//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/io/UTF32Reader.h"
#include "java/io/CharConversionException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"

@interface ComFasterxmlJacksonCoreIoUTF32Reader ()

- (void)reportUnexpectedEOFWithInt:(jint)gotBytes
                           withInt:(jint)needed;

- (void)reportInvalidWithInt:(jint)value
                     withInt:(jint)offset
                withNSString:(NSString *)msg;

/*!
 @param available Number of "unused" bytes in the input buffer
 @return True, if enough bytes were read to allow decoding of at least
    one full character; false if EOF was encountered instead.
 */
- (jboolean)loadMoreWithInt:(jint)available;

/*!
 @brief This method should be called along with (or instead of) normal
  close.After calling this method, no further reads should be tried.
 Method will try to recycle read buffers (if any).
 */
- (void)freeBuffers;

- (void)reportBoundsWithCharArray:(IOSCharArray *)cbuf
                          withInt:(jint)start
                          withInt:(jint)len;

- (void)reportStrangeStream;

@end

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoUTF32Reader_reportUnexpectedEOFWithInt_withInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint gotBytes, jint needed);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoUTF32Reader_reportInvalidWithInt_withInt_withNSString_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint value, jint offset, NSString *msg);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreIoUTF32Reader_loadMoreWithInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint available);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(ComFasterxmlJacksonCoreIoUTF32Reader *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoUTF32Reader_reportBoundsWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, IOSCharArray *cbuf, jint start, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreIoUTF32Reader_reportStrangeStream(ComFasterxmlJacksonCoreIoUTF32Reader *self);

@implementation ComFasterxmlJacksonCoreIoUTF32Reader

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                               withJavaIoInputStream:(JavaIoInputStream *)inArg
                                                       withByteArray:(IOSByteArray *)buf
                                                             withInt:(jint)ptr
                                                             withInt:(jint)len
                                                         withBoolean:(jboolean)isBigEndian {
  ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(self, ctxt, inArg, buf, ptr, len, isBigEndian);
  return self;
}

- (void)close {
  JavaIoInputStream *in = _in_;
  if (in != nil) {
    JreStrongAssign(&_in_, nil);
    ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(self);
    [in close];
  }
}

- (jint)read {
  if (_tmpBuf_ == nil) {
    JreStrongAssignAndConsume(&_tmpBuf_, [IOSCharArray newArrayWithLength:1]);
  }
  if ([self readWithCharArray:_tmpBuf_ withInt:0 withInt:1] < 1) {
    return -1;
  }
  return IOSCharArray_Get(nil_chk(_tmpBuf_), 0);
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)start
                  withInt:(jint)len {
  if (_buffer_ == nil) {
    return -1;
  }
  if (len < 1) {
    return len;
  }
  if (start < 0 || (start + len) > ((IOSCharArray *) nil_chk(cbuf))->size_) {
    ComFasterxmlJacksonCoreIoUTF32Reader_reportBoundsWithCharArray_withInt_withInt_(self, cbuf, start, len);
  }
  jint outPtr = start;
  jint outEnd = len + start;
  if (_surrogate_ != ComFasterxmlJacksonCoreIoUTF32Reader_NC) {
    *IOSCharArray_GetRef(nil_chk(cbuf), outPtr++) = _surrogate_;
    _surrogate_ = ComFasterxmlJacksonCoreIoUTF32Reader_NC;
  }
  else {
    jint left = (_length_ - _ptr_);
    if (left < 4) {
      if (!ComFasterxmlJacksonCoreIoUTF32Reader_loadMoreWithInt_(self, left)) {
        if (left == 0) {
          return -1;
        }
        ComFasterxmlJacksonCoreIoUTF32Reader_reportUnexpectedEOFWithInt_withInt_(self, _length_ - _ptr_, 4);
      }
    }
  }
  jint lastValidInputStart = (_length_ - 4);
  while (outPtr < outEnd) {
    jint ptr = _ptr_;
    jint hi;
    jint lo;
    if (_bigEndian_) {
      hi = (JreLShift32(IOSByteArray_Get(nil_chk(_buffer_), ptr), 8)) | (IOSByteArray_Get(_buffer_, ptr + 1) & (jint) 0xFF);
      lo = (JreLShift32((IOSByteArray_Get(_buffer_, ptr + 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(_buffer_, ptr + 3) & (jint) 0xFF);
    }
    else {
      lo = (IOSByteArray_Get(nil_chk(_buffer_), ptr) & (jint) 0xFF) | (JreLShift32((IOSByteArray_Get(_buffer_, ptr + 1) & (jint) 0xFF), 8));
      hi = (IOSByteArray_Get(_buffer_, ptr + 2) & (jint) 0xFF) | (JreLShift32(IOSByteArray_Get(_buffer_, ptr + 3), 8));
    }
    _ptr_ += 4;
    if (hi != 0) {
      hi &= (jint) 0xFFFF;
      jint ch = (JreLShift32((hi - 1), 16)) | lo;
      if (hi > (jint) 0x10) {
        ComFasterxmlJacksonCoreIoUTF32Reader_reportInvalidWithInt_withInt_withNSString_(self, ch, outPtr - start, NSString_java_formatWithNSString_withNSObjectArray_(@" (above 0x%08x)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComFasterxmlJacksonCoreIoUTF32Reader_LAST_VALID_UNICODE_CHAR) } count:1 type:NSObject_class_()]));
      }
      *IOSCharArray_GetRef(nil_chk(cbuf), outPtr++) = (jchar) ((jint) 0xD800 + (JreRShift32(ch, 10)));
      lo = ((jint) 0xDC00 | (ch & (jint) 0x03FF));
      if (outPtr >= outEnd) {
        _surrogate_ = (jchar) ch;
        goto break_main_loop;
      }
    }
    *IOSCharArray_GetRef(nil_chk(cbuf), outPtr++) = (jchar) lo;
    if (_ptr_ > lastValidInputStart) {
      goto break_main_loop;
    }
  }
  break_main_loop: ;
  jint actualLen = (outPtr - start);
  _charCount_ += actualLen;
  return actualLen;
}

- (void)reportUnexpectedEOFWithInt:(jint)gotBytes
                           withInt:(jint)needed {
  ComFasterxmlJacksonCoreIoUTF32Reader_reportUnexpectedEOFWithInt_withInt_(self, gotBytes, needed);
}

- (void)reportInvalidWithInt:(jint)value
                     withInt:(jint)offset
                withNSString:(NSString *)msg {
  ComFasterxmlJacksonCoreIoUTF32Reader_reportInvalidWithInt_withInt_withNSString_(self, value, offset, msg);
}

- (jboolean)loadMoreWithInt:(jint)available {
  return ComFasterxmlJacksonCoreIoUTF32Reader_loadMoreWithInt_(self, available);
}

- (void)freeBuffers {
  ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(self);
}

- (void)reportBoundsWithCharArray:(IOSCharArray *)cbuf
                          withInt:(jint)start
                          withInt:(jint)len {
  ComFasterxmlJacksonCoreIoUTF32Reader_reportBoundsWithCharArray_withInt_withInt_(self, cbuf, start, len);
}

- (void)reportStrangeStream {
  ComFasterxmlJacksonCoreIoUTF32Reader_reportStrangeStream(self);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_in_);
  RELEASE_(_buffer_);
  RELEASE_(_tmpBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withJavaIoInputStream:withByteArray:withInt:withInt:withBoolean:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[4].selector = @selector(reportUnexpectedEOFWithInt:withInt:);
  methods[5].selector = @selector(reportInvalidWithInt:withInt:withNSString:);
  methods[6].selector = @selector(loadMoreWithInt:);
  methods[7].selector = @selector(freeBuffers);
  methods[8].selector = @selector(reportBoundsWithCharArray:withInt:withInt:);
  methods[9].selector = @selector(reportStrangeStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LAST_VALID_UNICODE_CHAR", "I", .constantValue.asInt = ComFasterxmlJacksonCoreIoUTF32Reader_LAST_VALID_UNICODE_CHAR, 0x1c, -1, -1, -1, -1 },
    { "NC", "C", .constantValue.asUnichar = ComFasterxmlJacksonCoreIoUTF32Reader_NC, 0x1c, -1, -1, -1, -1 },
    { "_context_", "LComFasterxmlJacksonCoreIoIOContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_buffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_ptr_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_length_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_bigEndian_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_surrogate_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_charCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_byteCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_managedBuffers_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_tmpBuf_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreIoIOContext;LJavaIoInputStream;[BIIZ", "LJavaIoIOException;", "read", "[CII", "reportUnexpectedEOF", "II", "reportInvalid", "IILNSString;", "loadMore", "I", "reportBounds" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreIoUTF32Reader = { "UTF32Reader", "com.fasterxml.jackson.core.io", ptrTable, methods, fields, 7, 0x1, 10, 13, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreIoUTF32Reader;
}

@end

void ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoUTF32Reader *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian) {
  JavaIoReader_init(self);
  self->_surrogate_ = ComFasterxmlJacksonCoreIoUTF32Reader_NC;
  JreStrongAssign(&self->_context_, ctxt);
  JreStrongAssign(&self->_in_, inArg);
  JreStrongAssign(&self->_buffer_, buf);
  self->_ptr_ = ptr;
  self->_length_ = len;
  self->_bigEndian_ = isBigEndian;
  self->_managedBuffers_ = (inArg != nil);
}

ComFasterxmlJacksonCoreIoUTF32Reader *new_ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreIoUTF32Reader, initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_, ctxt, inArg, buf, ptr, len, isBigEndian)
}

ComFasterxmlJacksonCoreIoUTF32Reader *create_ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreIoUTF32Reader, initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_, ctxt, inArg, buf, ptr, len, isBigEndian)
}

void ComFasterxmlJacksonCoreIoUTF32Reader_reportUnexpectedEOFWithInt_withInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint gotBytes, jint needed) {
  jint bytePos = self->_byteCount_ + gotBytes;
  jint charPos = self->_charCount_;
  @throw create_JavaIoCharConversionException_initWithNSString_(JreStrcat("$I$I$I$IC", @"Unexpected EOF in the middle of a 4-byte UTF-32 char: got ", gotBytes, @", needed ", needed, @", at char #", charPos, @", byte #", bytePos, ')'));
}

void ComFasterxmlJacksonCoreIoUTF32Reader_reportInvalidWithInt_withInt_withNSString_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint value, jint offset, NSString *msg) {
  jint bytePos = self->_byteCount_ + self->_ptr_ - 1;
  jint charPos = self->_charCount_ + offset;
  @throw create_JavaIoCharConversionException_initWithNSString_(JreStrcat("$$$$I$IC", @"Invalid UTF-32 character 0x", JavaLangInteger_toHexStringWithInt_(value), msg, @" at char #", charPos, @", byte #", bytePos, ')'));
}

jboolean ComFasterxmlJacksonCoreIoUTF32Reader_loadMoreWithInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, jint available) {
  self->_byteCount_ += (self->_length_ - available);
  if (available > 0) {
    if (self->_ptr_ > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_buffer_, self->_ptr_, self->_buffer_, 0, available);
      self->_ptr_ = 0;
    }
    self->_length_ = available;
  }
  else {
    self->_ptr_ = 0;
    jint count = (self->_in_ == nil) ? -1 : [((JavaIoInputStream *) nil_chk(self->_in_)) readWithByteArray:self->_buffer_];
    if (count < 1) {
      self->_length_ = 0;
      if (count < 0) {
        if (self->_managedBuffers_) {
          ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(self);
        }
        return false;
      }
      ComFasterxmlJacksonCoreIoUTF32Reader_reportStrangeStream(self);
    }
    self->_length_ = count;
  }
  while (self->_length_ < 4) {
    jint count = (self->_in_ == nil) ? -1 : [((JavaIoInputStream *) nil_chk(self->_in_)) readWithByteArray:self->_buffer_ withInt:self->_length_ withInt:((IOSByteArray *) nil_chk(self->_buffer_))->size_ - self->_length_];
    if (count < 1) {
      if (count < 0) {
        if (self->_managedBuffers_) {
          ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(self);
        }
        ComFasterxmlJacksonCoreIoUTF32Reader_reportUnexpectedEOFWithInt_withInt_(self, self->_length_, 4);
      }
      ComFasterxmlJacksonCoreIoUTF32Reader_reportStrangeStream(self);
    }
    self->_length_ += count;
  }
  return true;
}

void ComFasterxmlJacksonCoreIoUTF32Reader_freeBuffers(ComFasterxmlJacksonCoreIoUTF32Reader *self) {
  IOSByteArray *buf = self->_buffer_;
  if (buf != nil) {
    JreStrongAssign(&self->_buffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(self->_context_)) releaseReadIOBufferWithByteArray:buf];
  }
}

void ComFasterxmlJacksonCoreIoUTF32Reader_reportBoundsWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreIoUTF32Reader *self, IOSCharArray *cbuf, jint start, jint len) {
  @throw create_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$ICI$IC", @"read(buf,", start, ',', len, @"), cbuf[", ((IOSCharArray *) nil_chk(cbuf))->size_, ']'));
}

void ComFasterxmlJacksonCoreIoUTF32Reader_reportStrangeStream(ComFasterxmlJacksonCoreIoUTF32Reader *self) {
  @throw create_JavaIoIOException_initWithNSString_(@"Strange I/O stream, returned 0 bytes on read");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreIoUTF32Reader)
