//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/ThreadLocalBufferManager.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/util/BufferRecycler.h"
#include "com/fasterxml/jackson/core/util/ThreadLocalBufferManager.h"
#include "java/lang/Boolean.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface ComFasterxmlJacksonCoreUtilThreadLocalBufferManager () {
 @public
  /*!
   @brief A lock to make sure releaseBuffers is only executed by one thread at a time
  since it iterates over and modifies the allSoftBufRecyclers.
   */
  id RELEASE_LOCK_;
  /*!
   @brief A set of all SoftReferences to all BufferRecyclers to be able to release them on shutdown.
   'All' means the ones created by this class, in this classloader.
  There may be more from other classloaders.
  We use a HashSet to have quick O(1) add and remove operations.
 <p>
  NOTE: assumption is that <code>SoftReference</code> has its <code>equals()</code> and 
 <code>hashCode()</code> implementations defined so that they use object identity, so
  we do not need to use something like <code>IdentityHashMap</code>
   */
  id<JavaUtilMap> _trackedRecyclers_;
  /*!
   @brief Queue where gc will put just-cleared SoftReferences, previously referencing BufferRecyclers.
   We use it to remove the cleared softRefs from the above set.
   */
  JavaLangRefReferenceQueue *_refQueue_;
}

/*!
 @brief Remove cleared (inactive) SoftRefs from our set.Gc may have cleared one or more,
  and made them inactive.
 We minimize contention by keeping synchronized sections short:
  the poll/remove methods
 */
- (void)removeSoftRefsClearedByGc;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager, RELEASE_LOCK_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager, _trackedRecyclers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager, _refQueue_, JavaLangRefReferenceQueue *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_removeSoftRefsClearedByGc(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *self);

/*!
 @brief ThreadLocalBufferManagerHolder uses the thread-safe initialize-on-demand, holder class idiom that implicitly
  incorporates lazy initialization by declaring a static variable within a static Holder inner class
 */
@interface ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder : NSObject

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder)

inline ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_get_manager(void);
static ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_manager;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder, manager, ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *new_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *create_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder)

@implementation ComFasterxmlJacksonCoreUtilThreadLocalBufferManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *)instance {
  return ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_instance();
}

- (jint)releaseBuffers {
  @synchronized(RELEASE_LOCK_) {
    jint count = 0;
    ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_removeSoftRefsClearedByGc(self);
    for (JavaLangRefSoftReference * __strong ref in nil_chk([((id<JavaUtilMap>) nil_chk(_trackedRecyclers_)) keySet])) {
      [((JavaLangRefSoftReference *) nil_chk(ref)) clear];
      ++count;
    }
    [_trackedRecyclers_ clear];
    return count;
  }
}

- (JavaLangRefSoftReference *)wrapAndTrackWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br {
  JavaLangRefSoftReference *newRef;
  newRef = create_JavaLangRefSoftReference_initWithId_withJavaLangRefReferenceQueue_(br, _refQueue_);
  [((id<JavaUtilMap>) nil_chk(_trackedRecyclers_)) putWithId:newRef withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_removeSoftRefsClearedByGc(self);
  return newRef;
}

- (void)removeSoftRefsClearedByGc {
  ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_removeSoftRefsClearedByGc(self);
}

- (void)dealloc {
  RELEASE_(RELEASE_LOCK_);
  RELEASE_(_trackedRecyclers_);
  RELEASE_(_refQueue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreUtilThreadLocalBufferManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRefSoftReference;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(instance);
  methods[2].selector = @selector(releaseBuffers);
  methods[3].selector = @selector(wrapAndTrackWithComFasterxmlJacksonCoreUtilBufferRecycler:);
  methods[4].selector = @selector(removeSoftRefsClearedByGc);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RELEASE_LOCK_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_trackedRecyclers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_refQueue_", "LJavaLangRefReferenceQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "wrapAndTrack", "LComFasterxmlJacksonCoreUtilBufferRecycler;", "(Lcom/fasterxml/jackson/core/util/BufferRecycler;)Ljava/lang/ref/SoftReference<Lcom/fasterxml/jackson/core/util/BufferRecycler;>;", "Ljava/util/Map<Ljava/lang/ref/SoftReference<Lcom/fasterxml/jackson/core/util/BufferRecycler;>;Ljava/lang/Boolean;>;", "Ljava/lang/ref/ReferenceQueue<Lcom/fasterxml/jackson/core/util/BufferRecycler;>;", "LComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilThreadLocalBufferManager = { "ThreadLocalBufferManager", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, 5, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager;
}

@end

void ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_init(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->RELEASE_LOCK_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_trackedRecyclers_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_refQueue_, new_JavaLangRefReferenceQueue_init());
}

ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *new_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager, init)
}

ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *create_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager, init)
}

ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_instance() {
  ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_initialize();
  return JreLoadStatic(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder, manager);
}

void ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_removeSoftRefsClearedByGc(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *self) {
  JavaLangRefSoftReference *clearedSoftRef;
  while ((clearedSoftRef = (JavaLangRefSoftReference *) cast_chk([((JavaLangRefReferenceQueue *) nil_chk(self->_refQueue_)) poll], [JavaLangRefSoftReference class])) != nil) {
    [((id<JavaUtilMap>) nil_chk(self->_trackedRecyclers_)) removeWithId:clearedSoftRef];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder)

@implementation ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "manager", "LComFasterxmlJacksonCoreUtilThreadLocalBufferManager;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_manager, "LComFasterxmlJacksonCoreUtilThreadLocalBufferManager;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder = { "ThreadLocalBufferManagerHolder", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x1a, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_manager, new_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder)
  }
}

@end

void ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *new_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder, init)
}

ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder *create_ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_ThreadLocalBufferManagerHolder)
