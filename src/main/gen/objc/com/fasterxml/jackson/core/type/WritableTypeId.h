//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/type/WritableTypeId.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTypeWritableTypeId
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTypeWritableTypeId

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTypeWritableTypeId_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId || defined(INCLUDE_ComFasterxmlJacksonCoreTypeWritableTypeId))
#define ComFasterxmlJacksonCoreTypeWritableTypeId_

@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion;
@class IOSClass;

/*!
 @brief This is a simple value class used between core streaming and higher level
  databinding to pass information about type ids to write.
 Properties are exposed and mutable on purpose: they are only used for communication
  over serialization of a single value, and neither retained across calls nor shared
  between threads.
 <p>
  Usual usage pattern is such that instance of this class is passed on two calls that are
  needed for outputting type id (and possible additional wrapping, depending on format;
  JSON, for example, requires wrapping as type id is part of regular data): first, a "prefix"
  write (which usually includes actual id), performed before value write; and then
  matching "suffix" write after value serialization.
 @since 2.9
 */
@interface ComFasterxmlJacksonCoreTypeWritableTypeId : NSObject {
 @public
  /*!
   @brief Java object for which type id is being written.Not needed by default handling,
  but may be useful for customized format handling.
   */
  id forValue_;
  /*!
   @brief (optional) Super-type of <code>forValue</code> to use for type id generation (if no
  explicit id passed): used instead of actual class of <code>forValue</code> in cases
  where we do not want to use the "real" type but something more generic, usually
  to work around specific problem with implementation type, or its deserializer.
   */
  IOSClass *forValueType_;
  /*!
   @brief Actual type id to use: usually {link java.lang.String}.
   */
  id id__;
  /*!
   @brief If type id is to be embedded as a regular property, name of the property;
  otherwise `null`.
   <p>
  NOTE: if "wrap-as-Object" is used, this does NOT contain property name to
  use but `null`.
   */
  NSString *asProperty_;
  /*!
   @brief Property used to indicate style of inclusion for this type id, in cases where
  no native type id may be used (either because format has none, like JSON; or
  because use of native type ids is disabled [with YAML]).
   */
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *include_;
  /*!
   @brief Information about intended shape of the value being written (that is, <code>forValue</code>);
  in case of structured values, start token of the structure; for scalars, value token.
   Main difference is between structured values
  (<code>JsonToken.START_ARRAY</code>, <code>JsonToken.START_OBJECT</code>)
  and scalars (<code>JsonToken.VALUE_STRING</code>): specific scalar type may not be
  important for processing.
   */
  ComFasterxmlJacksonCoreJsonToken *valueShape_;
  /*!
   @brief Flag that can be set to indicate that wrapper structure was written (during
  prefix-writing); used to determine if suffix requires matching close markers.
   */
  jboolean wrapperWritten_;
  /*!
   @brief Optional additional information that generator may add during "prefix write",
  to be available on matching "suffix write".
   */
  id extra_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Constructor used when calling a method for generating and writing Type Id,
  but where actual type to use for generating id is NOT the type of value
  (but its supertype).
 */
- (instancetype __nonnull)initWithId:(id)value
                        withIOSClass:(IOSClass *)valueType0
withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape0;

/*!
 @brief Constructor used when calling a method for generating and writing Type Id;
  caller only knows value object and its intended shape.
 */
- (instancetype __nonnull)initWithId:(id)value
withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape0;

/*!
 @brief Constructor used when calling a method for writing Type Id;
  caller knows value object, its intended shape as well as id to
  use; but not details of wrapping (if any).
 */
- (instancetype __nonnull)initWithId:(id)value
withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)valueShape0
                              withId:(id)id0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTypeWritableTypeId)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, forValue_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, forValueType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, id__, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, asProperty_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, include_, ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, valueShape_, ComFasterxmlJacksonCoreJsonToken *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeWritableTypeId, extra_, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeWritableTypeId_init(ComFasterxmlJacksonCoreTypeWritableTypeId *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *new_ComFasterxmlJacksonCoreTypeWritableTypeId_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *create_ComFasterxmlJacksonCoreTypeWritableTypeId_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreTypeWritableTypeId *self, id value, ComFasterxmlJacksonCoreJsonToken *valueShape0);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *new_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_(id value, ComFasterxmlJacksonCoreJsonToken *valueShape0) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *create_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_(id value, ComFasterxmlJacksonCoreJsonToken *valueShape0);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withIOSClass_withComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreTypeWritableTypeId *self, id value, IOSClass *valueType0, ComFasterxmlJacksonCoreJsonToken *valueShape0);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *new_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withIOSClass_withComFasterxmlJacksonCoreJsonToken_(id value, IOSClass *valueType0, ComFasterxmlJacksonCoreJsonToken *valueShape0) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *create_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withIOSClass_withComFasterxmlJacksonCoreJsonToken_(id value, IOSClass *valueType0, ComFasterxmlJacksonCoreJsonToken *valueShape0);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_withId_(ComFasterxmlJacksonCoreTypeWritableTypeId *self, id value, ComFasterxmlJacksonCoreJsonToken *valueShape0, id id0);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *new_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_withId_(id value, ComFasterxmlJacksonCoreJsonToken *valueShape0, id id0) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId *create_ComFasterxmlJacksonCoreTypeWritableTypeId_initWithId_withComFasterxmlJacksonCoreJsonToken_withId_(id value, ComFasterxmlJacksonCoreJsonToken *valueShape0, id id0);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTypeWritableTypeId)

#endif

#if !defined (ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId || defined(INCLUDE_ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion))
#define ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum) {
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum_WRAPPER_ARRAY = 0,
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum_WRAPPER_OBJECT = 1,
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum_METADATA_PROPERTY = 2,
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum_PAYLOAD_PROPERTY = 3,
  ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_Enum_PARENT_PROPERTY = 4,
};

/*!
 @brief Enumeration of values that matches enum `As` from annotation
  `JsonTypeInfo`: separate definition to avoid dependency between
  streaming core and annotations packages; also allows more flexibility
  in case new values needed at this level of internal API.
 <p>
  NOTE: in most cases this only matters with formats that do NOT have native
  type id capabilities, and require type id to be included within regular
  data (whether exposed as Java properties or not). Formats with native
  types usually use native type id functionality regardless, unless
  overridden by a feature to use "non-native" type inclusion.
 */
@interface ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion : JavaLangEnum

#pragma mark Public

- (jboolean)requiresObjectContext;

+ (ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_values_[];

/*!
 @brief Inclusion as wrapper Array (1st element type id, 2nd element value).
 <p>
  Corresponds to <code>JsonTypeInfo.As.WRAPPER_ARRAY</code>.
 */
inline ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_get_WRAPPER_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion, WRAPPER_ARRAY)

/*!
 @brief Inclusion as wrapper Object that has one key/value pair where type id
  is the key for typed value.
 <p>
  Corresponds to <code>JsonTypeInfo.As.WRAPPER_OBJECT</code>.
 */
inline ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_get_WRAPPER_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion, WRAPPER_OBJECT)

/*!
 @brief Inclusion as a property within Object to write, but logically as separate
  metadata that is not exposed as payload to caller: that is, does not match
  any of visible properties value object has.
 <p>
  NOTE: if shape of typed value to write is NOT Object, will instead use 
 <code>WRAPPER_ARRAY</code> inclusion.
 <p>
  Corresponds to <code>JsonTypeInfo.As.PROPERTY</code>.
 */
inline ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_get_METADATA_PROPERTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion, METADATA_PROPERTY)

/*!
 @brief Inclusion as a "regular" property within Object to write; this implies that
  its value should come from regular POJO property on serialization, and
  be deserialized into such property.This handling, however, is up to databinding.
 <p>
  Regarding handling, type id is ONLY written as native type id; if no native
  type ids available, caller is assumed to handle output some other way.
  This is different from <code>METADATA_PROPERTY</code>.
 <p>
  NOTE: if shape of typed value to write is NOT Object, will instead use 
 <code>WRAPPER_ARRAY</code> inclusion.
 <p>
  Corresponds to <code>JsonTypeInfo.As.EXISTING_PROPERTY</code>.
 */
inline ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_get_PAYLOAD_PROPERTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion, PAYLOAD_PROPERTY)

/*!
 @brief Inclusion as a property within "parent" Object of value Object to write.
 This typically requires slightly convoluted processing in which property
  that contains type id is actually written <b>after</b> typed value object
  itself is written.
 <br>
  Note that it is illegal to call write method if the current (parent) write context
  is not Object: no coercion is done for other inclusion types (unlike with other 
 <code>xxx_PROPERTY</code> choices.
  This also means that root values MAY NOT use this type id inclusion mechanism
  (as they have no parent context).
 <p>
  Corresponds to <code>JsonTypeInfo.As.EXTERNAL_PROPERTY</code>.
 */
inline ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_get_PARENT_PROPERTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion, PARENT_PROPERTY)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion *ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTypeWritableTypeId_Inclusion)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeWritableTypeId")
