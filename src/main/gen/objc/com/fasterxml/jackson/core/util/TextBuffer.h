//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilTextBuffer")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilTextBuffer
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilTextBuffer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilTextBuffer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilTextBuffer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilTextBuffer_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilTextBuffer || defined(INCLUDE_ComFasterxmlJacksonCoreUtilTextBuffer))
#define ComFasterxmlJacksonCoreUtilTextBuffer_

@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class IOSCharArray;
@class JavaIoWriter;
@class JavaMathBigDecimal;

/*!
 @brief TextBuffer is a class similar to <code>StringBuffer</code>, with
  following differences:
 <ul>
   <li>TextBuffer uses segments character arrays, to avoid having
      to do additional array copies when array is not big enough.
 This means that only reallocating that is necessary is done only once:
      if and when caller
      wants to access contents in a linear array (char[], String).    
 </li>
   <li>TextBuffer can also be initialized in "shared mode", in which
      it will just act as a wrapper to a single char array managed
      by another object (like parser that owns it)    
 </li>
   <li>TextBuffer is not synchronized.
     </li>
  </ul>
 */
@interface ComFasterxmlJacksonCoreUtilTextBuffer : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)allocator;

- (void)appendWithChar:(jchar)c;

- (void)appendWithCharArray:(IOSCharArray *)c
                    withInt:(jint)start
                    withInt:(jint)len;

- (void)appendWithNSString:(NSString *)str
                   withInt:(jint)offset
                   withInt:(jint)len;

- (IOSCharArray *)contentsAsArray;

/*!
 @brief Convenience method for converting contents of the buffer
  into a <code>BigDecimal</code>.
 */
- (JavaMathBigDecimal *)contentsAsDecimal;

/*!
 @brief Convenience method for converting contents of the buffer
  into a Double value.
 */
- (jdouble)contentsAsDouble;

/*!
 @brief Specialized convenience method that will decode a 32-bit int,
  of at most 9 digits (and possible leading minus sign).
 @param neg Whether contents start with a minus sign
 @since 2.9
 */
- (jint)contentsAsIntWithBoolean:(jboolean)neg;

/*!
 @brief Specialized convenience method that will decode a 64-bit int,
  of at most 18 digits (and possible leading minus sign).
 @param neg Whether contents start with a minus sign
 @since 2.9
 */
- (jlong)contentsAsLongWithBoolean:(jboolean)neg;

- (NSString *)contentsAsString;

/*!
 @since 2.8
 */
- (jint)contentsToWriterWithJavaIoWriter:(JavaIoWriter *)w;

- (IOSCharArray *)emptyAndGetCurrentSegment;

/*!
 @brief Method called to make sure that buffer is not using shared input
  buffer; if it is, it will copy such contents to private buffer.
 */
- (void)ensureNotShared;

/*!
 @brief Method called to expand size of the current segment, to
  accommodate for more contiguous content.Usually only
  used when parsing tokens like names if even then.
 */
- (IOSCharArray *)expandCurrentSegment;

/*!
 @brief Method called to expand size of the current segment, to
  accommodate for more contiguous content.Usually only
  used when parsing tokens like names if even then.
 @param minSize Required minimum strength of the current segment
 @since 2.4.0
 */
- (IOSCharArray *)expandCurrentSegmentWithInt:(jint)minSize;

- (IOSCharArray *)finishCurrentSegment;

/*!
 @since 2.9
 */
- (IOSCharArray *)getBufferWithoutReset;

- (IOSCharArray *)getCurrentSegment;

- (jint)getCurrentSegmentSize;

/*!
 @brief Accessor that may be used to get the contents of this buffer in a single 
 <code>char</code> array regardless of whether they were collected in a segmented
  fashion or not.
 */
- (IOSCharArray *)getTextBuffer;

- (jint)getTextOffset;

/*!
 @brief Method that can be used to check whether textual contents can
  be efficiently accessed using <code>getTextBuffer</code>.
 */
- (jboolean)hasTextAsCharacters;

/*!
 @brief Method called to indicate that the underlying buffers should now
  be recycled if they haven't yet been recycled.Although caller
  can still use this text buffer, it is not advisable to call this
  method if that is likely, since next time a buffer is needed,
  buffers need to reallocated.
 Note: calling this method automatically also clears contents
  of the buffer.
 */
- (void)releaseBuffers;

/*!
 @since 2.9
 */
- (void)resetWithWithChar:(jchar)ch;

- (void)resetWithCopyWithCharArray:(IOSCharArray *)buf
                           withInt:(jint)start
                           withInt:(jint)len;

/*!
 @since 2.9
 */
- (void)resetWithCopyWithNSString:(NSString *)text
                          withInt:(jint)start
                          withInt:(jint)len;

/*!
 @brief Method called to clear out any content text buffer may have, and
  initializes buffer to use non-shared data.
 */
- (void)resetWithEmpty;

/*!
 @brief Method called to initialize the buffer with a shared copy of data;
  this means that buffer will just have pointers to actual data.It
  also means that if anything is to be appended to the buffer, it
  will first have to unshare it (make a local copy).
 */
- (void)resetWithSharedWithCharArray:(IOSCharArray *)buf
                             withInt:(jint)start
                             withInt:(jint)len;

- (void)resetWithStringWithNSString:(NSString *)value;

/*!
 @since 2.6
 */
- (NSString *)setCurrentAndReturnWithInt:(jint)len;

- (void)setCurrentLengthWithInt:(jint)len;

/*!
 @return Number of characters currently stored by this collector
 */
- (jint)size;

/*!
 @brief Note: calling this method may not be as efficient as calling 
 <code>contentsAsString</code>, since it's not guaranteed that resulting
  String is cached.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreUtilTextBuffer)

inline IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_get_NO_CHARS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilTextBuffer, NO_CHARS, IOSCharArray *)

/*!
 @brief Let's start with sizable but not huge buffer, will grow as necessary
 */
inline jint ComFasterxmlJacksonCoreUtilTextBuffer_get_MIN_SEGMENT_LEN(void);
#define ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN 1000
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreUtilTextBuffer, MIN_SEGMENT_LEN, jint)

/*!
 @brief Let's limit maximum segment length to something sensible
  like 256k
 */
inline jint ComFasterxmlJacksonCoreUtilTextBuffer_get_MAX_SEGMENT_LEN(void);
#define ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN 262144
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreUtilTextBuffer, MAX_SEGMENT_LEN, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilTextBuffer *self, ComFasterxmlJacksonCoreUtilBufferRecycler *allocator);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilTextBuffer *new_ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *allocator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilTextBuffer *create_ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *allocator);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilTextBuffer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilTextBuffer")
