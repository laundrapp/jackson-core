//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoUTF32Reader")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoUTF32Reader
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoUTF32Reader 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoUTF32Reader 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoUTF32Reader

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoUTF32Reader_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoUTF32Reader || defined(INCLUDE_ComFasterxmlJacksonCoreIoUTF32Reader))
#define ComFasterxmlJacksonCoreIoUTF32Reader_

#define RESTRICT_JavaIoReader 1
#define INCLUDE_JavaIoReader 1
#include "java/io/Reader.h"

@class ComFasterxmlJacksonCoreIoIOContext;
@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;

/*!
 @brief Since JDK does not come with UTF-32/UCS-4, let's implement a simple
  decoder to use.
 */
@interface ComFasterxmlJacksonCoreIoUTF32Reader : JavaIoReader {
 @public
  ComFasterxmlJacksonCoreIoIOContext *_context_;
  JavaIoInputStream *_in_;
  IOSByteArray *_buffer_;
  jint _ptr_;
  jint _length_;
  jboolean _bigEndian_;
  /*!
   @brief Although input is fine with full Unicode set, Java still uses
  16-bit chars, so we may have to split high-order chars into
  surrogate pairs.
   */
  jchar _surrogate_;
  /*!
   @brief Total read character count; used for error reporting purposes
   */
  jint _charCount_;
  /*!
   @brief Total read byte count; used for error reporting purposes
   */
  jint _byteCount_;
  jboolean _managedBuffers_;
  IOSCharArray *_tmpBuf_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                               withJavaIoInputStream:(JavaIoInputStream *)inArg
                                                       withByteArray:(IOSByteArray *)buf
                                                             withInt:(jint)ptr
                                                             withInt:(jint)len
                                                         withBoolean:(jboolean)isBigEndian;

- (void)close;

/*!
 @brief Although this method is implemented by the base class, AND it should
  never be called by main code, let's still implement it bit more
  efficiently just in case
 */
- (jint)read;

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)start
                  withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreIoUTF32Reader)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoUTF32Reader, _context_, ComFasterxmlJacksonCoreIoIOContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoUTF32Reader, _in_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoUTF32Reader, _buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoUTF32Reader, _tmpBuf_, IOSCharArray *)

/*!
 @brief JSON actually limits available Unicode range in the high end
  to the same as xml (to basically limit UTF-8 max byte sequence
  length to 4)
 */
inline jint ComFasterxmlJacksonCoreIoUTF32Reader_get_LAST_VALID_UNICODE_CHAR(void);
#define ComFasterxmlJacksonCoreIoUTF32Reader_LAST_VALID_UNICODE_CHAR 1114111
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoUTF32Reader, LAST_VALID_UNICODE_CHAR, jint)

inline jchar ComFasterxmlJacksonCoreIoUTF32Reader_get_NC(void);
#define ComFasterxmlJacksonCoreIoUTF32Reader_NC 0x0000
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoUTF32Reader, NC, jchar)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoUTF32Reader *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoUTF32Reader *new_ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoUTF32Reader *create_ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint ptr, jint len, jboolean isBigEndian);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoUTF32Reader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoUTF32Reader")
