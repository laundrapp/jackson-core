//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Version.h"
#include "com/fasterxml/jackson/core/Versioned.h"
#include "com/fasterxml/jackson/core/util/VersionUtil.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/regex/Pattern.h"

inline JavaUtilRegexPattern *ComFasterxmlJacksonCoreUtilVersionUtil_get_V_SEP(void);
static JavaUtilRegexPattern *ComFasterxmlJacksonCoreUtilVersionUtil_V_SEP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilVersionUtil, V_SEP, JavaUtilRegexPattern *)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreUtilVersionUtil)

@implementation ComFasterxmlJacksonCoreUtilVersionUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreUtilVersionUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonCoreVersion *)versionForWithIOSClass:(IOSClass *)cls {
  return ComFasterxmlJacksonCoreUtilVersionUtil_versionForWithIOSClass_(cls);
}

+ (ComFasterxmlJacksonCoreVersion *)packageVersionForWithIOSClass:(IOSClass *)cls {
  return ComFasterxmlJacksonCoreUtilVersionUtil_packageVersionForWithIOSClass_(cls);
}

+ (ComFasterxmlJacksonCoreVersion *)parseVersionWithNSString:(NSString *)s
                                                withNSString:(NSString *)groupId
                                                withNSString:(NSString *)artifactId {
  return ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionWithNSString_withNSString_withNSString_(s, groupId, artifactId);
}

+ (jint)parseVersionPartWithNSString:(NSString *)s {
  return ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(s);
}

+ (void)throwInternal {
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreVersion;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreVersion;", 0x9, 3, 1, -1, 2, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreVersion;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x19, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(versionForWithIOSClass:);
  methods[2].selector = @selector(packageVersionForWithIOSClass:);
  methods[3].selector = @selector(parseVersionWithNSString:withNSString:withNSString:);
  methods[4].selector = @selector(parseVersionPartWithNSString:);
  methods[5].selector = @selector(throwInternal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "V_SEP", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "versionFor", "LIOSClass;", "(Ljava/lang/Class<*>;)Lcom/fasterxml/jackson/core/Version;", "packageVersionFor", "parseVersion", "LNSString;LNSString;LNSString;", "parseVersionPart", "LNSString;", &ComFasterxmlJacksonCoreUtilVersionUtil_V_SEP };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilVersionUtil = { "VersionUtil", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreUtilVersionUtil;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreUtilVersionUtil class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreUtilVersionUtil_V_SEP, JavaUtilRegexPattern_compileWithNSString_(@"[-_./;:]"));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreUtilVersionUtil)
  }
}

@end

void ComFasterxmlJacksonCoreUtilVersionUtil_init(ComFasterxmlJacksonCoreUtilVersionUtil *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreUtilVersionUtil *new_ComFasterxmlJacksonCoreUtilVersionUtil_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilVersionUtil, init)
}

ComFasterxmlJacksonCoreUtilVersionUtil *create_ComFasterxmlJacksonCoreUtilVersionUtil_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilVersionUtil, init)
}

ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_versionForWithIOSClass_(IOSClass *cls) {
  ComFasterxmlJacksonCoreUtilVersionUtil_initialize();
  ComFasterxmlJacksonCoreVersion *version_ = ComFasterxmlJacksonCoreUtilVersionUtil_packageVersionForWithIOSClass_(cls);
  return version_ == nil ? ComFasterxmlJacksonCoreVersion_unknownVersion() : version_;
}

ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_packageVersionForWithIOSClass_(IOSClass *cls) {
  ComFasterxmlJacksonCoreUtilVersionUtil_initialize();
  ComFasterxmlJacksonCoreVersion *v = nil;
  @try {
    NSString *versionInfoClassName = JreStrcat("$$", [((JavaLangPackage *) nil_chk([((IOSClass *) nil_chk(cls)) getPackage])) getName], @".PackageVersion");
    IOSClass *vClass = IOSClass_forName_initialize_classLoader_(versionInfoClassName, true, [cls getClassLoader]);
    @try {
      v = [((id<ComFasterxmlJacksonCoreVersioned>) nil_chk(((id<ComFasterxmlJacksonCoreVersioned>) cast_check([((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(vClass)) getDeclaredConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], ComFasterxmlJacksonCoreVersioned_class_())))) version__];
    }
    @catch (JavaLangException *e) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Failed to get Versioned out of ", vClass));
    }
  }
  @catch (JavaLangException *e) {
    
    ;
  }
  return (v == nil) ? ComFasterxmlJacksonCoreVersion_unknownVersion() : v;
}

ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionWithNSString_withNSString_withNSString_(NSString *s, NSString *groupId, NSString *artifactId) {
  ComFasterxmlJacksonCoreUtilVersionUtil_initialize();
  if (s != nil && [(s = [s java_trim]) java_length] > 0) {
    IOSObjectArray *parts = [((JavaUtilRegexPattern *) nil_chk(ComFasterxmlJacksonCoreUtilVersionUtil_V_SEP)) splitWithJavaLangCharSequence:s];
    return create_ComFasterxmlJacksonCoreVersion_initWithInt_withInt_withInt_withNSString_withNSString_withNSString_(ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(IOSObjectArray_Get(nil_chk(parts), 0)), (parts->size_ > 1) ? ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(IOSObjectArray_Get(parts, 1)) : 0, (parts->size_ > 2) ? ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(IOSObjectArray_Get(parts, 2)) : 0, (parts->size_ > 3) ? IOSObjectArray_Get(parts, 3) : nil, groupId, artifactId);
  }
  return ComFasterxmlJacksonCoreVersion_unknownVersion();
}

jint ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(NSString *s) {
  ComFasterxmlJacksonCoreUtilVersionUtil_initialize();
  jint number = 0;
  for (jint i = 0, len = [((NSString *) nil_chk(s)) java_length]; i < len; ++i) {
    jchar c = [s charAtWithInt:i];
    if (c > '9' || c < '0') break;
    number = (number * 10) + (c - '0');
  }
  return number;
}

void ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal() {
  ComFasterxmlJacksonCoreUtilVersionUtil_initialize();
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Internal error: this code path should never get executed");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilVersionUtil)
