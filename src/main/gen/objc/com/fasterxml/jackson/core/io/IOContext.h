//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/IOContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoIOContext")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoIOContext
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoIOContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoIOContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoIOContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoIOContext_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoIOContext || defined(INCLUDE_ComFasterxmlJacksonCoreIoIOContext))
#define ComFasterxmlJacksonCoreIoIOContext_

@class ComFasterxmlJacksonCoreJsonEncoding;
@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class ComFasterxmlJacksonCoreUtilTextBuffer;
@class IOSByteArray;
@class IOSCharArray;

/*!
 @brief To limit number of configuration and state objects to pass, all
  contextual objects that need to be passed by the factory to
  readers and writers are combined under this object.One instance
  is created for each reader and writer.
 <p>
  NOTE: non-final since 2.4, to allow sub-classing.
 */
@interface ComFasterxmlJacksonCoreIoIOContext : NSObject {
 @public
  /*!
   @brief Reference to the source object, which can be used for displaying
  location information
   */
  id _sourceRef_;
  /*!
   @brief Encoding used by the underlying stream, if known.
   */
  ComFasterxmlJacksonCoreJsonEncoding *_encoding_;
  /*!
   @brief Flag that indicates whether underlying input/output source/target
  object is fully managed by the owner of this context (parser or
  generator).If true, it is, and is to be closed by parser/generator;
  if false, calling application has to do closing (unless auto-closing
  feature is enabled for the parser/generator in question; in which
  case it acts like the owner).
   */
  jboolean _managedResource_;
  /*!
   @brief Recycler used for actual allocation/deallocation/reuse
   */
  ComFasterxmlJacksonCoreUtilBufferRecycler *_bufferRecycler_;
  /*!
   @brief Reference to the allocated I/O buffer for low-level input reading,
  if any allocated.
   */
  IOSByteArray *_readIOBuffer_;
  /*!
   @brief Reference to the allocated I/O buffer used for low-level
  encoding-related buffering.
   */
  IOSByteArray *_writeEncodingBuffer_;
  /*!
   @brief Reference to the buffer allocated for temporary use with
  base64 encoding or decoding.
   */
  IOSByteArray *_base64Buffer_;
  /*!
   @brief Reference to the buffer allocated for tokenization purposes,
  in which character input is read, and from which it can be
  further returned.
   */
  IOSCharArray *_tokenCBuffer_;
  /*!
   @brief Reference to the buffer allocated for buffering it for
  output, before being encoded: generally this means concatenating
  output, then encoding when buffer fills up.
   */
  IOSCharArray *_concatCBuffer_;
  /*!
   @brief Reference temporary buffer Parser instances need if calling
  app decides it wants to access name via 'getTextCharacters' method.
   Regular text buffer can not be used as it may contain textual
  representation of the value token.
   */
  IOSCharArray *_nameCopyBuffer_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br
                                                                     withId:(id)sourceRef
                                                                withBoolean:(jboolean)managedResource;

/*!
 @since 3.0
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)br
                                                                     withId:(id)sourceRef
                                                                withBoolean:(jboolean)managedResource
                                    withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @since 2.1
 */
- (IOSByteArray *)allocBase64Buffer OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.9
 */
- (IOSByteArray *)allocBase64BufferWithInt:(jint)minSize OBJC_METHOD_FAMILY_NONE;

- (IOSCharArray *)allocConcatBuffer OBJC_METHOD_FAMILY_NONE;

- (IOSCharArray *)allocNameCopyBufferWithInt:(jint)minSize OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>
  Note: the method can only be called once during its life cycle.
 This is to protect against accidental sharing.
 */
- (IOSByteArray *)allocReadIOBuffer OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.4
 */
- (IOSByteArray *)allocReadIOBufferWithInt:(jint)minSize OBJC_METHOD_FAMILY_NONE;

- (IOSCharArray *)allocTokenBuffer OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.4
 */
- (IOSCharArray *)allocTokenBufferWithInt:(jint)minSize OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)allocWriteEncodingBuffer OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.4
 */
- (IOSByteArray *)allocWriteEncodingBufferWithInt:(jint)minSize OBJC_METHOD_FAMILY_NONE;

- (ComFasterxmlJacksonCoreUtilTextBuffer *)constructTextBuffer;

- (ComFasterxmlJacksonCoreJsonEncoding *)getEncoding;

- (id)getSourceReference;

- (jboolean)isResourceManaged;

- (void)releaseBase64BufferWithByteArray:(IOSByteArray *)buf;

- (void)releaseConcatBufferWithCharArray:(IOSCharArray *)buf;

- (void)releaseNameCopyBufferWithCharArray:(IOSCharArray *)buf;

/*!
 @brief Method to call when all the processing buffers can be safely
  recycled.
 */
- (void)releaseReadIOBufferWithByteArray:(IOSByteArray *)buf;

- (void)releaseTokenBufferWithCharArray:(IOSCharArray *)buf;

- (void)releaseWriteEncodingBufferWithByteArray:(IOSByteArray *)buf;

- (ComFasterxmlJacksonCoreIoIOContext *)setEncodingWithComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

#pragma mark Protected

- (void)_verifyAllocWithId:(id)buffer;

- (void)_verifyReleaseWithByteArray:(IOSByteArray *)toRelease
                      withByteArray:(IOSByteArray *)src;

- (void)_verifyReleaseWithCharArray:(IOSCharArray *)toRelease
                      withCharArray:(IOSCharArray *)src;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreIoIOContext)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _sourceRef_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _encoding_, ComFasterxmlJacksonCoreJsonEncoding *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _bufferRecycler_, ComFasterxmlJacksonCoreUtilBufferRecycler *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _readIOBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _writeEncodingBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _base64Buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _tokenCBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _concatCBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreIoIOContext, _nameCopyBuffer_, IOSCharArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoIOContext *new_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoIOContext *create_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreIoIOContext *self, ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoIOContext *new_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoIOContext *create_ComFasterxmlJacksonCoreIoIOContext_initWithComFasterxmlJacksonCoreUtilBufferRecycler_withId_withBoolean_withComFasterxmlJacksonCoreJsonEncoding_(ComFasterxmlJacksonCoreUtilBufferRecycler *br, id sourceRef, jboolean managedResource, ComFasterxmlJacksonCoreJsonEncoding *enc);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoIOContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoIOContext")
