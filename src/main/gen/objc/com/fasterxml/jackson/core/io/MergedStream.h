//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/MergedStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoMergedStream")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoMergedStream
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoMergedStream 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoMergedStream 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoMergedStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoMergedStream_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoMergedStream || defined(INCLUDE_ComFasterxmlJacksonCoreIoMergedStream))
#define ComFasterxmlJacksonCoreIoMergedStream_

#define RESTRICT_JavaIoInputStream 1
#define INCLUDE_JavaIoInputStream 1
#include "java/io/InputStream.h"

@class ComFasterxmlJacksonCoreIoIOContext;
@class IOSByteArray;

/*!
 @brief Simple <code>InputStream</code> implementation that is used to "unwind" some
  data previously read from an input stream; so that as long as some of
  that data remains, it's returned; but as long as it's read, we'll
  just use data from the underlying original stream.
 This is similar to <code>java.io.PushbackInputStream</code>, but here there's
  only one implicit pushback, when instance is constructed.
 */
@interface ComFasterxmlJacksonCoreIoMergedStream : JavaIoInputStream

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                               withJavaIoInputStream:(JavaIoInputStream *)inArg
                                                       withByteArray:(IOSByteArray *)buf
                                                             withInt:(jint)start
                                                             withInt:(jint)end;

- (jint)available;

- (void)close;

- (void)markWithInt:(jint)readlimit;

- (jboolean)markSupported;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)b;

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)reset;

- (jlong)skipWithLong:(jlong)n;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreIoMergedStream)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoMergedStream_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreIoMergedStream *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint start, jint end);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoMergedStream *new_ComFasterxmlJacksonCoreIoMergedStream_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint start, jint end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoMergedStream *create_ComFasterxmlJacksonCoreIoMergedStream_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg, IOSByteArray *buf, jint start, jint end);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoMergedStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoMergedStream")
