//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter || defined(INCLUDE_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter))
#define ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_

#define RESTRICT_ComFasterxmlJacksonCorePrettyPrinter 1
#define INCLUDE_ComFasterxmlJacksonCorePrettyPrinter 1
#include "com/fasterxml/jackson/core/PrettyPrinter.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreUtilSeparators;

/*!
 @brief <code>PrettyPrinter</code> implementation that adds no indentation,
  just implements everything necessary for value output to work
  as expected, and provide simpler extension points to allow
  for creating simple custom implementations that add specific
  decoration or overrides.Since behavior then is very similar
  to using no pretty printer at all, usually sub-classes are used.
 <p>
  Beyond purely minimal implementation, there is limited amount of
  configurability which may be useful for actual use: for example,
  it is possible to redefine separator used between root-level
  values (default is single space; can be changed to line-feed).
 <p>
  Note: does NOT implement <code>Instantiatable</code> since this is
  a stateless implementation; that is, a single instance can be
  shared between threads.
 */
@interface ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter : NSObject < ComFasterxmlJacksonCorePrettyPrinter, JavaIoSerializable > {
 @public
  NSString *_rootValueSeparator_;
  /*!
   @since 2.9
   */
  ComFasterxmlJacksonCoreUtilSeparators *_separators_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)rootValueSeparator;

- (void)beforeArrayValuesWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)setRootValueSeparatorWithNSString:(NSString *)sep;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *)setSeparatorsWithComFasterxmlJacksonCoreUtilSeparators:(ComFasterxmlJacksonCoreUtilSeparators *)separators;

/*!
 @brief Method called after an array value has been completely
  output, and before another value is to be output.
 <p>
  Default handling (without pretty-printing) will output a single
  comma to separate values.
 */
- (void)writeArrayValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)writeEndArrayWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                      withInt:(jint)nrOfValues;

- (void)writeEndObjectWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g
                                                       withInt:(jint)nrOfEntries;

/*!
 @brief Method called after an object entry (field:value) has been completely
  output, and before another value is to be output.
 <p>
  Default handling (without pretty-printing) will output a single
  comma to separate the two.
 */
- (void)writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

/*!
 @brief Method called after an object field has been output, but
  before the value is output.
 <p>
  Default handling will just output a single
  colon to separate the two, without additional spaces.
 */
- (void)writeObjectFieldValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)writeRootValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

- (void)writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)g;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter, _rootValueSeparator_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter, _separators_, ComFasterxmlJacksonCoreUtilSeparators *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_init(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *new_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *create_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_initWithNSString_(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *self, NSString *rootValueSeparator);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *new_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_initWithNSString_(NSString *rootValueSeparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter *create_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter_initWithNSString_(NSString *rootValueSeparator);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilMinimalPrettyPrinter")
