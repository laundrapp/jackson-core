//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate")
#ifdef RESTRICT_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate || defined(INCLUDE_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate))
#define ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate_

#define RESTRICT_ComFasterxmlJacksonCoreUtilJsonGeneratorDelegate 1
#define INCLUDE_ComFasterxmlJacksonCoreUtilJsonGeneratorDelegate 1
#include "com/fasterxml/jackson/core/util/JsonGeneratorDelegate.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreFilterTokenFilter;
@class ComFasterxmlJacksonCoreFilterTokenFilterContext;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreTokenStreamContext;
@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief Specialized <code>JsonGeneratorDelegate</code> that allows use of 
 <code>TokenFilter</code> for outputting a subset of content that
  caller tries to generate.
 */
@interface ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate : ComFasterxmlJacksonCoreUtilJsonGeneratorDelegate {
 @public
  /*!
   @brief Object consulted to determine whether to write parts of content generator
  is asked to write or not.
   */
  ComFasterxmlJacksonCoreFilterTokenFilter *rootFilter_;
  /*!
   @brief Flag that determines whether filtering will continue after the first
  match is indicated or not: if `false`, output is based on just the first
  full match (returning <code>TokenFilter.INCLUDE_ALL</code>) and no more
  checks are made; if `true` then filtering will be applied as necessary
  until end of content.
   */
  jboolean _allowMultipleMatches_;
  /*!
   @brief Flag that determines whether path leading up to included content should
  also be automatically included or not.If `false`, no path inclusion is
  done and only explicitly included entries are output; if `true` then
  path from main level down to match is also included as necessary.
   */
  jboolean _includePath_;
  /*!
   @brief Although delegate has its own output context it is not sufficient since we actually
  have to keep track of excluded (filtered out) structures as well as ones delegate
  actually outputs.
   */
  ComFasterxmlJacksonCoreFilterTokenFilterContext *_filterContext_;
  /*!
   @brief State that applies to the item within container, used where applicable.
   Specifically used to pass inclusion state between property name and
  property, and also used for array elements.
   */
  ComFasterxmlJacksonCoreFilterTokenFilter *_itemFilter_;
  /*!
   @brief Number of tokens for which <code>TokenFilter.INCLUDE_ALL</code>
  has been returned
   */
  jint _matchCount_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)d
                          withComFasterxmlJacksonCoreFilterTokenFilter:(ComFasterxmlJacksonCoreFilterTokenFilter *)f
                                                           withBoolean:(jboolean)includePath
                                                           withBoolean:(jboolean)allowMultipleMatches;

- (ComFasterxmlJacksonCoreFilterTokenFilter *)getFilter;

- (ComFasterxmlJacksonCoreTokenStreamContext *)getFilterContext;

/*!
 @brief Accessor for finding number of matches, where specific token and sub-tree
  starting (if structured type) are passed.
 */
- (jint)getMatchCount;

- (ComFasterxmlJacksonCoreTokenStreamContext *)getOutputContext;

- (void)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                              withByteArray:(IOSByteArray *)data
                                                    withInt:(jint)offset
                                                    withInt:(jint)len;

- (jint)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                      withJavaIoInputStream:(JavaIoInputStream *)data
                                                    withInt:(jint)dataLength;

- (void)writeBooleanWithBoolean:(jboolean)v;

- (void)writeEndArray;

- (void)writeEndObject;

- (void)writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name;

- (void)writeFieldNameWithNSString:(NSString *)name;

- (void)writeNull;

- (void)writeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)v;

- (void)writeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)v;

- (void)writeNumberWithDouble:(jdouble)v;

- (void)writeNumberWithFloat:(jfloat)v;

- (void)writeNumberWithInt:(jint)v;

- (void)writeNumberWithLong:(jlong)v;

- (void)writeNumberWithShort:(jshort)v;

- (void)writeNumberWithNSString:(NSString *)encodedValue;

- (void)writeObjectIdWithId:(id)id_;

- (void)writeObjectRefWithId:(id)id_;

- (void)writeOmittedFieldWithNSString:(NSString *)fieldName;

- (void)writeRawWithChar:(jchar)c;

- (void)writeRawWithCharArray:(IOSCharArray *)text
                      withInt:(jint)offset
                      withInt:(jint)len;

- (void)writeRawWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text;

- (void)writeRawWithNSString:(NSString *)text;

- (void)writeRawWithNSString:(NSString *)text
                     withInt:(jint)offset
                     withInt:(jint)len;

- (void)writeRawUTF8StringWithByteArray:(IOSByteArray *)text
                                withInt:(jint)offset
                                withInt:(jint)length;

- (void)writeRawValueWithCharArray:(IOSCharArray *)text
                           withInt:(jint)offset
                           withInt:(jint)len;

- (void)writeRawValueWithNSString:(NSString *)text;

- (void)writeRawValueWithNSString:(NSString *)text
                          withInt:(jint)offset
                          withInt:(jint)len;

- (void)writeStartArray;

- (void)writeStartArrayWithInt:(jint)size;

- (void)writeStartObject;

- (void)writeStartObjectWithId:(id)forValue;

- (void)writeStringWithCharArray:(IOSCharArray *)text
                         withInt:(jint)offset
                         withInt:(jint)len;

- (void)writeStringWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)value;

- (void)writeStringWithNSString:(NSString *)value;

- (void)writeTypeIdWithId:(id)id_;

- (void)writeUTF8StringWithByteArray:(IOSByteArray *)text
                             withInt:(jint)offset
                             withInt:(jint)length;

#pragma mark Protected

- (jboolean)_checkBinaryWrite;

- (void)_checkParentPath;

/*!
 @brief Specialized variant of <code>_checkParentPath</code> used when checking
  parent for a property name to be included with value: rules are slightly
  different.
 */
- (void)_checkPropertyParentPath;

- (jboolean)_checkRawValueWrite;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)arg0
                                                           withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate, rootFilter_, ComFasterxmlJacksonCoreFilterTokenFilter *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate, _filterContext_, ComFasterxmlJacksonCoreFilterTokenFilterContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate, _itemFilter_, ComFasterxmlJacksonCoreFilterTokenFilter *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate_initWithComFasterxmlJacksonCoreJsonGenerator_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate *self, ComFasterxmlJacksonCoreJsonGenerator *d, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate *new_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate_initWithComFasterxmlJacksonCoreJsonGenerator_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreJsonGenerator *d, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate *create_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate_initWithComFasterxmlJacksonCoreJsonGenerator_withComFasterxmlJacksonCoreFilterTokenFilter_withBoolean_withBoolean_(ComFasterxmlJacksonCoreJsonGenerator *d, ComFasterxmlJacksonCoreFilterTokenFilter *f, jboolean includePath, jboolean allowMultipleMatches);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterFilteringGeneratorDelegate")
