//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonEncoding.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonEncoding")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonEncoding
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonEncoding 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonEncoding 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonEncoding

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonEncoding_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonEncoding || defined(INCLUDE_ComFasterxmlJacksonCoreJsonEncoding))
#define ComFasterxmlJacksonCoreJsonEncoding_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreJsonEncoding_Enum) {
  ComFasterxmlJacksonCoreJsonEncoding_Enum_UTF8 = 0,
  ComFasterxmlJacksonCoreJsonEncoding_Enum_UTF16_BE = 1,
  ComFasterxmlJacksonCoreJsonEncoding_Enum_UTF16_LE = 2,
  ComFasterxmlJacksonCoreJsonEncoding_Enum_UTF32_BE = 3,
  ComFasterxmlJacksonCoreJsonEncoding_Enum_UTF32_LE = 4,
};

/*!
 @brief Enumeration that defines legal encodings that can be used
  for JSON content, based on list of allowed encodings from 
 <a href="http://www.ietf.org/rfc/rfc4627.txt">JSON specification</a>.
 <p>
  Note: if application want to explicitly disregard Encoding
  limitations (to read in JSON encoded using an encoding not
  listed as allowed), they can use <code>java.io.Reader</code> / 
 <code>java.io.Writer</code> instances as input
 */
@interface ComFasterxmlJacksonCoreJsonEncoding : JavaLangEnum

#pragma mark Public

- (jint)bits;

/*!
 @brief Method for accessing encoding name that JDK will support.
 @return Matching encoding name that JDK will support.
 */
- (NSString *)getJavaName;

/*!
 @brief Whether encoding is big-endian (if encoding supports such
  notion).If no such distinction is made (as is the case for 
 <code>UTF8</code>), return value is undefined.
 @return True for big-endian encodings; false for little-endian
    (or if not applicable)
 */
- (jboolean)isBigEndian;

+ (ComFasterxmlJacksonCoreJsonEncoding *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonEncoding)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_values_[];

inline ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_get_UTF8(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonEncoding, UTF8)

inline ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_get_UTF16_BE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonEncoding, UTF16_BE)

inline ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_get_UTF16_LE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonEncoding, UTF16_LE)

inline ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_get_UTF32_BE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonEncoding, UTF32_BE)

inline ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_get_UTF32_LE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonEncoding, UTF32_LE)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreJsonEncoding_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonEncoding *ComFasterxmlJacksonCoreJsonEncoding_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonEncoding)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonEncoding")
