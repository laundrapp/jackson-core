//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilVersionUtil")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilVersionUtil
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilVersionUtil 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilVersionUtil 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilVersionUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilVersionUtil_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilVersionUtil || defined(INCLUDE_ComFasterxmlJacksonCoreUtilVersionUtil))
#define ComFasterxmlJacksonCoreUtilVersionUtil_

@class ComFasterxmlJacksonCoreVersion;
@class IOSClass;

/*!
 @brief Functionality for supporting exposing of component <code>Version</code>s.
 Also contains other misc methods that have no other place to live in.
 <p>
  Note that this class can be used in two roles: first, as a static
  utility class for loading purposes, and second, as a singleton
  loader of per-module version information.
 */
@interface ComFasterxmlJacksonCoreUtilVersionUtil : NSObject

#pragma mark Public

/*!
 @brief Loads version information by introspecting a class named
  "PackageVersion" in the same package as the given class.
 <p>
  If the class could not be found or does not have a public
  static Version field named "VERSION", returns null.
 */
+ (ComFasterxmlJacksonCoreVersion *)packageVersionForWithIOSClass:(IOSClass *)cls;

/*!
 @brief Method used by <code>PackageVersion</code> classes to decode version injected by Maven build.
 */
+ (ComFasterxmlJacksonCoreVersion *)parseVersionWithNSString:(NSString *)s
                                                withNSString:(NSString *)groupId
                                                withNSString:(NSString *)artifactId;

+ (void)throwInternal;

/*!
 @brief Helper method that will try to load version information for specified
  class.Implementation is as follows:
  First, tries to load version info from a class named
  "PackageVersion" in the same package as the class.
 If no version information is found, <code>Version.unknownVersion()</code> is returned.
 */
+ (ComFasterxmlJacksonCoreVersion *)versionForWithIOSClass:(IOSClass *)cls;

#pragma mark Protected

- (instancetype __nonnull)init;

+ (jint)parseVersionPartWithNSString:(NSString *)s;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreUtilVersionUtil)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilVersionUtil_init(ComFasterxmlJacksonCoreUtilVersionUtil *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilVersionUtil *new_ComFasterxmlJacksonCoreUtilVersionUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilVersionUtil *create_ComFasterxmlJacksonCoreUtilVersionUtil_init(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_versionForWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_packageVersionForWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionWithNSString_withNSString_withNSString_(NSString *s, NSString *groupId, NSString *artifactId);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreUtilVersionUtil_parseVersionPartWithNSString_(NSString *s);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilVersionUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilVersionUtil")
