//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterTokenFilter")
#ifdef RESTRICT_ComFasterxmlJacksonCoreFilterTokenFilter
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterTokenFilter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFilterTokenFilter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreFilterTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreFilterTokenFilter_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreFilterTokenFilter || defined(INCLUDE_ComFasterxmlJacksonCoreFilterTokenFilter))
#define ComFasterxmlJacksonCoreFilterTokenFilter_

@class ComFasterxmlJacksonCoreJsonParser;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;

/*!
 @brief Strategy class that can be implemented to specify actual inclusion/exclusion
  criteria for filtering, used by <code>FilteringGeneratorDelegate</code>.
 @since 2.6
 */
@interface ComFasterxmlJacksonCoreFilterTokenFilter : NSObject

#pragma mark Public

/*!
 @brief Method called to indicate that output of non-filtered Array (one that may
  have been included either completely, or in part) is completed,
  in cases where filter other that <code>INCLUDE_ALL</code> was returned.
 This occurs when <code>JsonGenerator.writeEndArray()</code> is called.
 */
- (void)filterFinishArray;

/*!
 @brief Method called to indicate that output of non-filtered Object (one that may
  have been included either completely, or in part) is completed,
  in cases where filter other that <code>INCLUDE_ALL</code> was returned.
 This occurs when <code>JsonGenerator.writeEndObject()</code> is called.
 */
- (void)filterFinishObject;

/*!
 @brief Method called to check whether Array value at current output
  location should be included in output.
 Three kinds of return values may be used as follows:
 <ul>
  <li><code>null</code> to indicate that the Array should be skipped
    </li>
  <li><code>INCLUDE_ALL</code> to indicate that the Array should be included
  completely in output
    </li>
  <li>Any other <code>TokenFilter</code> implementation (possibly this one) to mean
   that further inclusion calls on return filter object need to be made
   on contained element values, as necessary. <code>filterFinishArray()</code> will
   also be called on returned filter object
    </li>
  </ul>
 <p>
  Default implementation returns <code>this</code>, which means that checks
  are made recursively for elements of the array to determine possible inclusion.
 @return TokenFilter to use for further calls within Array, unless return value
    is <code>null</code> or <code>INCLUDE_ALL</code> (which have simpler semantics)
 */
- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartArray;

/*!
 @brief Method called to check whether Object value at current output
  location should be included in output.
 Three kinds of return values may be used as follows:
 <ul>
  <li><code>null</code> to indicate that the Object should be skipped
    </li>
  <li><code>INCLUDE_ALL</code> to indicate that the Object should be included
  completely in output
    </li>
  <li>Any other <code>TokenFilter</code> implementation (possibly this one) to mean
   that further inclusion calls on return filter object need to be made
   on contained properties, as necessary. <code>filterFinishObject()</code> will
   also be called on returned filter object
    </li>
  </ul>
 <p>
  Default implementation returns <code>this</code>, which means that checks
  are made recursively for properties of the Object to determine possible inclusion.
 @return TokenFilter to use for further calls within Array, unless return value
    is <code>null</code> or <code>INCLUDE_ALL</code> (which have simpler semantics)
 */
- (ComFasterxmlJacksonCoreFilterTokenFilter *)filterStartObject;

/*!
 @brief Call made to verify whether leaf-level
  Binary value
  should be included in output or not.
 <p>
  NOTE: no binary payload passed; assumption is this won't be of much use.
 */
- (jboolean)includeBinary;

/*!
 @brief Call made to verify whether leaf-level
  boolean value
  should be included in output or not.
 */
- (jboolean)includeBooleanWithBoolean:(jboolean)value;

/*!
 @brief Method called to check whether array element with specified index (zero-based),
  at current output location, should be included in output.
 Three kinds of return values may be used as follows:
 <ul>
  <li><code>null</code> to indicate that the Array element should be skipped
    </li>
  <li><code>INCLUDE_ALL</code> to indicate that the Array element should be included
  completely in output
    </li>
  <li>Any other <code>TokenFilter</code> implementation (possibly this one) to mean
   that further inclusion calls on returned filter object need to be made
   as necessary, to determine inclusion.
    </li>
  </ul>
 <p>
  The default implementation simply returns <code>this</code> to continue calling
  methods on this filter object, without full inclusion or exclusion.
 @return TokenFilter to use for further calls within element value, unless return value
    is <code>null</code> or <code>INCLUDE_ALL</code> (which have simpler semantics)
 */
- (ComFasterxmlJacksonCoreFilterTokenFilter *)includeElementWithInt:(jint)index;

/*!
 @brief Call made to verify whether leaf-level
  embedded (Opaque) value
  should be included in output or not.
 */
- (jboolean)includeEmbeddedValueWithId:(id)ob;

/*!
 @brief Call made to verify whether leaf-level
  null value
  should be included in output or not.
 */
- (jboolean)includeNull;

/*!
 @brief Call made to verify whether leaf-level 
 <code>BigDecimal</code> value
  should be included in output or not.
 */
- (jboolean)includeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)v;

/*!
 @brief Call made to verify whether leaf-level 
 <code>BigInteger</code> value
  should be included in output or not.
 */
- (jboolean)includeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)v;

/*!
 @brief Call made to verify whether leaf-level 
 <code>double</code> value
  should be included in output or not.
 */
- (jboolean)includeNumberWithDouble:(jdouble)v;

/*!
 @brief Call made to verify whether leaf-level 
 <code>float</code> value
  should be included in output or not.
 */
- (jboolean)includeNumberWithFloat:(jfloat)v;

/*!
 @brief Call made to verify whether leaf-level 
 <code>int</code> value
  should be included in output or not.
 NOTE: also called for `short`, `byte`
 */
- (jboolean)includeNumberWithInt:(jint)v;

/*!
 @brief Call made to verify whether leaf-level 
 <code>long</code> value
  should be included in output or not.
 */
- (jboolean)includeNumberWithLong:(jlong)v;

/*!
 @brief Method called to check whether property value with specified name,
  at current output location, should be included in output.
 Three kinds of return values may be used as follows:
 <ul>
  <li><code>null</code> to indicate that the property and its value should be skipped
    </li>
  <li><code>INCLUDE_ALL</code> to indicate that the property and its value should be included
  completely in output
    </li>
  <li>Any other <code>TokenFilter</code> implementation (possibly this one) to mean
   that further inclusion calls on returned filter object need to be made
   as necessary, to determine inclusion.
    </li>
  </ul>
 <p>
  The default implementation simply returns <code>this</code> to continue calling
  methods on this filter object, without full inclusion or exclusion.
 @return TokenFilter to use for further calls within property value, unless return value
    is <code>null</code> or <code>INCLUDE_ALL</code> (which have simpler semantics)
 */
- (ComFasterxmlJacksonCoreFilterTokenFilter *)includePropertyWithNSString:(NSString *)name;

/*!
 @brief Call made to verify whether leaf-level
  raw (pre-encoded, not quoted by generator) value
  should be included in output or not.
 <p>
  NOTE: value itself not passed since it may come on multiple forms
  and is unlikely to be of much use in determining inclusion
  criteria.
 */
- (jboolean)includeRawValue;

/*!
 @brief Method called to check whether root-level value,
  at current output location, should be included in output.
 Three kinds of return values may be used as follows:
 <ul>
  <li><code>null</code> to indicate that the root value should be skipped
    </li>
  <li><code>INCLUDE_ALL</code> to indicate that the root value should be included
  completely in output
    </li>
  <li>Any other <code>TokenFilter</code> implementation (possibly this one) to mean
   that further inclusion calls on returned filter object need to be made
   as necessary, to determine inclusion.
    </li>
  </ul>
 <p>
  The default implementation simply returns <code>this</code> to continue calling
  methods on this filter object, without full inclusion or exclusion.
 @return TokenFilter to use for further calls within root value, unless return value
    is <code>null</code> or <code>INCLUDE_ALL</code> (which have simpler semantics)
 */
- (ComFasterxmlJacksonCoreFilterTokenFilter *)includeRootValueWithInt:(jint)index;

/*!
 @brief Call made to verify whether leaf-level
  String value
  should be included in output or not.
 */
- (jboolean)includeStringWithNSString:(NSString *)value;

/*!
 @brief Call made when verifying whether a scaler value is being
  read from a parser.
 <p>
  Default action is to call <code>_includeScalar()</code> and return
  whatever it indicates.
 */
- (jboolean)includeValueWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p;

- (NSString *)description;

#pragma mark Protected

- (instancetype __nonnull)init;

/*!
 @brief Overridable default implementation delegated to all scalar value
  inclusion check methods.
 The default implementation simply includes all leaf values.
 */
- (jboolean)_includeScalar;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreFilterTokenFilter)

/*!
 @brief Marker value that should be used to indicate inclusion of a structured
  value (sub-tree representing Object or Array), or value of a named
  property (regardless of type).
 Note that if this instance is returned, it will used as a marker, and 
  no actual callbacks need to be made. For this reason, it is more efficient
  to return this instance if the whole sub-tree is to be included, instead
  of implementing similar filter functionality explicitly.
 */
inline ComFasterxmlJacksonCoreFilterTokenFilter *ComFasterxmlJacksonCoreFilterTokenFilter_get_INCLUDE_ALL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterTokenFilter *ComFasterxmlJacksonCoreFilterTokenFilter_INCLUDE_ALL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreFilterTokenFilter, INCLUDE_ALL, ComFasterxmlJacksonCoreFilterTokenFilter *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreFilterTokenFilter_init(ComFasterxmlJacksonCoreFilterTokenFilter *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterTokenFilter *new_ComFasterxmlJacksonCoreFilterTokenFilter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFilterTokenFilter *create_ComFasterxmlJacksonCoreFilterTokenFilter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreFilterTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFilterTokenFilter")
