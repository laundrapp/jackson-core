//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCorePrettyPrinter")
#ifdef RESTRICT_ComFasterxmlJacksonCorePrettyPrinter
#define INCLUDE_ALL_ComFasterxmlJacksonCorePrettyPrinter 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCorePrettyPrinter 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCorePrettyPrinter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCorePrettyPrinter_) && (INCLUDE_ALL_ComFasterxmlJacksonCorePrettyPrinter || defined(INCLUDE_ComFasterxmlJacksonCorePrettyPrinter))
#define ComFasterxmlJacksonCorePrettyPrinter_

@class ComFasterxmlJacksonCoreIoSerializedString;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreUtilSeparators;

/*!
 @brief Interface for objects that implement pretty printer functionality, such
  as indentation.
 Pretty printers are used to add white space in output JSON content,
  to make results more human readable. Usually this means things like adding
  linefeeds and indentation.
 <p>
  Note: stateful implementations MUST implement 
 <code>com.fasterxml.jackson.core.util.Instantiatable</code> interface,
  to allow for constructing  per-generation instances and avoid
  state corruption.
  Stateless implementations need not do this; but those are less common.
 */
@protocol ComFasterxmlJacksonCorePrettyPrinter < JavaObject >

/*!
 @brief Method called after a root-level value has been completely
  output, and before another value is to be output.
 <p>
  Default
  handling (without pretty-printing) will output a space, to
  allow values to be parsed correctly. Pretty-printer is
  to output some other suitable and nice-looking separator
  (tab(s), space(s), linefeed(s) or any combination thereof).
 */
- (void)writeRootValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called when an Object value is to be output, before
  any fields are output.
 <p>
  Default handling (without pretty-printing) will output
  the opening curly bracket.
  Pretty-printer is
  to output a curly bracket as well, but can surround that
  with other (white-space) decoration.
 */
- (void)writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called after an Object value has been completely output
  (minus closing curly bracket).
 <p>
  Default handling (without pretty-printing) will output
  the closing curly bracket.
  Pretty-printer is
  to output a curly bracket as well, but can surround that
  with other (white-space) decoration.
 @param nrOfEntries Number of direct members of the array that    have been output
 */
- (void)writeEndObjectWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                       withInt:(jint)nrOfEntries;

/*!
 @brief Method called after an object entry (field:value) has been completely
  output, and before another value is to be output.
 <p>
  Default handling (without pretty-printing) will output a single
  comma to separate the two. Pretty-printer is
  to output a comma as well, but can surround that with other
  (white-space) decoration.
 */
- (void)writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called after an object field has been output, but
  before the value is output.
 <p>
  Default handling (without pretty-printing) will output a single
  colon to separate the two. Pretty-printer is
  to output a colon as well, but can surround that with other
  (white-space) decoration.
 */
- (void)writeObjectFieldValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called when an Array value is to be output, before
  any member/child values are output.
 <p>
  Default handling (without pretty-printing) will output
  the opening bracket.
  Pretty-printer is
  to output a bracket as well, but can surround that
  with other (white-space) decoration.
 */
- (void)writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called after an Array value has been completely output
  (minus closing bracket).
 <p>
  Default handling (without pretty-printing) will output
  the closing bracket.
  Pretty-printer is
  to output a bracket as well, but can surround that
  with other (white-space) decoration.
 @param nrOfValues Number of direct members of the array that    have been output
 */
- (void)writeEndArrayWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen
                                                      withInt:(jint)nrOfValues;

/*!
 @brief Method called after an array value has been completely
  output, and before another value is to be output.
 <p>
  Default handling (without pretty-printing) will output a single
  comma to separate the two. Pretty-printer is
  to output a comma as well, but can surround that with other
  (white-space) decoration.
 */
- (void)writeArrayValueSeparatorWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called after array start marker has been output,
  and right before the first value is to be output.
 It is <b>not</b> called for arrays with no values.
 <p>
  Default handling does not output anything, but pretty-printer
  is free to add any white space decoration.
 */
- (void)beforeArrayValuesWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

/*!
 @brief Method called after object start marker has been output,
  and right before the field name of the first entry is
  to be output.
 It is <b>not</b> called for objects without entries.
 <p>
  Default handling does not output anything, but pretty-printer
  is free to add any white space decoration.
 */
- (void)beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:(ComFasterxmlJacksonCoreJsonGenerator *)gen;

@end

@interface ComFasterxmlJacksonCorePrettyPrinter : NSObject

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCorePrettyPrinter)

inline ComFasterxmlJacksonCoreUtilSeparators *ComFasterxmlJacksonCorePrettyPrinter_get_DEFAULT_SEPARATORS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilSeparators *ComFasterxmlJacksonCorePrettyPrinter_DEFAULT_SEPARATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCorePrettyPrinter, DEFAULT_SEPARATORS, ComFasterxmlJacksonCoreUtilSeparators *)

/*!
 @brief Default String used for separating root values is single space.
 */
inline ComFasterxmlJacksonCoreIoSerializedString *ComFasterxmlJacksonCorePrettyPrinter_get_DEFAULT_ROOT_VALUE_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoSerializedString *ComFasterxmlJacksonCorePrettyPrinter_DEFAULT_ROOT_VALUE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCorePrettyPrinter, DEFAULT_ROOT_VALUE_SEPARATOR, ComFasterxmlJacksonCoreIoSerializedString *)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCorePrettyPrinter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCorePrettyPrinter")
