//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonGenerator
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonGenerator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonGenerator_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator || defined(INCLUDE_ComFasterxmlJacksonCoreJsonGenerator))
#define ComFasterxmlJacksonCoreJsonGenerator_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

#define RESTRICT_JavaIoFlushable 1
#define INCLUDE_JavaIoFlushable 1
#include "java/io/Flushable.h"

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoCharacterEscapes;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonStreamContext;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreTypeWritableTypeId;
@class ComFasterxmlJacksonCoreVersion;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSIntArray;
@class IOSLongArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCorePrettyPrinter;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol ComFasterxmlJacksonCoreTreeNode;

/*!
 @brief Base class that defines public API for writing JSON content.
 Instances are created using factory methods of
  a <code>JsonFactory</code> instance.
 @author Tatu Saloranta
 */
@interface ComFasterxmlJacksonCoreJsonGenerator : NSObject < JavaIoCloseable, JavaIoFlushable, ComFasterxmlJacksonCoreVersioned > {
 @public
  /*!
   @brief Object that handles pretty-printing (usually additional
  white space to make results more human-readable) during
  output.If null, no pretty-printing is done.
   */
  id<ComFasterxmlJacksonCorePrettyPrinter> _cfgPrettyPrinter_;
}

#pragma mark Public

/*!
 @brief Introspection method to call to check whether it is ok to omit
  writing of Object fields or not.Most formats do allow omission,
  but certain positional formats (such as CSV) require output of
  placeholders, even if no real values are to be emitted.
 @since 2.3
 */
- (jboolean)canOmitFields;

/*!
 @brief Method that can be used to verify that given schema can be used with
  this generator (using <code>setSchema</code>).
 @param schema Schema to check
 @return True if this generator can use given schema; false if not
 */
- (jboolean)canUseSchemaWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Introspection method that may be called to see if the underlying
  data format supports "native" binary data; that is, an efficient
  output of binary content without encoding.
 <p>
  Default implementation returns false; overridden by data formats
  that do support native binary content.
 @since 2.3
 */
- (jboolean)canWriteBinaryNatively;

/*!
 @brief Introspection method to call to check whether it is possible
  to write numbers using <code>writeNumber(java.lang.String)</code>
  using possible custom format, or not.Typically textual formats
  allow this (and JSON specifically does), whereas binary formats
  do not allow this (except by writing them as Strings).
 Usual reason for calling this method is to check whether custom
  formatting of numbers may be applied by higher-level code (databinding)
  or not.
 @since 2.8
 */
- (jboolean)canWriteFormattedNumbers;

/*!
 @brief Introspection method that may be called to see if the underlying
  data format supports some kind of Object Ids natively (many do not;
  for example, JSON doesn't).
 This method <b>must</b> be called prior to calling 
 <code>writeObjectId</code> or <code>writeObjectRef</code>.
 <p>
  Default implementation returns false; overridden by data formats
  that do support native Object Ids. Caller is expected to either
  use a non-native notation (explicit property or such), or fail,
  in case it can not use native object ids.
 @since 2.3
 */
- (jboolean)canWriteObjectId;

/*!
 @brief Introspection method that may be called to see if the underlying
  data format supports some kind of Type Ids natively (many do not;
  for example, JSON doesn't).
 This method <b>must</b> be called prior to calling 
 <code>writeTypeId</code>.
 <p>
  Default implementation returns false; overridden by data formats
  that do support native Type Ids. Caller is expected to either
  use a non-native notation (explicit property or such), or fail,
  in case it can not use native type ids.
 @since 2.3
 */
- (jboolean)canWriteTypeId;

/*!
 @brief Method called to close this generator, so that no more content
  can be written.
 <p>
  Whether the underlying target (stream, writer) gets closed depends
  on whether this generator either manages the target (i.e. is the
  only one with access to the target -- case if caller passes a
  reference to the resource such as File, but not stream); or
  has feature <code>Feature.AUTO_CLOSE_TARGET</code> enabled.
  If either of above is true, the target is also closed. Otherwise
  (not managing, feature not enabled), target is not closed.
 */
- (void)close;

/*!
 @brief Method for enabling or disabling specified feature:
  check <code>Feature</code> for list of available features.
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)configureWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f
                                                                                        withBoolean:(jboolean)state;

/*!
 @brief Method for copying contents of the current event that
  the given parser instance points to.
 Note that the method <b>will not</b> copy any other events,
  such as events contained within JSON Array or Object structures.
 <p>
  Calling this method will not advance the given
  parser, although it may cause parser to internally process
  more data (if it lazy loads contents of value events, for example)
 */
- (void)copyCurrentEventWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method for copying contents of the current event 
 <b>and following events that it encloses</b>
  the given parser instance points to.
 <p>
  So what constitutes enclosing? Here is the list of
  events that have associated enclosed events that will
  get copied:
 <ul>
  <li><code>JsonToken.START_OBJECT</code>:
    all events up to and including matching (closing)   
 <code>JsonToken.END_OBJECT</code> will be copied
   </li>
  <li><code>JsonToken.START_ARRAY</code>
    all events up to and including matching (closing)   
 <code>JsonToken.END_ARRAY</code> will be copied
   </li>
  <li><code>JsonToken.FIELD_NAME</code> the logical value (which
    can consist of a single scalar value; or a sequence of related
    events for structured types (JSON Arrays, Objects)) will
    be copied along with the name itself. So essentially the
    whole <b>field entry</b> (name and value) will be copied.
   </li>
 </ul>
 <p>
  After calling this method, parser will point to the 
 <b>last event</b> that was copied. This will either be
  the event parser already pointed to (if there were no
  enclosed events), or the last enclosed event copied.
 */
- (void)copyCurrentStructureWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)p OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method for disabling specified  features
  (check <code>Feature</code> for list of features)
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)disableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method for enabling specified parser features:
  check <code>Feature</code> for list of available features.
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)enableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method called to flush any buffered content to the underlying
  target (output stream, writer), and to flush the target itself
  as well.
 */
- (void)flush;

/*!
 @brief Method for accessing custom escapes factory uses for <code>JsonGenerator</code>s
  it creates.
 */
- (ComFasterxmlJacksonCoreIoCharacterEscapes *)getCharacterEscapes;

/*!
 @brief Method for accessing the object used for writing Java
  object as JSON content
  (using method <code>writeObject</code>).
 */
- (ComFasterxmlJacksonCoreObjectCodec *)getCodec;

/*!
 @brief Helper method, usually equivalent to:
 <code>
    getOutputContext().getCurrentValue();
 </code>
 <p>
  Note that "current value" is NOT populated (or used) by Streaming parser;
  it is only used by higher-level data-binding functionality.
 The reason it is included here is that it can be stored and accessed hierarchically,
  and gets passed through data-binding.
 @since 2.5
 */
- (id)getCurrentValue;

/*!
 @brief Bulk access method for getting state of all standard (non-dataformat-specific) 
 <code>JsonGenerator.Feature</code>s.
 @return Bit mask that defines current states of all standard <code>JsonGenerator.Feature</code>s.
 @since 2.3
 */
- (jint)getFeatureMask;

/*!
 @brief Bulk access method for getting state of all <code>FormatFeature</code>s, format-specific
  on/off configuration settings.
 @return Bit mask that defines current states of all standard <code>FormatFeature</code>s.
 @since 2.6
 */
- (jint)getFormatFeatures;

/*!
 @brief Accessor method for testing what is the highest unescaped character
  configured for this generator.This may be either positive value
  (when escaping configuration has been set and is in effect), or
  0 to indicate that no additional escaping is in effect.
 Some generators may not support additional escaping: for example,
  generators for binary formats that do not use escaping should
  simply return 0.
 @return Currently active limitation for highest non-escaped character,
    if defined; or -1 to indicate no additional escaping is performed.
 */
- (jint)getHighestEscapedChar;

/*!
 @brief Method for verifying amount of content that is buffered by generator
  but not yet flushed to the underlying target (stream, writer),
  in units (byte, char) that the generator implementation uses for buffering;
  or -1 if this information is not available.
 Unit used is often the same as the unit of underlying target (that is,
  `byte` for <code>java.io.OutputStream</code>, `char` for <code>java.io.Writer</code>),
  but may differ if buffering is done before encoding.
  Default JSON-backed implementations do use matching units.
 <p>
  Note: non-JSON implementations will be retrofitted for 2.6 and beyond;
  please report if you see -1 (missing override)
 @return Amount of content buffered in internal units, if amount known and
     accessible; -1 if not accessible.
 @since 2.6
 */
- (jint)getOutputBuffered;

/*!
 @return Context object that can give information about logical
    position within generated json content.
 */
- (ComFasterxmlJacksonCoreJsonStreamContext *)getOutputContext;

/*!
 @brief Method that can be used to get access to object that is used
  as target for generated output; this is usually either 
 <code>OutputStream</code> or <code>Writer</code>, depending on what
  generator was constructed with.
 Note that returned value may be null in some cases; including
  case where implementation does not want to exposed raw
  source to caller.
  In cases where output has been decorated, object returned here
  is the decorated version; this allows some level of interaction
  between users of generator and decorator object.
 <p>
  In general use of this accessor should be considered as
  "last effort", i.e. only used if no other mechanism is applicable.
 */
- (id)getOutputTarget;

/*!
 @brief Accessor for checking whether this generator has a configured 
 <code>PrettyPrinter</code>; returns it if so, null if none configured.
 @since 2.1
 */
- (id<ComFasterxmlJacksonCorePrettyPrinter>)getPrettyPrinter;

/*!
 @brief Method for accessing Schema that this parser uses, if any.
 Default implementation returns null.
 @since 2.1
 */
- (id<ComFasterxmlJacksonCoreFormatSchema>)getSchema;

/*!
 @brief Method that can be called to determine whether this generator
  is closed or not.If it is closed, no more output can be done.
 */
- (jboolean)isClosed;

/*!
 @brief Method for checking whether given feature is enabled.
 Check <code>Feature</code> for list of available features.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Bulk set method for (re)setting states of <code>FormatFeature</code>s,
  by specifying values (set / clear) along with a mask, to determine
  which features to change, if any.
 <p>
  Default implementation will simply throw an exception to indicate that
  the generator implementation does not support any <code>FormatFeature</code>s.
 @param values Bit mask of set/clear state for features to change
 @param mask Bit mask of features to change
 @since 2.6
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)overrideFormatFeaturesWithInt:(jint)values
                                                                withInt:(jint)mask;

/*!
 @brief Bulk set method for (re)setting states of features specified by <code>mask</code>.
 Functionally equivalent to
 <code>
     int oldState = getFeatureMask();
     int newState = (oldState &amp; ~mask) | (values &amp; mask);
     setFeatureMask(newState);
 </code>
  but preferred as this lets caller more efficiently specify actual changes made.
 @param values Bit mask of set/clear state for features to change
 @param mask Bit mask of features to change
 @since 2.6
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)overrideStdFeaturesWithInt:(jint)values
                                                             withInt:(jint)mask;

/*!
 @brief Method for defining custom escapes factory uses for <code>JsonGenerator</code>s
  it creates.
 <p>
  Default implementation does nothing and simply returns this instance.
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setCharacterEscapesWithComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)esc;

/*!
 @brief Method that can be called to set or reset the object to
  use for writing Java objects as JsonContent
  (using method <code>writeObject</code>).
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)oc;

/*!
 @brief Helper method, usually equivalent to:
 <code>
    getOutputContext().setCurrentValue(v);
 </code>
 @since 2.5
 */
- (void)setCurrentValueWithId:(id)v;

/*!
 @brief Bulk set method for (re)setting states of all standard <code>Feature</code>s
 @since 2.3
 @param values Bitmask that defines which <code>Feature</code> s are enabled
      and which disabled
 @return This parser object, to allow chaining of calls
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setFeatureMaskWithInt:(jint)values;

/*!
 @brief Method that can be called to request that generator escapes
  all character codes above specified code point (if positive value);
  or, to not escape any characters except for ones that must be
  escaped for the data format (if -1).
 To force escaping of all non-ASCII characters, for example,
  this method would be called with value of 127.
 <p>
  Note that generators are NOT required to support setting of value
  higher than 127, because there are other ways to affect quoting
  (or lack thereof) of character codes between 0 and 127.
  Not all generators support concept of escaping, either; if so,
  calling this method will have no effect.
 <p>
  Default implementation does nothing; sub-classes need to redefine
  it according to rules of supported data format.
 @param charCode Either -1 to indicate that no additional escaping    is to be done; or highest code point not to escape (meaning higher
     ones will be), if positive value.
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setHighestNonEscapedCharWithInt:(jint)charCode;

/*!
 @brief Method for setting a custom pretty printer, which is usually
  used to add indentation for improved human readability.
 By default, generator does not do pretty printing.
 <p>
  To use the default pretty printer that comes with core
  Jackson distribution, call <code>useDefaultPrettyPrinter</code>
  instead.
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setPrettyPrinterWithComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp;

/*!
 @brief Method that allows overriding String used for separating root-level
  JSON values (default is single space character)
 <p>
  Default implementation throws <code>UnsupportedOperationException</code>.
 @param sep Separator to use, if any; null means that no separator is    automatically added
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)setRootValueSeparatorWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)sep;

/*!
 @brief Method to call to make this generator use specified schema.
 Method must be called before generating any content, right after instance
  has been created.
  Note that not all generators support schemas; and those that do usually only
  accept specific types of schemas: ones defined for data format this generator
  produces.
 <p>
  If generator does not support specified schema, <code>UnsupportedOperationException</code>
  is thrown.
 @param schema Schema to use
 @throw UnsupportedOperationExceptionif generator does not support schema
 */
- (void)setSchemaWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Convenience method for enabling pretty-printing using
  the default pretty printer
  (<code>com.fasterxml.jackson.core.util.DefaultPrettyPrinter</code>).
 @return Generator itself (this), to allow chaining
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)useDefaultPrettyPrinter;

/*!
 @brief Accessor for finding out version of the bundle that provided this generator instance.
 */
- (ComFasterxmlJacksonCoreVersion *)version__;

/*!
 @brief Value write method that can be called to write a single
  array (sequence of <code>JsonToken.START_ARRAY</code>, zero or
  more <code>JsonToken.VALUE_NUMBER_FLOAT</code>, <code>JsonToken.END_ARRAY</code>)
 @since 2.8
 @param array Array that contains values to write
 @param offset Offset of the first element to write, within array
 @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */
- (void)writeArrayWithDoubleArray:(IOSDoubleArray *)array
                          withInt:(jint)offset
                          withInt:(jint)length;

/*!
 @brief Value write method that can be called to write a single
  array (sequence of <code>JsonToken.START_ARRAY</code>, zero or
  more <code>JsonToken.VALUE_NUMBER_INT</code>, <code>JsonToken.END_ARRAY</code>)
 @since 2.8
 @param array Array that contains values to write
 @param offset Offset of the first element to write, within array
 @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */
- (void)writeArrayWithIntArray:(IOSIntArray *)array
                       withInt:(jint)offset
                       withInt:(jint)length;

/*!
 @brief Value write method that can be called to write a single
  array (sequence of <code>JsonToken.START_ARRAY</code>, zero or
  more <code>JsonToken.VALUE_NUMBER_INT</code>, <code>JsonToken.END_ARRAY</code>)
 @since 2.8
 @param array Array that contains values to write
 @param offset Offset of the first element to write, within array
 @param length Number of elements in array to write, from `offset` to `offset + len - 1`
 */
- (void)writeArrayWithLongArray:(IOSLongArray *)array
                        withInt:(jint)offset
                        withInt:(jint)length;

/*!
 @brief Convenience method for outputting a field entry ("member")
  (that will contain a JSON Array value), and the START_ARRAY marker.
 Equivalent to:
 @code

   writeFieldName(fieldName);
   writeStartArray();
 
@endcode
 <p>
  Note: caller still has to take care to close the array
  (by calling {#link #writeEndArray}) after writing all values
  of the value Array.
 */
- (void)writeArrayFieldStartWithNSString:(NSString *)fieldName;

/*!
 @brief Method that will output given chunk of binary data as base64
  encoded, as a complete String value (surrounded by double quotes).
 This method defaults
 <p>
  Note: because JSON Strings can not contain unescaped linefeeds,
  if linefeeds are included (as per last argument), they must be
  escaped. This adds overhead for decoding without improving
  readability.
  Alternatively if linefeeds are not included,
  resulting String value may violate the requirement of base64
  RFC which mandates line-length of 76 characters and use of
  linefeeds. However, all <code>JsonParser</code> implementations
  are required to accept such "long line base64"; as do
  typical production-level base64 decoders.
 @param bv Base64 variant to use: defines details such as    whether padding is used (and if so, using which character);
     what is the maximum line length before adding linefeed,
     and also the underlying alphabet to use.
 */
- (void)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)bv
                                              withByteArray:(IOSByteArray *)data
                                                    withInt:(jint)offset
                                                    withInt:(jint)len;

/*!
 @brief Method similar to <code>writeBinary(Base64Variant,byte[],int,int)</code>,
  but where input is provided through a stream, allowing for incremental
  writes without holding the whole input in memory.
 @param bv Base64 variant to use
 @param data InputStream to use for reading binary data to write.     Will not be closed after successful write operation
 @param dataLength (optional) number of bytes that will be available;     or -1 to be indicate it is not known.
      If a positive length is given, 
  <code> data </code>  MUST provide at least     that many bytes: if not, an exception will be thrown.
      Note that implementations
      need not support cases where length is not known in advance; this
      depends on underlying data format: JSON output does NOT require length,
      other formats may.
 @return Number of bytes read from <code>data</code> and written as binary payload
 @since 2.1
 */
- (jint)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)bv
                                      withJavaIoInputStream:(JavaIoInputStream *)data
                                                    withInt:(jint)dataLength;

/*!
 @brief Similar to <code>writeBinary(Base64Variant,byte[],int,int)</code>,
  but assumes default to using the Jackson default Base64 variant 
  (which is <code>Base64Variants.MIME_NO_LINEFEEDS</code>).Also
  assumes that whole byte array is to be output.
 */
- (void)writeBinaryWithByteArray:(IOSByteArray *)data;

/*!
 @brief Similar to <code>writeBinary(Base64Variant,byte[],int,int)</code>,
  but default to using the Jackson default Base64 variant 
  (which is <code>Base64Variants.MIME_NO_LINEFEEDS</code>).
 */
- (void)writeBinaryWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)len;

/*!
 @brief Similar to <code>writeBinary(Base64Variant,InputStream,int)</code>,
  but assumes default to using the Jackson default Base64 variant 
  (which is <code>Base64Variants.MIME_NO_LINEFEEDS</code>).
 @param data InputStream to use for reading binary data to write.     Will not be closed after successful write operation
 @param dataLength (optional) number of bytes that will be available;     or -1 to be indicate it is not known. Note that implementations
      need not support cases where length is not known in advance; this
      depends on underlying data format: JSON output does NOT require length,
      other formats may
 */
- (jint)writeBinaryWithJavaIoInputStream:(JavaIoInputStream *)data
                                 withInt:(jint)dataLength;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that contains specified data in base64-encoded form.
 Equivalent to:
 @code

   writeFieldName(fieldName);
   writeBinary(value);
 
@endcode
 */
- (void)writeBinaryFieldWithNSString:(NSString *)fieldName
                       withByteArray:(IOSByteArray *)data;

/*!
 @brief Method for outputting literal JSON boolean value (one of
  Strings 'true' and 'false').
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 */
- (void)writeBooleanWithBoolean:(jboolean)state;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has a boolean value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeBoolean(value);
 
@endcode
 */
- (void)writeBooleanFieldWithNSString:(NSString *)fieldName
                          withBoolean:(jboolean)value;

/*!
 @brief Method that can be called on backends that support passing opaque datatypes of
  non-JSON formats
 @since 2.8
 */
- (void)writeEmbeddedObjectWithId:(id)object;

/*!
 @brief Method for writing closing marker of a JSON Array value
  (character ']'; plus possible white space decoration
  if pretty-printing is enabled).
 <p>
  Marker can be written if the innermost structured type
  is Array.
 */
- (void)writeEndArray;

/*!
 @brief Method for writing closing marker of a JSON Object value
  (character '}'; plus possible white space decoration
  if pretty-printing is enabled).
 <p>
  Marker can be written if the innermost structured type
  is Object, and the last written event was either a
  complete value, or START-OBJECT marker (see JSON specification
  for more details).
 */
- (void)writeEndObject;

/*!
 @brief Alternative to <code>writeFieldName(String)</code> that may be used
  in cases where property key is of numeric type; either where
  underlying format supports such notion (some binary formats do,
  unlike JSON), or for convenient conversion into String presentation.
 Default implementation will simply convert id into <code>String</code>
  and call <code>writeFieldName(String)</code>.
 @since 2.8
 */
- (void)writeFieldIdWithLong:(jlong)id_;

/*!
 @brief Method similar to <code>writeFieldName(String)</code>, main difference
  being that it may perform better as some of processing (such as
  quoting of certain characters, or encoding into external encoding
  if supported by generator) can be done just once and reused for
  later calls.
 <p>
  Default implementation simple uses unprocessed name container in
  serialized String; implementations are strongly encouraged to make
  use of more efficient methods argument object has.
 */
- (void)writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name;

/*!
 @brief Method for writing a field name (JSON String surrounded by
  double quotes: syntactically identical to a JSON String value),
  possibly decorated by white space if pretty-printing is enabled.
 <p>
  Field names can only be written in Object context (check out
  JSON specification for details), when field name is expected
  (field names alternate with values).
 */
- (void)writeFieldNameWithNSString:(NSString *)name;

/*!
 @brief Method for outputting literal JSON null value.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 */
- (void)writeNull;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has JSON literal value null.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNull();
 
@endcode
 */
- (void)writeNullFieldWithNSString:(NSString *)fieldName;

/*!
 @brief Method for outputting indicate JSON numeric value.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)v;

/*!
 @brief Method for outputting given value as JSON number.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)v;

/*!
 @brief Method for outputting indicate JSON numeric value.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithDouble:(jdouble)v;

/*!
 @brief Method for outputting indicate JSON numeric value.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithFloat:(jfloat)v;

/*!
 @brief Method for outputting given value as JSON number.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithInt:(jint)v;

/*!
 @brief Method for outputting given value as JSON number.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 */
- (void)writeNumberWithLong:(jlong)v;

/*!
 @brief Method for outputting given value as JSON number.
 Can be called in any context where a value is expected
  (Array value, Object field value, root-level value).
  Additional white space may be added around the value
  if pretty-printing is enabled.
 @param v Number value to write
 @since 2.2
 */
- (void)writeNumberWithShort:(jshort)v;

/*!
 @brief Write method that can be used for custom numeric types that can
  not be (easily?)
 converted to "standard" Java number types.
 Because numbers are not surrounded by double quotes, regular 
 <code>writeString</code> method can not be used; nor 
 <code>writeRaw</code> because that does not properly handle
  value separators needed in Array or Object contexts.
 <p>
  Note: because of lack of type safety, some generator
  implementations may not be able to implement this
  method. For example, if a binary JSON format is used,
  it may require type information for encoding; similarly
  for generator-wrappers around Java objects or JSON nodes.
  If implementation does not implement this method,
  it needs to throw <code>UnsupportedOperationException</code>.
 @throw UnsupportedOperationExceptionIf underlying data format does not
    support numbers serialized textually AND if generator is not allowed
    to just output a String instead (Schema-based formats may require actual
    number, for example)
 */
- (void)writeNumberWithNSString:(NSString *)encodedValue;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has the specified numeric value.
 Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNumber(value);
 
@endcode
 */
- (void)writeNumberFieldWithNSString:(NSString *)fieldName
              withJavaMathBigDecimal:(JavaMathBigDecimal *)value;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has the specified numeric value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNumber(value);
 
@endcode
 */
- (void)writeNumberFieldWithNSString:(NSString *)fieldName
                          withDouble:(jdouble)value;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has the specified numeric value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNumber(value);
 
@endcode
 */
- (void)writeNumberFieldWithNSString:(NSString *)fieldName
                           withFloat:(jfloat)value;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has the specified numeric value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNumber(value);
 
@endcode
 */
- (void)writeNumberFieldWithNSString:(NSString *)fieldName
                             withInt:(jint)value;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has the specified numeric value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeNumber(value);
 
@endcode
 */
- (void)writeNumberFieldWithNSString:(NSString *)fieldName
                            withLong:(jlong)value;

/*!
 @brief Method for writing given Java object (POJO) as Json.
 Exactly how the object gets written depends on object
  in question (ad on codec, its configuration); for most
  beans it will result in JSON Object, but for others JSON
  Array, or String or numeric value (and for nulls, JSON
  null literal. 
 <b>NOTE</b>: generator must have its <b>object codec</b>
  set to non-null value; for generators created by a mapping
  factory this is the case, for others not.
 */
- (void)writeObjectWithId:(id)pojo;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has contents of specific Java object as its value.
 Equivalent to:
 @code

   writeFieldName(fieldName);
   writeObject(pojo);
 
@endcode
 */
- (void)writeObjectFieldWithNSString:(NSString *)fieldName
                              withId:(id)pojo;

/*!
 @brief Convenience method for outputting a field entry ("member")
  (that will contain a JSON Object value), and the START_OBJECT marker.
 Equivalent to:
 @code

   writeFieldName(fieldName);
   writeStartObject();
 
@endcode
 <p>
  Note: caller still has to take care to close the Object
  (by calling {#link #writeEndObject}) after writing all
  entries of the value Object.
 */
- (void)writeObjectFieldStartWithNSString:(NSString *)fieldName;

/*!
 @brief Method that can be called to output so-called native Object Id.
 Note that it may only be called after ensuring this is legal
  (with <code>canWriteObjectId()</code>), as not all data formats
  have native type id support; and some may only allow them in
  certain positions or locations.
  If output is not allowed by the data format in this position,
  a <code>JsonGenerationException</code> will be thrown.
 @since 2.3
 */
- (void)writeObjectIdWithId:(id)id_;

/*!
 @brief Method that can be called to output references to native Object Ids.
 Note that it may only be called after ensuring this is legal
  (with <code>canWriteObjectId()</code>), as not all data formats
  have native type id support; and some may only allow them in
  certain positions or locations.
  If output is not allowed by the data format in this position,
  a <code>JsonGenerationException</code> will be thrown.
 */
- (void)writeObjectRefWithId:(id)id_;

/*!
 @brief Method called to indicate that a property in this position was
  skipped.It is usually only called for generators that return 
 <code>false</code> from <code>canOmitFields()</code>.
 <p>
  Default implementation does nothing.
 @since 2.3
 */
- (void)writeOmittedFieldWithNSString:(NSString *)fieldName;

/*!
 @brief Method that will force generator to copy
  input text verbatim with <b>no</b> modifications (including
  that no escaping is done and no separators are added even
  if context [array, object] would otherwise require such).
 If such separators are desired, use 
 <code>writeRawValue(String)</code> instead.
 <p>
  Note that not all generator implementations necessarily support
  such by-pass methods: those that do not will throw 
 <code>UnsupportedOperationException</code>.
 */
- (void)writeRawWithChar:(jchar)c;

/*!
 @brief Method that will force generator to copy
  input text verbatim with <b>no</b> modifications (including
  that no escaping is done and no separators are added even
  if context [array, object] would otherwise require such).
 If such separators are desired, use 
 <code>writeRawValue(String)</code> instead.
 <p>
  Note that not all generator implementations necessarily support
  such by-pass methods: those that do not will throw 
 <code>UnsupportedOperationException</code>.
 */
- (void)writeRawWithCharArray:(IOSCharArray *)text
                      withInt:(jint)offset
                      withInt:(jint)len;

/*!
 @brief Method that will force generator to copy
  input text verbatim with <b>no</b> modifications (including
  that no escaping is done and no separators are added even
  if context [array, object] would otherwise require such).
 If such separators are desired, use 
 <code>writeRawValue(String)</code> instead.
 <p>
  Note that not all generator implementations necessarily support
  such by-pass methods: those that do not will throw 
 <code>UnsupportedOperationException</code>.
 <p>
  The default implementation delegates to <code>writeRaw(String)</code>;
  other backends that support raw inclusion of text are encouraged
  to implement it in more efficient manner (especially if they
  use UTF-8 encoding).
 @since 2.1
 */
- (void)writeRawWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)raw;

/*!
 @brief Method that will force generator to copy
  input text verbatim with <b>no</b> modifications (including
  that no escaping is done and no separators are added even
  if context [array, object] would otherwise require such).
 If such separators are desired, use 
 <code>writeRawValue(String)</code> instead.
 <p>
  Note that not all generator implementations necessarily support
  such by-pass methods: those that do not will throw 
 <code>UnsupportedOperationException</code>.
 */
- (void)writeRawWithNSString:(NSString *)text;

/*!
 @brief Method that will force generator to copy
  input text verbatim with <b>no</b> modifications (including
  that no escaping is done and no separators are added even
  if context [array, object] would otherwise require such).
 If such separators are desired, use 
 <code>writeRawValue(String)</code> instead.
 <p>
  Note that not all generator implementations necessarily support
  such by-pass methods: those that do not will throw 
 <code>UnsupportedOperationException</code>.
 */
- (void)writeRawWithNSString:(NSString *)text
                     withInt:(jint)offset
                     withInt:(jint)len;

/*!
 @brief Method similar to <code>writeString(String)</code> but that takes as
  its input a UTF-8 encoded String that is to be output as-is, without additional
  escaping (type of which depends on data format; backslashes for JSON).
 However, quoting that data format requires (like double-quotes for JSON) will be added
  around the value if and as necessary.
 <p>
  Note that some backends may choose not to support this method: for
  example, if underlying destination is a <code>java.io.Writer</code>
  using this method would require UTF-8 decoding.
  If so, implementation may instead choose to throw a 
 <code>UnsupportedOperationException</code> due to ineffectiveness
  of having to decode input.
 */
- (void)writeRawUTF8StringWithByteArray:(IOSByteArray *)text
                                withInt:(jint)offset
                                withInt:(jint)length;

- (void)writeRawValueWithCharArray:(IOSCharArray *)text
                           withInt:(jint)offset
                           withInt:(jint)len;

/*!
 @brief Method similar to <code>writeRawValue(String)</code>, but potentially more
  efficient as it may be able to use pre-encoded content (similar to 
 <code>writeRaw(SerializableString)</code>.
 @since 2.5
 */
- (void)writeRawValueWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)raw;

/*!
 @brief Method that will force generator to copy
  input text verbatim without any modifications, but assuming
  it must constitute a single legal JSON value (number, string,
  boolean, null, Array or List).Assuming this, proper separators
  are added if and as needed (comma or colon), and generator
  state updated to reflect this.
 */
- (void)writeRawValueWithNSString:(NSString *)text;

- (void)writeRawValueWithNSString:(NSString *)text
                          withInt:(jint)offset
                          withInt:(jint)len;

/*!
 @brief Method for writing starting marker of a Array value
  (for JSON this is character '['; plus possible white space decoration
  if pretty-printing is enabled).
 <p>
  Array values can be written in any context where values
  are allowed: meaning everywhere except for when
  a field name is expected.
 */
- (void)writeStartArray;

/*!
 @brief Method for writing start marker of an Array value, similar
  to <code>writeStartArray()</code>, but also specifying how many
  elements will be written for the array before calling 
 <code>writeEndArray()</code>.
 <p>
  Default implementation simply calls <code>writeStartArray()</code>.
 @param size Number of elements this array will have: actual    number of values written (before matching call to
     <code>writeEndArray()</code>
   MUST match; generator MAY verify    this is the case.
 @since 2.4
 */
- (void)writeStartArrayWithInt:(jint)size;

/*!
 @brief Method for writing starting marker of a JSON Object value
  (character '{'; plus possible white space decoration
  if pretty-printing is enabled).
 <p>
  Object values can be written in any context where values
  are allowed: meaning everywhere except for when
  a field name is expected.
 */
- (void)writeStartObject;

/*!
 @brief Method for writing starting marker of a JSON Object value
  (character '{'; plus possible white space decoration
  if pretty-printing is enabled), to represent Java given
  as the argument.Argument is offered as metadata, but more
  importantly it should be assigned as the "current value"
  for the Object content that gets constructed and initialized.
 <p>
  Object values can be written in any context where values
  are allowed: meaning everywhere except for when
  a field name is expected.
 @since 2.8.
 */
- (void)writeStartObjectWithId:(id)forValue;

/*!
 @brief Method for outputting a String value.Depending on context
  this means either array element, (object) field value or
  a stand alone String; but in all cases, String will be
  surrounded in double quotes, and contents will be properly
  escaped as required by JSON specification.
 */
- (void)writeStringWithCharArray:(IOSCharArray *)text
                         withInt:(jint)offset
                         withInt:(jint)len;

/*!
 @brief Method for outputting a String value.Depending on context
  this means either array element, (object) field value or
  a stand alone String; but in all cases, String will be
  surrounded in double quotes, and contents will be properly
  escaped as required by JSON specification.
 If the reader is null, then write a null.
  If len is &lt; 0, then write all contents of the reader.
  Otherwise, write only len characters.
 @since 2.9
 */
- (void)writeStringWithJavaIoReader:(JavaIoReader *)reader
                            withInt:(jint)len;

/*!
 @brief Method similar to <code>writeString(String)</code>, but that takes 
 <code>SerializableString</code> which can make this potentially
  more efficient to call as generator may be able to reuse
  quoted and/or encoded representation.
 <p>
  Default implementation just calls <code>writeString(String)</code>;
  sub-classes should override it with more efficient implementation
  if possible.
 */
- (void)writeStringWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text;

/*!
 @brief Method for outputting a String value.Depending on context
  this means either array element, (object) field value or
  a stand alone String; but in all cases, String will be
  surrounded in double quotes, and contents will be properly
  escaped as required by JSON specification.
 */
- (void)writeStringWithNSString:(NSString *)text;

/*!
 @brief Convenience method for outputting a field entry ("member")
  that has a String value.Equivalent to:
 @code

   writeFieldName(fieldName);
   writeString(value);
 
@endcode
 <p>
  Note: many performance-sensitive implementations override this method
 */
- (void)writeStringFieldWithNSString:(NSString *)fieldName
                        withNSString:(NSString *)value;

/*!
 @brief Method for writing given JSON tree (expressed as a tree
  where given JsonNode is the root) using this generator.
 This will generally just call 
 <code>writeObject</code> with given node, but is added
  for convenience and to make code more explicit in cases
  where it deals specifically with trees.
 */
- (void)writeTreeWithComFasterxmlJacksonCoreTreeNode:(id<ComFasterxmlJacksonCoreTreeNode>)rootNode;

/*!
 @brief Method that can be called to output so-called native Type Id.
 Note that it may only be called after ensuring this is legal
  (with <code>canWriteTypeId()</code>), as not all data formats
  have native type id support; and some may only allow them in
  certain positions or locations.
  If output is not allowed by the data format in this position,
  a <code>JsonGenerationException</code> will be thrown.
 @since 2.3
 */
- (void)writeTypeIdWithId:(id)id_;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypePrefixWithComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeIdDef;

- (ComFasterxmlJacksonCoreTypeWritableTypeId *)writeTypeSuffixWithComFasterxmlJacksonCoreTypeWritableTypeId:(ComFasterxmlJacksonCoreTypeWritableTypeId *)typeIdDef;

/*!
 @brief Method similar to <code>writeString(String)</code> but that takes as its input
  a UTF-8 encoded String which has <b>not</b> been escaped using whatever
  escaping scheme data format requires (for JSON that is backslash-escaping
  for control characters and double-quotes; for other formats something else).
 This means that textual JSON backends need to check if value needs
  JSON escaping, but otherwise can just be copied as is to output.
  Also, quoting that data format requires (like double-quotes for JSON) will be added
  around the value if and as necessary.
 <p>
  Note that some backends may choose not to support this method: for
  example, if underlying destination is a <code>java.io.Writer</code>
  using this method would require UTF-8 decoding.
  In this case
  generator implementation may instead choose to throw a 
 <code>UnsupportedOperationException</code> due to ineffectiveness
  of having to decode input.
 */
- (void)writeUTF8StringWithByteArray:(IOSByteArray *)text
                             withInt:(jint)offset
                             withInt:(jint)length;

#pragma mark Protected

- (instancetype __nonnull)init;

/*!
 @brief Helper method used for constructing and throwing 
 <code>JsonGenerationException</code> with given base message.
 <p>
  Note that sub-classes may override this method to add more detail
  or use a <code>JsonGenerationException</code> sub-class.
 */
- (void)_reportErrorWithNSString:(NSString *)msg;

- (void)_reportUnsupportedOperation;

- (void)_throwInternal;

/*!
 @since 2.8
 */
- (void)_verifyOffsetsWithInt:(jint)arrayLength
                      withInt:(jint)offset
                      withInt:(jint)length;

/*!
 @brief Helper method to try to call appropriate write method for given
  untyped Object.At this point, no structural conversions should be done,
  only simple basic types are to be coerced as necessary.
 @param value Non-null value to write
 */
- (void)_writeSimpleObjectWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreJsonGenerator)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonGenerator, _cfgPrettyPrinter_, id<ComFasterxmlJacksonCorePrettyPrinter>)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonGenerator_init(ComFasterxmlJacksonCoreJsonGenerator *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonGenerator)

#endif

#if !defined (ComFasterxmlJacksonCoreJsonGenerator_Feature_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator || defined(INCLUDE_ComFasterxmlJacksonCoreJsonGenerator_Feature))
#define ComFasterxmlJacksonCoreJsonGenerator_Feature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum) {
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_AUTO_CLOSE_TARGET = 0,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_AUTO_CLOSE_JSON_CONTENT = 1,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_FLUSH_PASSED_TO_STREAM = 2,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_QUOTE_FIELD_NAMES = 3,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_QUOTE_NON_NUMERIC_NUMBERS = 4,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_WRITE_NUMBERS_AS_STRINGS = 5,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_WRITE_BIGDECIMAL_AS_PLAIN = 6,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_ESCAPE_NON_ASCII = 7,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_STRICT_DUPLICATE_DETECTION = 8,
  ComFasterxmlJacksonCoreJsonGenerator_Feature_Enum_IGNORE_UNKNOWN = 9,
};

/*!
 @brief Enumeration that defines all togglable features for generators.
 */
@interface ComFasterxmlJacksonCoreJsonGenerator_Feature : JavaLangEnum

#pragma mark Public

/*!
 @brief Method that calculates bit set (flags) of all features that
  are enabled by default.
 */
+ (jint)collectDefaults;

- (jboolean)enabledByDefault;

/*!
 @since 2.3
 */
- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonCoreJsonGenerator_Feature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonGenerator_Feature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_values_[];

/*!
 @brief Feature that determines whether generator will automatically
  close underlying output target that is NOT owned by the
  generator.
 If disabled, calling application has to separately
  close the underlying <code>OutputStream</code> and <code>Writer</code>
  instances used to create the generator. If enabled, generator
  will handle closing, as long as generator itself gets closed:
  this happens when end-of-input is encountered, or generator
  is closed by a call to <code>JsonGenerator.close</code>.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_AUTO_CLOSE_TARGET(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_TARGET)

/*!
 @brief Feature that determines what happens when the generator is
  closed while there are still unmatched 
 <code>JsonToken.START_ARRAY</code> or <code>JsonToken.START_OBJECT</code>
  entries in output content.If enabled, such Array(s) and/or
  Object(s) are automatically closed; if disabled, nothing
  specific is done.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_AUTO_CLOSE_JSON_CONTENT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_JSON_CONTENT)

/*!
 @brief Feature that specifies that calls to <code>flush</code> will cause
  matching <code>flush()</code> to underlying <code>OutputStream</code>
  or <code>Writer</code>; if disabled this will not be done.
 Main reason to disable this feature is to prevent flushing at
  generator level, if it is not possible to prevent method being
  called by other code (like <code>ObjectMapper</code> or third
  party libraries).
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_FLUSH_PASSED_TO_STREAM(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, FLUSH_PASSED_TO_STREAM)

/*!
 @brief Feature that determines whether JSON Object field names are
  quoted using double-quotes, as specified by JSON specification
  or not.Ability to disable quoting was added to support use
  cases where they are not usually expected, which most commonly
  occurs when used straight from Javascript.
 <p>
  Feature is enabled by default (since it is required by JSON specification).
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_QUOTE_FIELD_NAMES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_FIELD_NAMES)

/*!
 @brief Feature that determines whether "exceptional" (not real number)
  float/double values are output as quoted strings.
 The values checked are Double.Nan,
  Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and 
  associated Float values).
  If feature is disabled, these numbers are still output using
  associated literal values, resulting in non-conformant
  output.
 <p>
  Feature is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_QUOTE_NON_NUMERIC_NUMBERS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_NON_NUMERIC_NUMBERS)

/*!
 @brief Feature that forces all Java numbers to be written as JSON strings.
 Default state is 'false', meaning that Java numbers are to
  be serialized using basic numeric serialization (as JSON
  numbers, integral or floating point). If enabled, all such
  numeric values are instead written out as JSON Strings.
 <p>
  One use case is to avoid problems with Javascript limitations:
  since Javascript standard specifies that all number handling
  should be done using 64-bit IEEE 754 floating point values,
  result being that some 64-bit integer values can not be
  accurately represent (as mantissa is only 51 bit wide).
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_WRITE_NUMBERS_AS_STRINGS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, WRITE_NUMBERS_AS_STRINGS)

/*!
 @brief Feature that determines whether <code>java.math.BigDecimal</code> entries are
  serialized using <code>java.math.BigDecimal</code> to prevent
  values to be written using scientific notation.
 <p>
  Feature is disabled by default, so default output mode is used; this generally
  depends on how <code>BigDecimal</code> has been created.
 @since 2.3
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_WRITE_BIGDECIMAL_AS_PLAIN(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, WRITE_BIGDECIMAL_AS_PLAIN)

/*!
 @brief Feature that specifies that all characters beyond 7-bit ASCII
  range (i.e.code points of 128 and above) need to be output
  using format-specific escapes (for JSON, backslash escapes),
  if format uses escaping mechanisms (which is generally true
  for textual formats but not for binary formats).
 <p>
  Note that this setting may not necessarily make sense for all
  data formats (for example, binary formats typically do not use
  any escaping mechanisms; and some textual formats do not have
  general-purpose escaping); if so, settings is simply ignored.
  Put another way, effects of this feature are data-format specific.
 <p>
  Feature is disabled by default.
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_ESCAPE_NON_ASCII(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, ESCAPE_NON_ASCII)

/*!
 @brief Feature that determines whether <code>JsonGenerator</code> will explicitly
  check that no duplicate JSON Object field names are written.
 If enabled, generator will check all names within context and report
  duplicates by throwing a <code>JsonGenerationException</code>; if disabled,
  no such checking will be done. Assumption in latter case is
  that caller takes care of not trying to write duplicate names.
 <p>
  Note that enabling this feature will incur performance overhead
  due to having to store and check additional information.
 <p>
  Feature is disabled by default.
 @since 2.3
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_STRICT_DUPLICATE_DETECTION(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, STRICT_DUPLICATE_DETECTION)

/*!
 @brief Feature that determines what to do if the underlying data format requires knowledge
  of all properties to output, and if no definition is found for a property that
  caller tries to write.If enabled, such properties will be quietly ignored;
  if disabled, a <code>JsonProcessingException</code> will be thrown to indicate the
  problem.
 Typically most textual data formats do NOT require schema information (although
  some do, such as CSV), whereas many binary data formats do require definitions
  (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
 <p>
  Note that support for this feature is implemented by individual data format
  module, if (and only if) it makes sense for the format in question. For JSON,
  for example, this feature has no effect as properties need not be pre-defined.
 <p>
  Feature is disabled by default, meaning that if the underlying data format
  requires knowledge of all properties to output, attempts to write an unknown
  property will result in a <code>JsonProcessingException</code>
 @since 2.5
 */
inline ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_get_IGNORE_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonGenerator_Feature, IGNORE_UNKNOWN)

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonGenerator_Feature_collectDefaults(void);

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreJsonGenerator_Feature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonGenerator_Feature *ComFasterxmlJacksonCoreJsonGenerator_Feature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonGenerator_Feature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonGenerator")
