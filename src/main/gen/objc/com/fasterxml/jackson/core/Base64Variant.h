//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/Base64Variant.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreBase64Variant")
#ifdef RESTRICT_ComFasterxmlJacksonCoreBase64Variant
#define INCLUDE_ALL_ComFasterxmlJacksonCoreBase64Variant 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreBase64Variant 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreBase64Variant

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreBase64Variant_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreBase64Variant || defined(INCLUDE_ComFasterxmlJacksonCoreBase64Variant))
#define ComFasterxmlJacksonCoreBase64Variant_

#define RESTRICT_ComFasterxmlJacksonCoreUtilNamed 1
#define INCLUDE_ComFasterxmlJacksonCoreUtilNamed 1
#include "com/fasterxml/jackson/core/util/Named.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreUtilByteArrayBuilder;
@class IOSByteArray;
@class IOSCharArray;
@class JavaLangStringBuilder;

/*!
 @brief Class used to define specific details of which
  variant of Base64 encoding/decoding is to be used.Although there is
  somewhat standard basic version (so-called "MIME Base64"), other variants
  exists, see <a href="http://en.wikipedia.org/wiki/Base64">Base64 Wikipedia entry</a> for details.
 @author Tatu Saloranta
 */
@interface ComFasterxmlJacksonCoreBase64Variant : NSObject < ComFasterxmlJacksonCoreUtilNamed, JavaIoSerializable > {
 @public
  /*!
   @brief Symbolic name of variant; used for diagnostics/debugging.
   <p>
  Note that this is the only non-transient field; used when reading
  back from serialized state.
 <p>
  Also: must not be private, accessed from `BaseVariants`
   */
  NSString *_name_;
}

#pragma mark Public

/*!
 @brief "Copy constructor" that can be used when the base alphabet is identical
  to one used by another variant, but other details (padding, maximum
  line length) differ
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)base
                                                          withNSString:(NSString *)name
                                                           withBoolean:(jboolean)usesPadding
                                                              withChar:(jchar)paddingChar
                                                               withInt:(jint)maxLineLength;

/*!
 @brief "Copy constructor" that can be used when the base alphabet is identical
  to one used by another variant except for the maximum line length
  (and obviously, name).
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)base
                                                          withNSString:(NSString *)name
                                                               withInt:(jint)maxLineLength;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)base64Alphabet
                               withBoolean:(jboolean)usesPadding
                                  withChar:(jchar)paddingChar
                                   withInt:(jint)maxLineLength;

/*!
 @brief Convenience method for decoding contents of a Base64-encoded String,
  using this variant's settings.
 @param input
 @throw IllegalArgumentExceptionif input is not valid base64 encoded data
 */
- (IOSByteArray *)decodeWithNSString:(NSString *)input;

/*!
 @brief Convenience method for decoding contents of a Base64-encoded String,
  using this variant's settings
  and appending decoded binary data using provided <code>ByteArrayBuilder</code>.
 <p>
  NOTE: builder will NOT be reset before decoding (nor cleared afterwards);
  assumption is that caller will ensure it is given in proper state, and
  used as appropriate afterwards.
 @since 2.3
 @throw IllegalArgumentExceptionif input is not valid base64 encoded data
 */
- (void)decodeWithNSString:(NSString *)str
withComFasterxmlJacksonCoreUtilByteArrayBuilder:(ComFasterxmlJacksonCoreUtilByteArrayBuilder *)builder;

- (jint)decodeBase64ByteWithByte:(jbyte)b;

/*!
 @return 6-bit decoded value, if valid character;
 */
- (jint)decodeBase64CharWithChar:(jchar)c;

- (jint)decodeBase64CharWithInt:(jint)ch;

/*!
 @brief Convenience method for converting given byte array as base64 encoded
  String using this variant's settings.
 Resulting value is "raw", that is, not enclosed in double-quotes.
 @param input Byte array to encode
 */
- (NSString *)encodeWithByteArray:(IOSByteArray *)input;

/*!
 @brief Convenience method for converting given byte array as base64 encoded String
  using this variant's settings,
  optionally enclosed in double-quotes.
 @param input Byte array to encode
 @param addQuotes Whether to surround resulting value in double quotes or not
 */
- (NSString *)encodeWithByteArray:(IOSByteArray *)input
                      withBoolean:(jboolean)addQuotes;

- (jbyte)encodeBase64BitsAsByteWithInt:(jint)value;

- (jchar)encodeBase64BitsAsCharWithInt:(jint)value;

/*!
 @brief Method that encodes given right-aligned (LSB) 24-bit value
  into 4 base64 bytes (ascii), stored in given result buffer.
 */
- (jint)encodeBase64ChunkWithInt:(jint)b24
                   withByteArray:(IOSByteArray *)buffer
                         withInt:(jint)ptr;

/*!
 @brief Method that encodes given right-aligned (LSB) 24-bit value
  into 4 base64 characters, stored in given result buffer.
 */
- (jint)encodeBase64ChunkWithInt:(jint)b24
                   withCharArray:(IOSCharArray *)buffer
                         withInt:(jint)ptr;

- (void)encodeBase64ChunkWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withInt:(jint)b24;

/*!
 @brief Method that outputs partial chunk (which only encodes one
  or two bytes of data).Data given is still aligned same as if
  it as full data; that is, missing data is at the "right end"
  (LSB) of int.
 @param outputBytes Number of encoded bytes included (either 1 or 2)
 */
- (jint)encodeBase64PartialWithInt:(jint)bits
                           withInt:(jint)outputBytes
                     withByteArray:(IOSByteArray *)buffer
                           withInt:(jint)outPtr;

/*!
 @brief Method that outputs partial chunk (which only encodes one
  or two bytes of data).Data given is still aligned same as if
  it as full data; that is, missing data is at the "right end"
  (LSB) of int.
 @param outputBytes Number of encoded bytes included (either 1 or 2)
 */
- (jint)encodeBase64PartialWithInt:(jint)bits
                           withInt:(jint)outputBytes
                     withCharArray:(IOSCharArray *)buffer
                           withInt:(jint)outPtr;

- (void)encodeBase64PartialWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                             withInt:(jint)bits
                                             withInt:(jint)outputBytes;

- (jboolean)isEqual:(id)o;

- (jint)getMaxLineLength;

- (NSString *)getName;

- (jbyte)getPaddingByte;

- (jchar)getPaddingChar;

- (NSUInteger)hash;

- (NSString *)description;

- (jboolean)usesPadding;

- (jboolean)usesPaddingCharWithChar:(jchar)c;

- (jboolean)usesPaddingCharWithInt:(jint)ch;

#pragma mark Protected

- (void)_reportBase64EOF;

/*!
 @param bindex Relative index within base64 character unit; between 0    and 3 (as unit has exactly 4 characters)
 */
- (void)_reportInvalidBase64WithChar:(jchar)ch
                             withInt:(jint)bindex
                        withNSString:(NSString *)msg;

/*!
 @brief Method used to "demote" deserialized instances back to 
  canonical ones
 */
- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreBase64Variant)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBase64Variant, _name_, NSString *)

/*!
 @brief Placeholder used by "no padding" variant, to be used when a character
  value is needed.
 */
inline jchar ComFasterxmlJacksonCoreBase64Variant_get_PADDING_CHAR_NONE(void);
#define ComFasterxmlJacksonCoreBase64Variant_PADDING_CHAR_NONE 0x0000
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreBase64Variant, PADDING_CHAR_NONE, jchar)

/*!
 @brief Marker used to denote ascii characters that do not correspond
  to a 6-bit value (in this variant), and is not used as a padding
  character.
 */
inline jint ComFasterxmlJacksonCoreBase64Variant_get_BASE64_VALUE_INVALID(void);
#define ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_INVALID -1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreBase64Variant, BASE64_VALUE_INVALID, jint)

/*!
 @brief Marker used to denote ascii character (in decoding table) that
  is the padding character using this variant (if any).
 */
inline jint ComFasterxmlJacksonCoreBase64Variant_get_BASE64_VALUE_PADDING(void);
#define ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING -2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreBase64Variant, BASE64_VALUE_PADDING, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreBase64Variant_initWithNSString_withNSString_withBoolean_withChar_withInt_(ComFasterxmlJacksonCoreBase64Variant *self, NSString *name, NSString *base64Alphabet, jboolean usesPadding, jchar paddingChar, jint maxLineLength);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *new_ComFasterxmlJacksonCoreBase64Variant_initWithNSString_withNSString_withBoolean_withChar_withInt_(NSString *name, NSString *base64Alphabet, jboolean usesPadding, jchar paddingChar, jint maxLineLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *create_ComFasterxmlJacksonCoreBase64Variant_initWithNSString_withNSString_withBoolean_withChar_withInt_(NSString *name, NSString *base64Alphabet, jboolean usesPadding, jchar paddingChar, jint maxLineLength);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withInt_(ComFasterxmlJacksonCoreBase64Variant *self, ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jint maxLineLength);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *new_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withInt_(ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jint maxLineLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *create_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withInt_(ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jint maxLineLength);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withBoolean_withChar_withInt_(ComFasterxmlJacksonCoreBase64Variant *self, ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jboolean usesPadding, jchar paddingChar, jint maxLineLength);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *new_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withBoolean_withChar_withInt_(ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jboolean usesPadding, jchar paddingChar, jint maxLineLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreBase64Variant *create_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withBoolean_withChar_withInt_(ComFasterxmlJacksonCoreBase64Variant *base, NSString *name, jboolean usesPadding, jchar paddingChar, jint maxLineLength);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreBase64Variant)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreBase64Variant")
