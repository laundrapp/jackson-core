//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/BufferRecyclers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilBufferRecyclers")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilBufferRecyclers
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilBufferRecyclers 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilBufferRecyclers 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilBufferRecyclers

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilBufferRecyclers_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilBufferRecyclers || defined(INCLUDE_ComFasterxmlJacksonCoreUtilBufferRecyclers))
#define ComFasterxmlJacksonCoreUtilBufferRecyclers_

@class ComFasterxmlJacksonCoreIoJsonStringEncoder;
@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class IOSByteArray;
@class IOSCharArray;
@class JavaLangStringBuilder;
@class JavaLangThreadLocal;
@protocol JavaLangCharSequence;

/*!
 @brief Helper entity used to control access to simple buffer recyling scheme used for
  some encoding, decoding tasks.
 - seealso: BufferRecycler
 - seealso: JsonStringEncoder
 @since 2.9.2
 */
@interface ComFasterxmlJacksonCoreUtilBufferRecyclers : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Helper method for encoding given String as UTF-8 encoded
 @since 2.9.4
 */
+ (IOSByteArray *)encodeAsUTF8WithNSString:(NSString *)text;

/*!
 @brief Main accessor to call for accessing possibly recycled <code>BufferRecycler</code> instance.
 */
+ (ComFasterxmlJacksonCoreUtilBufferRecycler *)getBufferRecycler;

+ (ComFasterxmlJacksonCoreIoJsonStringEncoder *)getJsonStringEncoder;

/*!
 @since 2.9.4
 */
+ (void)quoteAsJsonTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)output;

/*!
 @since 2.9.4
 */
+ (IOSCharArray *)quoteAsJsonTextWithNSString:(NSString *)rawText;

/*!
 @since 2.9.4
 */
+ (IOSByteArray *)quoteAsJsonUTF8WithNSString:(NSString *)rawText;

/*!
 @brief Specialized method that will release all recycled <code>BufferRecycler</code> if
  (and only if) recycler tracking has been enabled
  (see <code>SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS</code>).
 This method is usually called on shutdown of the container like Application Server
  to ensure that no references are reachable via <code>ThreadLocal</code>s as this may cause
  unintentional retention of sizable amounts of memory. It may also be called regularly
  if GC for some reason does not clear up <code>SoftReference</code>s aggressively enough.
 @return Number of buffers released, if tracking enabled (zero or more); -1 if tracking not enabled.
 @since 2.9.6
 */
+ (jint)releaseBuffers;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreUtilBufferRecyclers)

/*!
 @brief System property that is checked to see if recycled buffers (see <code>BufferRecycler</code>)
  should be tracked, for purpose of forcing release of all such buffers, typically
  during major classloading.
 @since 2.9.6
 */
inline NSString *ComFasterxmlJacksonCoreUtilBufferRecyclers_get_SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonCoreUtilBufferRecyclers_SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilBufferRecyclers, SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS, NSString *)

/*!
 @brief This <code>ThreadLocal</code> contains a <code>java.lang.ref.SoftReference</code>
  to a <code>BufferRecycler</code> used to provide a low-cost
  buffer recycling between reader and writer instances.
 */
inline JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers_get__recyclerRef(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilBufferRecyclers, _recyclerRef, JavaLangThreadLocal *)

/*!
 @brief This <code>ThreadLocal</code> contains a <code>java.lang.ref.SoftReference</code>
  to a <code>BufferRecycler</code> used to provide a low-cost
  buffer recycling between reader and writer instances.
 */
inline JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers_get__encoderRef(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilBufferRecyclers, _encoderRef, JavaLangThreadLocal *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilBufferRecyclers_init(ComFasterxmlJacksonCoreUtilBufferRecyclers *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilBufferRecyclers *new_ComFasterxmlJacksonCoreUtilBufferRecyclers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilBufferRecyclers *create_ComFasterxmlJacksonCoreUtilBufferRecyclers_init(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilBufferRecycler *ComFasterxmlJacksonCoreUtilBufferRecyclers_getBufferRecycler(void);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreUtilBufferRecyclers_releaseBuffers(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoJsonStringEncoder *ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder(void);

FOUNDATION_EXPORT IOSByteArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_encodeAsUTF8WithNSString_(NSString *text);

FOUNDATION_EXPORT IOSCharArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithNSString_(NSString *rawText);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithJavaLangCharSequence_withJavaLangStringBuilder_(id<JavaLangCharSequence> input, JavaLangStringBuilder *output);

FOUNDATION_EXPORT IOSByteArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonUTF8WithNSString_(NSString *rawText);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilBufferRecyclers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilBufferRecyclers")
