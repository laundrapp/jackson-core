//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/SerializableString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSerializableString")
#ifdef RESTRICT_ComFasterxmlJacksonCoreSerializableString
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSerializableString 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSerializableString 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreSerializableString

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreSerializableString_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreSerializableString || defined(INCLUDE_ComFasterxmlJacksonCoreSerializableString))
#define ComFasterxmlJacksonCoreSerializableString_

@class IOSByteArray;
@class IOSCharArray;
@class JavaIoOutputStream;
@class JavaNioByteBuffer;

/*!
 @brief Interface that defines how Jackson package can interact with efficient
  pre-serialized or lazily-serialized and reused String representations.
 Typically implementations store possible serialized version(s) so that
  serialization of String can be done more efficiently, especially when
  used multiple times.
 <p>
  Note that "quoted" in methods means quoting of 'special' characters using
  JSON backlash notation (and not use of actual double quotes).
 - seealso: com.fasterxml.jackson.core.io.SerializedString
 */
@protocol ComFasterxmlJacksonCoreSerializableString < JavaObject >

/*!
 @brief Returns unquoted String that this object represents (and offers
  serialized forms for)
 */
- (NSString *)getValue;

/*!
 @brief Returns length of the (unquoted) String as characters.
 Functionally equvalent to:
 @code

    getValue().length();
 
@endcode
 */
- (jint)charLength;

/*!
 @brief Returns JSON quoted form of the String, as character array.
 Result can be embedded as-is in textual JSON as property name or JSON String.
 */
- (IOSCharArray *)asQuotedChars;

/*!
 @brief Returns UTF-8 encoded version of unquoted String.
 Functionally equivalent to (but more efficient than):
 @code

  getValue().getBytes("UTF-8");
 
@endcode
 */
- (IOSByteArray *)asUnquotedUTF8;

/*!
 @brief Returns UTF-8 encoded version of JSON-quoted String.
 Functionally equivalent to (but more efficient than):
 @code

  new String(asQuotedChars()).getBytes("UTF-8");
 
@endcode
 */
- (IOSByteArray *)asQuotedUTF8;

/*!
 @brief Method that will append quoted UTF-8 bytes of this String into given
  buffer, if there is enough room; if not, returns -1.
 Functionally equivalent to:
 @code

   byte[] bytes = str.asQuotedUTF8();
   System.arraycopy(bytes, 0, buffer, offset, bytes.length);
   return bytes.length;
 
@endcode
 @return Number of bytes appended, if successful, otherwise -1
 */
- (jint)appendQuotedUTF8WithByteArray:(IOSByteArray *)buffer
                              withInt:(jint)offset;

/*!
 @brief Method that will append quoted characters of this String into given
  buffer.Functionally equivalent to:
 @code

   char[] ch = str.asQuotedChars();
   System.arraycopy(ch, 0, buffer, offset, ch.length);
   return ch.length;
 
@endcode
 @return Number of characters appended, if successful, otherwise -1
 */
- (jint)appendQuotedWithCharArray:(IOSCharArray *)buffer
                          withInt:(jint)offset;

/*!
 @brief Method that will append unquoted ('raw') UTF-8 bytes of this String into given
  buffer.Functionally equivalent to:
 @code

   byte[] bytes = str.asUnquotedUTF8();
   System.arraycopy(bytes, 0, buffer, offset, bytes.length);
   return bytes.length;
 
@endcode
 @return Number of bytes appended, if successful, otherwise -1
 */
- (jint)appendUnquotedUTF8WithByteArray:(IOSByteArray *)buffer
                                withInt:(jint)offset;

/*!
 @brief Method that will append unquoted characters of this String into given
  buffer.Functionally equivalent to:
 @code

   char[] ch = str.getValue().toCharArray();
   System.arraycopy(bytes, 0, buffer, offset, ch.length);
   return ch.length;
 
@endcode
 @return Number of characters appended, if successful, otherwise -1
 */
- (jint)appendUnquotedWithCharArray:(IOSCharArray *)buffer
                            withInt:(jint)offset;

/*!
 @return Number of bytes written
 */
- (jint)writeQuotedUTF8WithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @return Number of bytes written
 */
- (jint)writeUnquotedUTF8WithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @return Number of bytes put, if successful, otherwise -1
 */
- (jint)putQuotedUTF8WithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

/*!
 @return Number of bytes put, if successful, otherwise -1
 */
- (jint)putUnquotedUTF8WithJavaNioByteBuffer:(JavaNioByteBuffer *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSerializableString)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSerializableString)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSerializableString")
