//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreBaseParserBase")
#ifdef RESTRICT_ComFasterxmlJacksonCoreBaseParserBase
#define INCLUDE_ALL_ComFasterxmlJacksonCoreBaseParserBase 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreBaseParserBase 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreBaseParserBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreBaseParserBase_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreBaseParserBase || defined(INCLUDE_ComFasterxmlJacksonCoreBaseParserBase))
#define ComFasterxmlJacksonCoreBaseParserBase_

#define RESTRICT_ComFasterxmlJacksonCoreBaseParserMinimalBase 1
#define INCLUDE_ComFasterxmlJacksonCoreBaseParserMinimalBase 1
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreJsonJsonReadContext;
@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreJsonParser_NumberType;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreUtilByteArrayBuilder;
@class ComFasterxmlJacksonCoreUtilTextBuffer;
@class ComFasterxmlJacksonCoreVersion;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class JavaLangIllegalArgumentException;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol ComFasterxmlJacksonCoreObjectReadContext;

/*!
 @brief Intermediate base class used by all Jackson <code>JsonParser</code>
  implementations.Contains most common things that are independent
  of actual underlying input source.
 */
@interface ComFasterxmlJacksonCoreBaseParserBase : ComFasterxmlJacksonCoreBaseParserMinimalBase {
 @public
  /*!
   @brief I/O context for this reader.It handles buffer allocation
  for the reader.
   */
  ComFasterxmlJacksonCoreIoIOContext *_ioContext_;
  /*!
   @brief Flag that indicates whether parser is closed or not.Gets
  set when parser is either closed by explicit call
  (<code>close</code>) or when end-of-input is reached.
   */
  jboolean _closed_;
  /*!
   @brief Pointer to next available character in buffer
   */
  jint _inputPtr_;
  /*!
   @brief Index of character after last available one in the buffer.
   */
  jint _inputEnd_;
  /*!
   @brief Number of characters/bytes that were contained in previous blocks
  (blocks that were already processed prior to the current buffer).
   */
  jlong _currInputProcessed_;
  /*!
   @brief Current row location of current point in input buffer, starting
  from 1, if available.
   */
  jint _currInputRow_;
  /*!
   @brief Current index of the first character of the current row in input
  buffer.Needed to calculate column position, if necessary; benefit
  of not having column itself is that this only has to be updated
  once per line.
   */
  jint _currInputRowStart_;
  /*!
   @brief Total number of bytes/characters read before start of current token.
   For big (gigabyte-sized) sizes are possible, needs to be long,
  unlike pointers and sizes related to in-memory buffers.
   */
  jlong _tokenInputTotal_;
  /*!
   @brief Input row on which current token starts, 1-based
   */
  jint _tokenInputRow_;
  /*!
   @brief Column on input row that current token starts; 0-based (although
  in the end it'll be converted to 1-based)
   */
  jint _tokenInputCol_;
  /*!
   @brief Information about parser context, context in which
  the next token is to be parsed (root, array, object).
   */
  ComFasterxmlJacksonCoreJsonJsonReadContext *_parsingContext_;
  /*!
   @brief Secondary token related to the next token after current one;
  used if its type is known.This may be value token that
  follows FIELD_NAME, for example.
   */
  ComFasterxmlJacksonCoreJsonToken *_nextToken_;
  /*!
   @brief Buffer that contains contents of String values, including
  field names if necessary (name split across boundary,
  contains escape sequence, or access needed to char array)
   */
  ComFasterxmlJacksonCoreUtilTextBuffer *_textBuffer_;
  /*!
   @brief Temporary buffer that is needed if field name is accessed
  using <code>getTextCharacters</code> method (instead of String
  returning alternatives)
   */
  IOSCharArray *_nameCopyBuffer_;
  /*!
   @brief Flag set to indicate whether the field name is available
  from the name copy buffer or not (in addition to its String
  representation  being available via read context)
   */
  jboolean _nameCopied_;
  /*!
   @brief ByteArrayBuilder is needed if 'getBinaryValue' is called.If so,
  we better reuse it for remainder of content.
   */
  ComFasterxmlJacksonCoreUtilByteArrayBuilder *_byteArrayBuilder_;
  /*!
   @brief We will hold on to decoded binary data, for duration of
  current event, so that multiple calls to 
 <code>getBinaryValue</code> will not need to decode data more
  than once.
   */
  IOSByteArray *_binaryValue_;
  /*!
   @brief Bitfield that indicates which numeric representations
  have been calculated for the current type
   */
  jint _numTypesValid_;
  jint _numberInt_;
  jlong _numberLong_;
  jdouble _numberDouble_;
  JavaMathBigInteger *_numberBigInt_;
  JavaMathBigDecimal *_numberBigDecimal_;
  /*!
   @brief Flag that indicates whether numeric value has a negative
  value.That is, whether its textual representation starts
  with minus character.
   */
  jboolean _numberNegative_;
  /*!
   @brief Length of integer part of the number, in characters
   */
  jint _intLength_;
  /*!
   @brief Length of the fractional part (not including decimal
  point or exponent), in characters.
   Not used for  pure integer values.
   */
  jint _fractLength_;
  /*!
   @brief Length of the exponent part of the number, if any, not
  including 'e' marker or sign, just digits.
   Not used for  pure integer values.
   */
  jint _expLength_;
}

#pragma mark Public

- (ComFasterxmlJacksonCoreUtilByteArrayBuilder *)_getByteArrayBuilder;

- (void)close;

/*!
 @brief Method that can be called to get the name associated with
  the current event.
 */
- (NSString *)currentName;

- (ComFasterxmlJacksonCoreJsonParser *)disableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (ComFasterxmlJacksonCoreJsonParser *)enableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

- (JavaMathBigInteger *)getBigIntegerValue;

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)variant;

/*!
 @brief Method that returns location of the last processed character;
  usually for error reporting purposes
 */
- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation;

- (id)getCurrentValue;

- (JavaMathBigDecimal *)getDecimalValue;

- (jdouble)getDoubleValue;

- (jfloat)getFloatValue;

- (jint)getIntValue;

- (jlong)getLongValue;

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)getNumberType;

- (NSNumber *)getNumberValue;

- (ComFasterxmlJacksonCoreJsonJsonReadContext *)getParsingContext;

- (jlong)getTokenCharacterOffset;

- (jint)getTokenColumnNr;

- (jint)getTokenLineNr;

/*!
 @brief Method that return the <b>starting</b> location of the current
  token; that is, position of the first character from input
  that starts the current token.
 */
- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation;

- (jboolean)hasTextCharacters;

- (jboolean)isClosed;

- (jboolean)isNaN;

- (void)overrideCurrentNameWithNSString:(NSString *)name;

- (void)setCurrentValueWithId:(id)v;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)features;

- (void)_closeInput;

- (jint)_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                           withChar:(jchar)ch
                                                            withInt:(jint)index;

- (jint)_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                            withInt:(jint)ch
                                                            withInt:(jint)index;

/*!
 @brief Method that sub-classes must implement to support escaped sequences
  in base64-encoded sections.
 Sub-classes that do not need base64 support can leave this as is
 */
- (jchar)_decodeEscaped;

/*!
 @since 2.4
 */
- (jint)_eofAsNextChar;

/*!
 @brief Helper method used to encapsulate logic of including (or not) of
  "source reference" when constructing <code>JsonLocation</code> instances.
 */
- (id)_getSourceReference;

/*!
 @brief Method called when an EOF is encountered between tokens.
 If so, it may be a legitimate EOF, but only iff there
  is no open non-root context.
 */
- (void)_handleEOF;

/*!
 @since 2.6
 */
- (jint)_parseIntValue;

/*!
 @brief Method that will parse actual numeric value out of a syntactically
  valid number value.Type it will parse into depends on whether
  it is a floating point number, as well as its magnitude: smallest
  legal type (of ones available) is used for efficiency.
 @param expType Numeric type that we will immediately need, if any;    mostly necessary to optimize handling of floating point numbers
 */
- (void)_parseNumericValueWithInt:(jint)expType;

/*!
 @brief Method called to release internal buffers owned by the base
  reader.This may be called along with <code>_closeInput</code> (for
  example, when explicitly closing this reader instance), or
  separately (if need be).
 */
- (void)_releaseBuffers;

- (void)_reportMismatchedEndMarkerWithInt:(jint)actCh
                                 withChar:(jchar)expCh;

- (void)convertNumberToBigDecimal;

- (void)convertNumberToBigInteger;

- (void)convertNumberToDouble;

- (void)convertNumberToInt;

- (void)convertNumberToLong;

+ (IOSIntArray *)growArrayByWithIntArray:(IOSIntArray *)arr
                                 withInt:(jint)more;

- (JavaLangIllegalArgumentException *)reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                                                              withInt:(jint)ch
                                                                                              withInt:(jint)bindex;

/*!
 @param bindex Relative index within base64 character unit; between 0    and 3 (as unit has exactly 4 characters)
 */
- (JavaLangIllegalArgumentException *)reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                                                              withInt:(jint)ch
                                                                                              withInt:(jint)bindex
                                                                                         withNSString:(NSString *)msg;

- (ComFasterxmlJacksonCoreJsonToken *)resetWithBoolean:(jboolean)negative
                                               withInt:(jint)intLen
                                               withInt:(jint)fractLen
                                               withInt:(jint)expLen;

- (ComFasterxmlJacksonCoreJsonToken *)resetAsNaNWithNSString:(NSString *)valueStr
                                                  withDouble:(jdouble)value;

- (ComFasterxmlJacksonCoreJsonToken *)resetFloatWithBoolean:(jboolean)negative
                                                    withInt:(jint)intLen
                                                    withInt:(jint)fractLen
                                                    withInt:(jint)expLen;

- (ComFasterxmlJacksonCoreJsonToken *)resetIntWithBoolean:(jboolean)negative
                                                  withInt:(jint)intLen;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreBaseParserBase)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _ioContext_, ComFasterxmlJacksonCoreIoIOContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _parsingContext_, ComFasterxmlJacksonCoreJsonJsonReadContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _nextToken_, ComFasterxmlJacksonCoreJsonToken *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _textBuffer_, ComFasterxmlJacksonCoreUtilTextBuffer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _nameCopyBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _byteArrayBuilder_, ComFasterxmlJacksonCoreUtilByteArrayBuilder *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _binaryValue_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _numberBigInt_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreBaseParserBase, _numberBigDecimal_, JavaMathBigDecimal *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features);

FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(IOSIntArray *arr, jint more);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreBaseParserBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreBaseParserBase")
