//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/FieldNameMatcher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/sym/FieldNameMatcher.h"
#include "com/fasterxml/jackson/core/util/InternCache.h"
#include "com/fasterxml/jackson/core/util/Named.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

inline jlong ComFasterxmlJacksonCoreSymFieldNameMatcher_get_serialVersionUID(void);
#define ComFasterxmlJacksonCoreSymFieldNameMatcher_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymFieldNameMatcher, serialVersionUID, jlong)

inline ComFasterxmlJacksonCoreUtilInternCache *ComFasterxmlJacksonCoreSymFieldNameMatcher_get_INTERNER(void);
static ComFasterxmlJacksonCoreUtilInternCache *ComFasterxmlJacksonCoreSymFieldNameMatcher_INTERNER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreSymFieldNameMatcher, INTERNER, ComFasterxmlJacksonCoreUtilInternCache *)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreSymFieldNameMatcher)

@implementation ComFasterxmlJacksonCoreSymFieldNameMatcher

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)backup
                                                           withNSStringArray:(IOSObjectArray *)nameLookup {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initWithComFasterxmlJacksonCoreSymFieldNameMatcher_withNSStringArray_(self, backup, nameLookup);
  return self;
}

- (jint)matchNameWithNSString:(NSString *)toMatch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)matchByQuadWithInt:(jint)q1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2
                   withInt:(jint)q3 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)matchByQuadWithIntArray:(IOSIntArray *)q
                        withInt:(jint)qlen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)nameLookup {
  return _nameLookup_;
}

- (jint)matchSecondaryWithNSString:(NSString *)toMatch {
  if (_backupMatcher_ == nil) {
    return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME;
  }
  return [_backupMatcher_ matchNameWithNSString:[((NSString *) nil_chk(toMatch)) lowercaseString]];
}

+ (jint)_hashWithInt:(jint)h
             withInt:(jint)mask {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher__hashWithInt_withInt_(h, mask);
}

+ (jint)_findSizeWithInt:(jint)size {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher__findSizeWithInt_(size);
}

+ (id<JavaUtilList>)stringsFromNamesWithJavaUtilList:(id<JavaUtilList>)fields
                                         withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(fields, alreadyInterned);
}

+ (NSString *)_fromNameWithComFasterxmlJacksonCoreUtilNamed:(id<ComFasterxmlJacksonCoreUtilNamed>)n
                                                withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher__fromNameWithComFasterxmlJacksonCoreUtilNamed_withBoolean_(n, alreadyInterned);
}

+ (id<JavaUtilList>)_lcWithJavaUtilList:(id<JavaUtilList>)src {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher__lcWithJavaUtilList_(src);
}

- (void)dealloc {
  RELEASE_(_nameLookup_);
  RELEASE_(_backupMatcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 7, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1c, 9, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 10, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 11, 12, -1, 13, -1, -1 },
    { NULL, "LNSString;", 0xc, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xc, 16, 17, -1, 18, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreSymFieldNameMatcher:withNSStringArray:);
  methods[1].selector = @selector(matchNameWithNSString:);
  methods[2].selector = @selector(matchByQuadWithInt:);
  methods[3].selector = @selector(matchByQuadWithInt:withInt:);
  methods[4].selector = @selector(matchByQuadWithInt:withInt:withInt:);
  methods[5].selector = @selector(matchByQuadWithIntArray:withInt:);
  methods[6].selector = @selector(nameLookup);
  methods[7].selector = @selector(matchSecondaryWithNSString:);
  methods[8].selector = @selector(_hashWithInt:withInt:);
  methods[9].selector = @selector(_findSizeWithInt:);
  methods[10].selector = @selector(stringsFromNamesWithJavaUtilList:withBoolean:);
  methods[11].selector = @selector(_fromNameWithComFasterxmlJacksonCoreUtilNamed:withBoolean:);
  methods[12].selector = @selector(_lcWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonCoreSymFieldNameMatcher_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "INTERNER", "LComFasterxmlJacksonCoreUtilInternCache;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "MATCH_END_OBJECT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_END_OBJECT, 0x19, -1, -1, -1, -1 },
    { "MATCH_UNKNOWN_NAME", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME, 0x19, -1, -1, -1, -1 },
    { "MATCH_ODD_TOKEN", "I", .constantValue.asInt = ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_ODD_TOKEN, 0x19, -1, -1, -1, -1 },
    { "_nameLookup_", "[LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_backupMatcher_", "LComFasterxmlJacksonCoreSymFieldNameMatcher;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreSymFieldNameMatcher;[LNSString;", "matchName", "LNSString;", "matchByQuad", "I", "II", "III", "[II", "matchSecondary", "_hash", "_findSize", "stringsFromNames", "LJavaUtilList;Z", "(Ljava/util/List<Lcom/fasterxml/jackson/core/util/Named;>;Z)Ljava/util/List<Ljava/lang/String;>;", "_fromName", "LComFasterxmlJacksonCoreUtilNamed;Z", "_lc", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/String;>;", &ComFasterxmlJacksonCoreSymFieldNameMatcher_INTERNER };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymFieldNameMatcher = { "FieldNameMatcher", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x401, 13, 7, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymFieldNameMatcher;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreSymFieldNameMatcher class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreSymFieldNameMatcher_INTERNER, JreLoadStatic(ComFasterxmlJacksonCoreUtilInternCache, instance));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreSymFieldNameMatcher)
  }
}

@end

void ComFasterxmlJacksonCoreSymFieldNameMatcher_initWithComFasterxmlJacksonCoreSymFieldNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymFieldNameMatcher *self, ComFasterxmlJacksonCoreSymFieldNameMatcher *backup, IOSObjectArray *nameLookup) {
  NSObject_init(self);
  JreStrongAssign(&self->_backupMatcher_, backup);
  JreStrongAssign(&self->_nameLookup_, nameLookup);
}

jint ComFasterxmlJacksonCoreSymFieldNameMatcher__hashWithInt_withInt_(jint h, jint mask) {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initialize();
  return (h + (JreRShift32(h, 3))) & mask;
}

jint ComFasterxmlJacksonCoreSymFieldNameMatcher__findSizeWithInt_(jint size) {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initialize();
  if (size <= 5) return 8;
  if (size <= 11) return 16;
  if (size <= 23) return 32;
  jint needed = size + (JreRShift32(size, 2)) + (JreRShift32(size, 4));
  jint result = 64;
  while (result < needed) {
    result += result;
  }
  return result;
}

id<JavaUtilList> ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initialize();
  JavaUtilArrayList *result = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(fields)) size]);
  for (id<ComFasterxmlJacksonCoreUtilNamed> __strong n in fields) {
    [result addWithId:ComFasterxmlJacksonCoreSymFieldNameMatcher__fromNameWithComFasterxmlJacksonCoreUtilNamed_withBoolean_(n, alreadyInterned)];
  }
  return result;
}

NSString *ComFasterxmlJacksonCoreSymFieldNameMatcher__fromNameWithComFasterxmlJacksonCoreUtilNamed_withBoolean_(id<ComFasterxmlJacksonCoreUtilNamed> n, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initialize();
  if (n == nil) return nil;
  NSString *name = [n getName];
  return alreadyInterned ? name : [((ComFasterxmlJacksonCoreUtilInternCache *) nil_chk(ComFasterxmlJacksonCoreSymFieldNameMatcher_INTERNER)) internWithNSString:name];
}

id<JavaUtilList> ComFasterxmlJacksonCoreSymFieldNameMatcher__lcWithJavaUtilList_(id<JavaUtilList> src) {
  ComFasterxmlJacksonCoreSymFieldNameMatcher_initialize();
  id<JavaUtilList> lcd = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(src)) size]);
  for (NSString * __strong n in src) {
    [lcd addWithId:(n == nil) ? nil : [((NSString *) nil_chk(n)) lowercaseString]];
  }
  return lcd;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymFieldNameMatcher)
