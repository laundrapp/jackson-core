//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/JsonStreamContext.h"
#include "com/fasterxml/jackson/core/ObjectCodec.h"
#include "com/fasterxml/jackson/core/PrettyPrinter.h"
#include "com/fasterxml/jackson/core/SerializableString.h"
#include "com/fasterxml/jackson/core/base/GeneratorBase.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/CharacterEscapes.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/io/NumberOutput.h"
#include "com/fasterxml/jackson/core/json/JsonGeneratorImpl.h"
#include "com/fasterxml/jackson/core/json/JsonWriteContext.h"
#include "com/fasterxml/jackson/core/json/UTF8JsonGenerator.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@interface ComFasterxmlJacksonCoreJsonUTF8JsonGenerator ()

- (void)_writeUnqWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name;

/*!
 @brief Helper method called when it is possible that output of raw section
  to output may cross buffer boundary
 */
- (void)_writeSegmentedRawWithCharArray:(IOSCharArray *)cbuf
                                withInt:(jint)offset
                                withInt:(jint)len;

/*!
 @brief Helper method that is called for segmented write of raw content
  when explicitly outputting a segment of longer thing.
 Caller has to take care of ensuring there's no split surrogate
  pair at the end (that is, last char can not be first part of a
  surrogate char pair).
 @since 2.8.2
 */
- (void)_writeRawSegmentWithCharArray:(IOSCharArray *)cbuf
                              withInt:(jint)offset
                              withInt:(jint)end;

- (void)_writeQuotedShortWithShort:(jshort)s;

- (void)_writeQuotedIntWithInt:(jint)i;

- (void)_writeQuotedLongWithLong:(jlong)l;

- (void)_writeQuotedRawWithNSString:(NSString *)value;

- (void)_writeBytesWithByteArray:(IOSByteArray *)bytes;

- (void)_writeBytesWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)offset
                         withInt:(jint)len;

/*!
 @brief Method called when String to write is long enough not to fit
  completely in temporary copy buffer.If so, we will actually
  copy it in small enough chunks so it can be directly fed
  to single-segment writes (instead of maximum slices that
  would fit in copy buffer)
 */
- (void)_writeStringSegmentsWithNSString:(NSString *)text
                             withBoolean:(jboolean)addQuotes;

/*!
 @brief Method called when character sequence to write is long enough that
  its maximum encoded and escaped form is not guaranteed to fit in
  the output buffer.If so, we will need to choose smaller output
  chunks to write at a time.
 */
- (void)_writeStringSegmentsWithCharArray:(IOSCharArray *)cbuf
                                  withInt:(jint)offset
                                  withInt:(jint)totalLen;

- (void)_writeStringSegmentsWithNSString:(NSString *)text
                                 withInt:(jint)offset
                                 withInt:(jint)totalLen;

/*!
 @brief This method called when the string content is already in
  a char buffer, and its maximum total encoded and escaped length
  can not exceed size of the output buffer.
 Caller must ensure that there is enough space in output buffer,
  assuming case of all non-escaped ASCII characters, as well as
  potentially enough space for other cases (but not necessarily flushed)
 */
- (void)_writeStringSegmentWithCharArray:(IOSCharArray *)cbuf
                                 withInt:(jint)offset
                                 withInt:(jint)len;

- (void)_writeStringSegmentWithNSString:(NSString *)text
                                withInt:(jint)offset
                                withInt:(jint)len;

/*!
 @brief Secondary method called when content contains characters to escape,
  and/or multi-byte UTF-8 characters.
 */
- (void)_writeStringSegment2WithCharArray:(IOSCharArray *)cbuf
                                  withInt:(jint)offset
                                  withInt:(jint)end;

- (void)_writeStringSegment2WithNSString:(NSString *)text
                                 withInt:(jint)offset
                                 withInt:(jint)end;

/*!
 @brief Same as <code>_writeStringSegment2(char[], ...)
 </code., but with
  additional escaping for high-range code points
 */
- (void)_writeStringSegmentASCII2WithCharArray:(IOSCharArray *)cbuf
                                       withInt:(jint)offset
                                       withInt:(jint)end;

- (void)_writeStringSegmentASCII2WithNSString:(NSString *)text
                                      withInt:(jint)offset
                                      withInt:(jint)end;

/*!
 @brief Same as <code>_writeStringSegmentASCII2(char[], ...)
 </code., but with
  additional checking for completely custom escapes
 */
- (void)_writeCustomStringSegment2WithCharArray:(IOSCharArray *)cbuf
                                        withInt:(jint)offset
                                        withInt:(jint)end;

- (void)_writeCustomStringSegment2WithNSString:(NSString *)text
                                       withInt:(jint)offset
                                       withInt:(jint)end;

- (jint)_writeCustomEscapeWithByteArray:(IOSByteArray *)outputBuffer
                                withInt:(jint)outputPtr
withComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)esc
                                withInt:(jint)remainingChars;

- (jint)_handleLongCustomEscapeWithByteArray:(IOSByteArray *)outputBuffer
                                     withInt:(jint)outputPtr
                                     withInt:(jint)outputEnd
                               withByteArray:(IOSByteArray *)raw
                                     withInt:(jint)remainingChars;

/*!
 @brief Method called when UTF-8 encoded (but NOT yet escaped!)
 content is not guaranteed
  to fit in the output buffer after escaping; as such, we just need to
  chunk writes.
 */
- (void)_writeUTF8SegmentsWithByteArray:(IOSByteArray *)utf8
                                withInt:(jint)offset
                                withInt:(jint)totalLen;

- (void)_writeUTF8SegmentWithByteArray:(IOSByteArray *)utf8
                               withInt:(jint)offset
                               withInt:(jint)len;

- (void)_writeUTF8Segment2WithByteArray:(IOSByteArray *)utf8
                                withInt:(jint)offset
                                withInt:(jint)len;

- (jint)_readMoreWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)readBuffer
                               withInt:(jint)inputPtr
                               withInt:(jint)inputEnd
                               withInt:(jint)maxRead;

/*!
 @brief Method called to output a character that is beyond range of
  1- and 2-byte UTF-8 encodings, when outputting "raw" 
  text (meaning it is not to be escaped or quoted)
 */
- (jint)_outputRawMultiByteCharWithInt:(jint)ch
                         withCharArray:(IOSCharArray *)cbuf
                               withInt:(jint)inputOffset
                               withInt:(jint)inputEnd;

/*!
 @param ch
 @param outputPtr Position within output buffer to append multi-byte in
 @return New output position after appending
 @throw IOException
 */
- (jint)_outputMultiByteCharWithInt:(jint)ch
                            withInt:(jint)outputPtr;

- (void)_writeNull;

/*!
 @brief Method called to write a generic Unicode escape for given character.
 @param charToEscape Character to escape using escape sequence (\\uXXXX)
 */
- (jint)_writeGenericEscapeWithInt:(jint)charToEscape
                           withInt:(jint)outputPtr;

@end

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_u(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_u 117
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_u, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_0(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_0 48
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_0, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_LBRACKET(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LBRACKET 91
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_LBRACKET, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_RBRACKET(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RBRACKET 93
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_RBRACKET, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_LCURLY(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LCURLY 123
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_LCURLY, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_RCURLY(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RCURLY 125
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_RCURLY, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_BACKSLASH(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH 92
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_BACKSLASH, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_COMMA(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COMMA 44
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_COMMA, jbyte)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_BYTE_COLON(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COLON 58
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, BYTE_COLON, jbyte)

inline jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_MAX_BYTES_TO_BUFFER(void);
#define ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_MAX_BYTES_TO_BUFFER 512
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, MAX_BYTES_TO_BUFFER, jint)

inline IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_HEX_CHARS(void);
static IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, HEX_CHARS, IOSByteArray *)

inline IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_NULL_BYTES(void);
static IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_NULL_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, NULL_BYTES, IOSByteArray *)

inline IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_TRUE_BYTES(void);
static IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_TRUE_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, TRUE_BYTES, IOSByteArray *)

inline IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_get_FALSE_BYTES(void);
static IOSByteArray *ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_FALSE_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, FALSE_BYTES, IOSByteArray *)

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUnqWithComFasterxmlJacksonCoreSerializableString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndArray(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndObject(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *name);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeRawWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeSegmentedRawWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeRawSegmentWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedShortWithShort_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jshort s);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedIntWithInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint i);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedLongWithLong_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jlong l);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *value);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *typeMsg);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *bytes);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *bytes, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jboolean addQuotes);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint totalLen);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint totalLen);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *outputBuffer, jint outputPtr, id<ComFasterxmlJacksonCoreSerializableString> esc, jint remainingChars);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__handleLongCustomEscapeWithByteArray_withInt_withInt_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *outputBuffer, jint outputPtr, jint outputEnd, IOSByteArray *raw, jint remainingChars);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentsWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint totalLen);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8Segment2WithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, IOSByteArray *input, jint inputPtr, jint inputEnd);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer, jint bytesLeft);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, JavaIoInputStream *inArg, IOSByteArray *readBuffer, jint inputPtr, jint inputEnd, jint maxRead);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint ch, IOSCharArray *cbuf, jint inputOffset, jint inputEnd);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputSurrogatesWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint surr1, jint surr2);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint ch, jint outputPtr);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint charToEscape, jint outputPtr);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator)

@implementation ComFasterxmlJacksonCoreJsonUTF8JsonGenerator

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)features
                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                                              withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_(self, ctxt, features, codec, outArg);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)features
                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                                              withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                       withByteArray:(IOSByteArray *)outputBuffer
                                                             withInt:(jint)outputOffset
                                                         withBoolean:(jboolean)bufferRecyclable {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_(self, ctxt, features, codec, outArg, outputBuffer, outputOffset, bufferRecyclable);
  return self;
}

- (id)getOutputTarget {
  return _outputStream_;
}

- (jint)getOutputBuffered {
  return _outputTail_;
}

- (void)writeFieldNameWithNSString:(NSString *)name {
  if (_cfgPrettyPrinter_ != nil) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithNSString_(self, name);
    return;
  }
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_writeContext_)) writeFieldNameWithNSString:name];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA) {
    if (_outputTail_ >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COMMA;
  }
  if (_cfgUnqNames_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, name, false);
    return;
  }
  jint len = [((NSString *) nil_chk(name)) java_length];
  if (len > _charBufferLength_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, name, true);
    return;
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  if (len <= _outputMaxContiguous_) {
    if ((_outputTail_ + len) > _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(self, name, 0, len);
  }
  else {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withInt_withInt_(self, name, 0, len);
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name {
  if (_cfgPrettyPrinter_ != nil) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_(self, name);
    return;
  }
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_writeContext_)) writeFieldNameWithNSString:[((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) getValue]];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA) {
    if (_outputTail_ >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COMMA;
  }
  if (_cfgUnqNames_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUnqWithComFasterxmlJacksonCoreSerializableString_(self, name);
    return;
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  jint len = [name appendQuotedUTF8WithByteArray:_outputBuffer_ withInt:_outputTail_];
  if (len < 0) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, [name asQuotedUTF8]);
  }
  else {
    _outputTail_ += len;
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)_writeUnqWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUnqWithComFasterxmlJacksonCoreSerializableString_(self, name);
}

- (void)writeStartArray {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, @"start an array");
  JreStrongAssign(&_writeContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_writeContext_)) createChildArrayContext]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LBRACKET;
  }
}

- (void)writeEndArray {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndArray(self);
}

- (void)writeStartObject {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, @"start an object");
  JreStrongAssign(&_writeContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_writeContext_)) createChildObjectContext]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LCURLY;
  }
}

- (void)writeStartObjectWithId:(id)forValue {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, @"start an object");
  ComFasterxmlJacksonCoreJsonJsonWriteContext *ctxt = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_writeContext_)) createChildObjectContext];
  JreStrongAssign(&_writeContext_, ctxt);
  if (forValue != nil) {
    [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(ctxt)) setCurrentValueWithId:forValue];
  }
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '{';
  }
}

- (void)writeEndObject {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndObject(self);
}

- (void)_writePPFieldNameWithNSString:(NSString *)name {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithNSString_(self, name);
}

- (void)_writePPFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_(self, name);
}

- (void)writeStringWithNSString:(NSString *)text {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (text == nil) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(self);
    return;
  }
  jint len = [text java_length];
  if (len > _outputMaxContiguous_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, text, true);
    return;
  }
  if ((_outputTail_ + len) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(self, text, 0, len);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeStringWithJavaIoReader:(JavaIoReader *)reader
                            withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (reader == nil) {
    [self _reportErrorWithNSString:@"null reader"];
  }
  jint toRead = (len >= 0) ? len : JavaLangInteger_MAX_VALUE;
  IOSCharArray *buf = _charBuffer_;
  if ((_outputTail_ + len) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  while (toRead > 0) {
    jint toReadNow = JavaLangMath_minWithInt_withInt_(toRead, ((IOSCharArray *) nil_chk(buf))->size_);
    jint numRead = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buf withInt:0 withInt:toReadNow];
    if (numRead <= 0) {
      break;
    }
    if ((_outputTail_ + len) >= _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(self, buf, 0, numRead);
    toRead -= numRead;
  }
  if ((_outputTail_ + len) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  if (toRead > 0 && len >= 0) {
    [self _reportErrorWithNSString:@"Didn't read enough from reader"];
  }
}

- (void)writeStringWithCharArray:(IOSCharArray *)text
                         withInt:(jint)offset
                         withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  if (len <= _outputMaxContiguous_) {
    if ((_outputTail_ + len) > _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(self, text, offset, len);
  }
  else {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(self, text, offset, len);
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeStringWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  jint len = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(text)) appendQuotedUTF8WithByteArray:_outputBuffer_ withInt:_outputTail_];
  if (len < 0) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, [text asQuotedUTF8]);
  }
  else {
    _outputTail_ += len;
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeRawUTF8StringWithByteArray:(IOSByteArray *)text
                                withInt:(jint)offset
                                withInt:(jint)length {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_withInt_withInt_(self, text, offset, length);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeUTF8StringWithByteArray:(IOSByteArray *)text
                             withInt:(jint)offset
                             withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  if (len <= _outputMaxContiguous_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentWithByteArray_withInt_withInt_(self, text, offset, len);
  }
  else {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentsWithByteArray_withInt_withInt_(self, text, offset, len);
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeRawWithNSString:(NSString *)text {
  jint len = [((NSString *) nil_chk(text)) java_length];
  IOSCharArray *buf = _charBuffer_;
  if (len <= ((IOSCharArray *) nil_chk(buf))->size_) {
    [text java_getChars:0 sourceEnd:len destination:buf destinationBegin:0];
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeRawWithCharArray_withInt_withInt_(self, buf, 0, len);
  }
  else {
    [self writeRawWithNSString:text withInt:0 withInt:len];
  }
}

- (void)writeRawWithNSString:(NSString *)text
                     withInt:(jint)offset
                     withInt:(jint)len {
  IOSCharArray *buf = _charBuffer_;
  jint cbufLen = ((IOSCharArray *) nil_chk(buf))->size_;
  if (len <= cbufLen) {
    [((NSString *) nil_chk(text)) java_getChars:offset sourceEnd:offset + len destination:buf destinationBegin:0];
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeRawWithCharArray_withInt_withInt_(self, buf, 0, len);
    return;
  }
  jint maxChunk = JavaLangMath_minWithInt_withInt_(cbufLen, (JreRShift32(_outputEnd_, 2)) + (JreRShift32(_outputEnd_, 4)));
  jint maxBytes = maxChunk * 3;
  while (len > 0) {
    jint len2 = JavaLangMath_minWithInt_withInt_(maxChunk, len);
    [((NSString *) nil_chk(text)) java_getChars:offset sourceEnd:offset + len2 destination:buf destinationBegin:0];
    if ((_outputTail_ + maxBytes) > _outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    if (len2 > 1) {
      jchar ch = IOSCharArray_Get(buf, len2 - 1);
      if ((ch >= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR1_FIRST) && (ch <= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR1_LAST)) {
        --len2;
      }
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeRawSegmentWithCharArray_withInt_withInt_(self, buf, 0, len2);
    offset += len2;
    len -= len2;
  }
}

- (void)writeRawWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text {
  IOSByteArray *raw = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(text)) asUnquotedUTF8];
  if (((IOSByteArray *) nil_chk(raw))->size_ > 0) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, raw);
  }
}

- (void)writeRawValueWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_RAW);
  IOSByteArray *raw = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(text)) asUnquotedUTF8];
  if (((IOSByteArray *) nil_chk(raw))->size_ > 0) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, raw);
  }
}

- (void)writeRawWithCharArray:(IOSCharArray *)cbuf
                      withInt:(jint)offset
                      withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeRawWithCharArray_withInt_withInt_(self, cbuf, offset, len);
}

- (void)writeRawWithChar:(jchar)ch {
  if ((_outputTail_ + 3) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  IOSByteArray *bbuf = _outputBuffer_;
  if (ch <= (jint) 0x7F) {
    *IOSByteArray_GetRef(nil_chk(bbuf), _outputTail_++) = (jbyte) ch;
  }
  else if (ch < (jint) 0x800) {
    *IOSByteArray_GetRef(nil_chk(bbuf), _outputTail_++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
    *IOSByteArray_GetRef(bbuf, _outputTail_++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
  }
  else {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(self, ch, nil, 0, 0);
  }
}

- (void)_writeSegmentedRawWithCharArray:(IOSCharArray *)cbuf
                                withInt:(jint)offset
                                withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeSegmentedRawWithCharArray_withInt_withInt_(self, cbuf, offset, len);
}

- (void)_writeRawSegmentWithCharArray:(IOSCharArray *)cbuf
                              withInt:(jint)offset
                              withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeRawSegmentWithCharArray_withInt_withInt_(self, cbuf, offset, end);
}

- (void)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                              withByteArray:(IOSByteArray *)data
                                                    withInt:(jint)offset
                                                    withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BINARY);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(self, b64variant, data, offset, offset + len);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (jint)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                      withJavaIoInputStream:(JavaIoInputStream *)data
                                                    withInt:(jint)dataLength {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BINARY);
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  IOSByteArray *encodingBuffer = [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocBase64Buffer];
  jint bytes;
  @try {
    if (dataLength < 0) {
      bytes = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(self, b64variant, data, encodingBuffer);
    }
    else {
      jint missing = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(self, b64variant, data, encodingBuffer, dataLength);
      if (missing > 0) {
        [self _reportErrorWithNSString:JreStrcat("$I$IC", @"Too few bytes available: missing ", missing, @" bytes (out of ", dataLength, ')')];
      }
      bytes = dataLength;
    }
  }
  @finally {
    [_ioContext_ releaseBase64BufferWithByteArray:encodingBuffer];
  }
  if (_outputTail_ >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  return bytes;
}

- (void)writeNumberWithShort:(jshort)s {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if ((_outputTail_ + 6) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedShortWithShort_(self, s);
    return;
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withByteArray_withInt_(s, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedShortWithShort:(jshort)s {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedShortWithShort_(self, s);
}

- (void)writeNumberWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if ((_outputTail_ + 11) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedIntWithInt_(self, i);
    return;
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withByteArray_withInt_(i, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedIntWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedIntWithInt_(self, i);
}

- (void)writeNumberWithLong:(jlong)l {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedLongWithLong_(self, l);
    return;
  }
  if ((_outputTail_ + 21) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputLongWithLong_withByteArray_withInt_(l, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedLongWithLong:(jlong)l {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedLongWithLong_(self, l);
}

- (void)writeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (value == nil) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(self);
  }
  else if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(self, [value description]);
  }
  else {
    [self writeRawWithNSString:[value description]];
  }
}

- (void)writeNumberWithDouble:(jdouble)d {
  if (_cfgNumbersAsStrings_ || (((JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isInfiniteWithDouble_(d)) && [((ComFasterxmlJacksonCoreJsonGenerator_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_NON_NUMERIC_NUMBERS))) enabledInWithInt:_features_]))) {
    [self writeStringWithNSString:NSString_java_valueOfDouble_(d)];
    return;
  }
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  [self writeRawWithNSString:NSString_java_valueOfDouble_(d)];
}

- (void)writeNumberWithFloat:(jfloat)f {
  if (_cfgNumbersAsStrings_ || (((JavaLangFloat_isNaNWithFloat_(f) || JavaLangFloat_isInfiniteWithFloat_(f)) && [((ComFasterxmlJacksonCoreJsonGenerator_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_NON_NUMERIC_NUMBERS))) enabledInWithInt:_features_]))) {
    [self writeStringWithNSString:NSString_java_valueOfFloat_(f)];
    return;
  }
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  [self writeRawWithNSString:NSString_java_valueOfFloat_(f)];
}

- (void)writeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (value == nil) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(self);
  }
  else if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(self, [self _asStringWithJavaMathBigDecimal:value]);
  }
  else {
    [self writeRawWithNSString:[self _asStringWithJavaMathBigDecimal:value]];
  }
}

- (void)writeNumberWithNSString:(NSString *)encodedValue {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(self, encodedValue);
  }
  else {
    [self writeRawWithNSString:encodedValue];
  }
}

- (void)_writeQuotedRawWithNSString:(NSString *)value {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(self, value);
}

- (void)writeBooleanWithBoolean:(jboolean)state {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BOOLEAN);
  if ((_outputTail_ + 5) >= _outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  IOSByteArray *keyword = state ? ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_TRUE_BYTES : ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_FALSE_BYTES;
  jint len = keyword->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyword, 0, _outputBuffer_, _outputTail_, len);
  _outputTail_ += len;
}

- (void)writeNull {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NULL);
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(self);
}

- (void)_verifyValueWriteWithNSString:(NSString *)typeMsg {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(self, typeMsg);
}

- (void)flush {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  if (_outputStream_ != nil) {
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, FLUSH_PASSED_TO_STREAM)]) {
      [_outputStream_ flush];
    }
  }
}

- (void)close {
  [super close];
  if ((_outputBuffer_ != nil) && [self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_JSON_CONTENT)]) {
    while (true) {
      ComFasterxmlJacksonCoreJsonStreamContext *ctxt = [self getOutputContext];
      if ([((ComFasterxmlJacksonCoreJsonStreamContext *) nil_chk(ctxt)) inArray]) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndArray(self);
      }
      else if ([ctxt inObject]) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndObject(self);
      }
      else {
        break;
      }
    }
  }
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  _outputTail_ = 0;
  if (_outputStream_ != nil) {
    if ([((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) isResourceManaged] || [self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_TARGET)]) {
      [_outputStream_ close];
    }
    else if ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, FLUSH_PASSED_TO_STREAM)]) {
      [_outputStream_ flush];
    }
  }
  [self _releaseBuffers];
}

- (void)_releaseBuffers {
  IOSByteArray *buf = _outputBuffer_;
  if (buf != nil && _bufferRecyclable_) {
    JreStrongAssign(&_outputBuffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseWriteEncodingBufferWithByteArray:buf];
  }
  IOSCharArray *cbuf = _charBuffer_;
  if (cbuf != nil) {
    JreStrongAssign(&_charBuffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseConcatBufferWithCharArray:cbuf];
  }
}

- (void)_writeBytesWithByteArray:(IOSByteArray *)bytes {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, bytes);
}

- (void)_writeBytesWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)offset
                         withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_withInt_withInt_(self, bytes, offset, len);
}

- (void)_writeStringSegmentsWithNSString:(NSString *)text
                             withBoolean:(jboolean)addQuotes {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, text, addQuotes);
}

- (void)_writeStringSegmentsWithCharArray:(IOSCharArray *)cbuf
                                  withInt:(jint)offset
                                  withInt:(jint)totalLen {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(self, cbuf, offset, totalLen);
}

- (void)_writeStringSegmentsWithNSString:(NSString *)text
                                 withInt:(jint)offset
                                 withInt:(jint)totalLen {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withInt_withInt_(self, text, offset, totalLen);
}

- (void)_writeStringSegmentWithCharArray:(IOSCharArray *)cbuf
                                 withInt:(jint)offset
                                 withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(self, cbuf, offset, len);
}

- (void)_writeStringSegmentWithNSString:(NSString *)text
                                withInt:(jint)offset
                                withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(self, text, offset, len);
}

- (void)_writeStringSegment2WithCharArray:(IOSCharArray *)cbuf
                                  withInt:(jint)offset
                                  withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithCharArray_withInt_withInt_(self, cbuf, offset, end);
}

- (void)_writeStringSegment2WithNSString:(NSString *)text
                                 withInt:(jint)offset
                                 withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithNSString_withInt_withInt_(self, text, offset, end);
}

- (void)_writeStringSegmentASCII2WithCharArray:(IOSCharArray *)cbuf
                                       withInt:(jint)offset
                                       withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithCharArray_withInt_withInt_(self, cbuf, offset, end);
}

- (void)_writeStringSegmentASCII2WithNSString:(NSString *)text
                                      withInt:(jint)offset
                                      withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithNSString_withInt_withInt_(self, text, offset, end);
}

- (void)_writeCustomStringSegment2WithCharArray:(IOSCharArray *)cbuf
                                        withInt:(jint)offset
                                        withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithCharArray_withInt_withInt_(self, cbuf, offset, end);
}

- (void)_writeCustomStringSegment2WithNSString:(NSString *)text
                                       withInt:(jint)offset
                                       withInt:(jint)end {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithNSString_withInt_withInt_(self, text, offset, end);
}

- (jint)_writeCustomEscapeWithByteArray:(IOSByteArray *)outputBuffer
                                withInt:(jint)outputPtr
withComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)esc
                                withInt:(jint)remainingChars {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(self, outputBuffer, outputPtr, esc, remainingChars);
}

- (jint)_handleLongCustomEscapeWithByteArray:(IOSByteArray *)outputBuffer
                                     withInt:(jint)outputPtr
                                     withInt:(jint)outputEnd
                               withByteArray:(IOSByteArray *)raw
                                     withInt:(jint)remainingChars {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__handleLongCustomEscapeWithByteArray_withInt_withInt_withByteArray_withInt_(self, outputBuffer, outputPtr, outputEnd, raw, remainingChars);
}

- (void)_writeUTF8SegmentsWithByteArray:(IOSByteArray *)utf8
                                withInt:(jint)offset
                                withInt:(jint)totalLen {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentsWithByteArray_withInt_withInt_(self, utf8, offset, totalLen);
}

- (void)_writeUTF8SegmentWithByteArray:(IOSByteArray *)utf8
                               withInt:(jint)offset
                               withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentWithByteArray_withInt_withInt_(self, utf8, offset, len);
}

- (void)_writeUTF8Segment2WithByteArray:(IOSByteArray *)utf8
                                withInt:(jint)offset
                                withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8Segment2WithByteArray_withInt_withInt_(self, utf8, offset, len);
}

- (void)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                               withByteArray:(IOSByteArray *)input
                                                     withInt:(jint)inputPtr
                                                     withInt:(jint)inputEnd {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(self, b64variant, input, inputPtr, inputEnd);
}

- (jint)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                       withJavaIoInputStream:(JavaIoInputStream *)data
                                               withByteArray:(IOSByteArray *)readBuffer
                                                     withInt:(jint)bytesLeft {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(self, b64variant, data, readBuffer, bytesLeft);
}

- (jint)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                       withJavaIoInputStream:(JavaIoInputStream *)data
                                               withByteArray:(IOSByteArray *)readBuffer {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(self, b64variant, data, readBuffer);
}

- (jint)_readMoreWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)readBuffer
                               withInt:(jint)inputPtr
                               withInt:(jint)inputEnd
                               withInt:(jint)maxRead {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, inArg, readBuffer, inputPtr, inputEnd, maxRead);
}

- (jint)_outputRawMultiByteCharWithInt:(jint)ch
                         withCharArray:(IOSCharArray *)cbuf
                               withInt:(jint)inputOffset
                               withInt:(jint)inputEnd {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(self, ch, cbuf, inputOffset, inputEnd);
}

- (void)_outputSurrogatesWithInt:(jint)surr1
                         withInt:(jint)surr2 {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputSurrogatesWithInt_withInt_(self, surr1, surr2);
}

- (jint)_outputMultiByteCharWithInt:(jint)ch
                            withInt:(jint)outputPtr {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
}

- (void)_writeNull {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(self);
}

- (jint)_writeGenericEscapeWithInt:(jint)charToEscape
                           withInt:(jint)outputPtr {
  return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, charToEscape, outputPtr);
}

- (void)_flushBuffer {
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
}

- (void)dealloc {
  RELEASE_(_outputStream_);
  RELEASE_(_outputBuffer_);
  RELEASE_(_charBuffer_);
  RELEASE_(_entityBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 6, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x14, 9, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x14, 9, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x11, 16, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 20, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 24, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 25, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 28, 27, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 29, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 30, 29, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 31, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 32, 31, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 33, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 34, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 35, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 36, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 37, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x14, 40, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 41, 42, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 41, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 43, 44, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 43, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 43, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 45, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 45, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 46, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 46, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 47, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 47, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 48, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 48, 17, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 49, 50, 24, -1, -1, -1 },
    { NULL, "I", 0x12, 51, 52, 24, -1, -1, -1 },
    { NULL, "V", 0x12, 53, 14, 24, -1, -1, -1 },
    { NULL, "V", 0x12, 54, 14, 24, -1, -1, -1 },
    { NULL, "V", 0x12, 55, 14, 24, -1, -1, -1 },
    { NULL, "V", 0x14, 56, 23, 24, -1, -1, -1 },
    { NULL, "I", 0x14, 56, 57, 24, -1, -1, -1 },
    { NULL, "I", 0x14, 56, 58, 24, -1, -1, -1 },
    { NULL, "I", 0x12, 59, 60, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 61, 62, 4, -1, -1, -1 },
    { NULL, "V", 0x14, 63, 64, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 65, 64, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 66, 64, 4, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withInt:withComFasterxmlJacksonCoreObjectCodec:withJavaIoOutputStream:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withInt:withComFasterxmlJacksonCoreObjectCodec:withJavaIoOutputStream:withByteArray:withInt:withBoolean:);
  methods[2].selector = @selector(getOutputTarget);
  methods[3].selector = @selector(getOutputBuffered);
  methods[4].selector = @selector(writeFieldNameWithNSString:);
  methods[5].selector = @selector(writeFieldNameWithComFasterxmlJacksonCoreSerializableString:);
  methods[6].selector = @selector(_writeUnqWithComFasterxmlJacksonCoreSerializableString:);
  methods[7].selector = @selector(writeStartArray);
  methods[8].selector = @selector(writeEndArray);
  methods[9].selector = @selector(writeStartObject);
  methods[10].selector = @selector(writeStartObjectWithId:);
  methods[11].selector = @selector(writeEndObject);
  methods[12].selector = @selector(_writePPFieldNameWithNSString:);
  methods[13].selector = @selector(_writePPFieldNameWithComFasterxmlJacksonCoreSerializableString:);
  methods[14].selector = @selector(writeStringWithNSString:);
  methods[15].selector = @selector(writeStringWithJavaIoReader:withInt:);
  methods[16].selector = @selector(writeStringWithCharArray:withInt:withInt:);
  methods[17].selector = @selector(writeStringWithComFasterxmlJacksonCoreSerializableString:);
  methods[18].selector = @selector(writeRawUTF8StringWithByteArray:withInt:withInt:);
  methods[19].selector = @selector(writeUTF8StringWithByteArray:withInt:withInt:);
  methods[20].selector = @selector(writeRawWithNSString:);
  methods[21].selector = @selector(writeRawWithNSString:withInt:withInt:);
  methods[22].selector = @selector(writeRawWithComFasterxmlJacksonCoreSerializableString:);
  methods[23].selector = @selector(writeRawValueWithComFasterxmlJacksonCoreSerializableString:);
  methods[24].selector = @selector(writeRawWithCharArray:withInt:withInt:);
  methods[25].selector = @selector(writeRawWithChar:);
  methods[26].selector = @selector(_writeSegmentedRawWithCharArray:withInt:withInt:);
  methods[27].selector = @selector(_writeRawSegmentWithCharArray:withInt:withInt:);
  methods[28].selector = @selector(writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withByteArray:withInt:withInt:);
  methods[29].selector = @selector(writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withInt:);
  methods[30].selector = @selector(writeNumberWithShort:);
  methods[31].selector = @selector(_writeQuotedShortWithShort:);
  methods[32].selector = @selector(writeNumberWithInt:);
  methods[33].selector = @selector(_writeQuotedIntWithInt:);
  methods[34].selector = @selector(writeNumberWithLong:);
  methods[35].selector = @selector(_writeQuotedLongWithLong:);
  methods[36].selector = @selector(writeNumberWithJavaMathBigInteger:);
  methods[37].selector = @selector(writeNumberWithDouble:);
  methods[38].selector = @selector(writeNumberWithFloat:);
  methods[39].selector = @selector(writeNumberWithJavaMathBigDecimal:);
  methods[40].selector = @selector(writeNumberWithNSString:);
  methods[41].selector = @selector(_writeQuotedRawWithNSString:);
  methods[42].selector = @selector(writeBooleanWithBoolean:);
  methods[43].selector = @selector(writeNull);
  methods[44].selector = @selector(_verifyValueWriteWithNSString:);
  methods[45].selector = @selector(flush);
  methods[46].selector = @selector(close);
  methods[47].selector = @selector(_releaseBuffers);
  methods[48].selector = @selector(_writeBytesWithByteArray:);
  methods[49].selector = @selector(_writeBytesWithByteArray:withInt:withInt:);
  methods[50].selector = @selector(_writeStringSegmentsWithNSString:withBoolean:);
  methods[51].selector = @selector(_writeStringSegmentsWithCharArray:withInt:withInt:);
  methods[52].selector = @selector(_writeStringSegmentsWithNSString:withInt:withInt:);
  methods[53].selector = @selector(_writeStringSegmentWithCharArray:withInt:withInt:);
  methods[54].selector = @selector(_writeStringSegmentWithNSString:withInt:withInt:);
  methods[55].selector = @selector(_writeStringSegment2WithCharArray:withInt:withInt:);
  methods[56].selector = @selector(_writeStringSegment2WithNSString:withInt:withInt:);
  methods[57].selector = @selector(_writeStringSegmentASCII2WithCharArray:withInt:withInt:);
  methods[58].selector = @selector(_writeStringSegmentASCII2WithNSString:withInt:withInt:);
  methods[59].selector = @selector(_writeCustomStringSegment2WithCharArray:withInt:withInt:);
  methods[60].selector = @selector(_writeCustomStringSegment2WithNSString:withInt:withInt:);
  methods[61].selector = @selector(_writeCustomEscapeWithByteArray:withInt:withComFasterxmlJacksonCoreSerializableString:withInt:);
  methods[62].selector = @selector(_handleLongCustomEscapeWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[63].selector = @selector(_writeUTF8SegmentsWithByteArray:withInt:withInt:);
  methods[64].selector = @selector(_writeUTF8SegmentWithByteArray:withInt:withInt:);
  methods[65].selector = @selector(_writeUTF8Segment2WithByteArray:withInt:withInt:);
  methods[66].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withByteArray:withInt:withInt:);
  methods[67].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withByteArray:withInt:);
  methods[68].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withByteArray:);
  methods[69].selector = @selector(_readMoreWithJavaIoInputStream:withByteArray:withInt:withInt:withInt:);
  methods[70].selector = @selector(_outputRawMultiByteCharWithInt:withCharArray:withInt:withInt:);
  methods[71].selector = @selector(_outputSurrogatesWithInt:withInt:);
  methods[72].selector = @selector(_outputMultiByteCharWithInt:withInt:);
  methods[73].selector = @selector(_writeNull);
  methods[74].selector = @selector(_writeGenericEscapeWithInt:withInt:);
  methods[75].selector = @selector(_flushBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE_u", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_u, 0x1a, -1, -1, -1, -1 },
    { "BYTE_0", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_0, 0x1a, -1, -1, -1, -1 },
    { "BYTE_LBRACKET", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LBRACKET, 0x1a, -1, -1, -1, -1 },
    { "BYTE_RBRACKET", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RBRACKET, 0x1a, -1, -1, -1, -1 },
    { "BYTE_LCURLY", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_LCURLY, 0x1a, -1, -1, -1, -1 },
    { "BYTE_RCURLY", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RCURLY, 0x1a, -1, -1, -1, -1 },
    { "BYTE_BACKSLASH", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH, 0x1a, -1, -1, -1, -1 },
    { "BYTE_COMMA", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COMMA, 0x1a, -1, -1, -1, -1 },
    { "BYTE_COLON", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COLON, 0x1a, -1, -1, -1, -1 },
    { "MAX_BYTES_TO_BUFFER", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_MAX_BYTES_TO_BUFFER, 0x1a, -1, -1, -1, -1 },
    { "HEX_CHARS", "[B", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "NULL_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "TRUE_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "FALSE_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "_outputStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_quoteChar_", "B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputTail_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputEnd_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_outputMaxContiguous_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_charBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_charBufferLength_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_entityBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_bufferRecyclable_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreIoIOContext;ILComFasterxmlJacksonCoreObjectCodec;LJavaIoOutputStream;", "LComFasterxmlJacksonCoreIoIOContext;ILComFasterxmlJacksonCoreObjectCodec;LJavaIoOutputStream;[BIZ", "writeFieldName", "LNSString;", "LJavaIoIOException;", "LComFasterxmlJacksonCoreSerializableString;", "_writeUnq", "writeStartObject", "LNSObject;", "_writePPFieldName", "writeString", "LJavaIoReader;I", "[CII", "writeRawUTF8String", "[BII", "writeUTF8String", "writeRaw", "LNSString;II", "writeRawValue", "C", "_writeSegmentedRaw", "_writeRawSegment", "writeBinary", "LComFasterxmlJacksonCoreBase64Variant;[BII", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonGenerationException;", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;I", "writeNumber", "S", "_writeQuotedShort", "I", "_writeQuotedInt", "J", "_writeQuotedLong", "LJavaMathBigInteger;", "D", "F", "LJavaMathBigDecimal;", "_writeQuotedRaw", "writeBoolean", "Z", "_verifyValueWrite", "_writeBytes", "[B", "_writeStringSegments", "LNSString;Z", "_writeStringSegment", "_writeStringSegment2", "_writeStringSegmentASCII2", "_writeCustomStringSegment2", "_writeCustomEscape", "[BILComFasterxmlJacksonCoreSerializableString;I", "_handleLongCustomEscape", "[BII[BI", "_writeUTF8Segments", "_writeUTF8Segment", "_writeUTF8Segment2", "_writeBinary", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;[BI", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;[B", "_readMore", "LJavaIoInputStream;[BIII", "_outputRawMultiByteChar", "I[CII", "_outputSurrogates", "II", "_outputMultiByteChar", "_writeGenericEscape", &ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, &ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_NULL_BYTES, &ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_TRUE_BYTES, &ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_FALSE_BYTES };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonUTF8JsonGenerator = { "UTF8JsonGenerator", "com.fasterxml.jackson.core.json", ptrTable, methods, fields, 7, 0x1, 76, 24, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonUTF8JsonGenerator;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonUTF8JsonGenerator class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, ComFasterxmlJacksonCoreIoCharTypes_copyHexBytes());
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_NULL_BYTES, [IOSByteArray newArrayWithBytes:(jbyte[]){ 'n', 'u', 'l', 'l' } count:4]);
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_TRUE_BYTES, [IOSByteArray newArrayWithBytes:(jbyte[]){ 't', 'r', 'u', 'e' } count:4]);
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_FALSE_BYTES, [IOSByteArray newArrayWithBytes:(jbyte[]){ 'f', 'a', 'l', 's', 'e' } count:5]);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator)
  }
}

@end

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg) {
  ComFasterxmlJacksonCoreJsonJsonGeneratorImpl_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_(self, ctxt, features, codec);
  self->_quoteChar_ = '"';
  JreStrongAssign(&self->_outputStream_, outArg);
  self->_bufferRecyclable_ = true;
  JreStrongAssign(&self->_outputBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ctxt)) allocWriteEncodingBuffer]);
  self->_outputEnd_ = ((IOSByteArray *) nil_chk(self->_outputBuffer_))->size_;
  self->_outputMaxContiguous_ = JreRShift32(self->_outputEnd_, 3);
  JreStrongAssign(&self->_charBuffer_, [ctxt allocConcatBuffer]);
  self->_charBufferLength_ = ((IOSCharArray *) nil_chk(self->_charBuffer_))->size_;
  if ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, ESCAPE_NON_ASCII)]) {
    [self setHighestNonEscapedCharWithInt:127];
  }
}

ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *new_ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_, ctxt, features, codec, outArg)
}

ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *create_ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_, ctxt, features, codec, outArg)
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg, IOSByteArray *outputBuffer, jint outputOffset, jboolean bufferRecyclable) {
  ComFasterxmlJacksonCoreJsonJsonGeneratorImpl_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_(self, ctxt, features, codec);
  self->_quoteChar_ = '"';
  JreStrongAssign(&self->_outputStream_, outArg);
  self->_bufferRecyclable_ = bufferRecyclable;
  self->_outputTail_ = outputOffset;
  JreStrongAssign(&self->_outputBuffer_, outputBuffer);
  self->_outputEnd_ = ((IOSByteArray *) nil_chk(self->_outputBuffer_))->size_;
  self->_outputMaxContiguous_ = (JreRShift32(self->_outputEnd_, 3));
  JreStrongAssign(&self->_charBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ctxt)) allocConcatBuffer]);
  self->_charBufferLength_ = ((IOSCharArray *) nil_chk(self->_charBuffer_))->size_;
}

ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *new_ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg, IOSByteArray *outputBuffer, jint outputOffset, jboolean bufferRecyclable) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_, ctxt, features, codec, outArg, outputBuffer, outputOffset, bufferRecyclable)
}

ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *create_ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, ComFasterxmlJacksonCoreObjectCodec *codec, JavaIoOutputStream *outArg, IOSByteArray *outputBuffer, jint outputOffset, jboolean bufferRecyclable) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreObjectCodec_withJavaIoOutputStream_withByteArray_withInt_withBoolean_, ctxt, features, codec, outArg, outputBuffer, outputOffset, bufferRecyclable)
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUnqWithComFasterxmlJacksonCoreSerializableString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name) {
  jint len = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) appendQuotedUTF8WithByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
  if (len < 0) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, [name asQuotedUTF8]);
  }
  else {
    self->_outputTail_ += len;
  }
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndArray(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self) {
  if (![((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) inArray]) {
    [self _reportErrorWithNSString:JreStrcat("$$", @"Current context not Array but ", [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) typeDesc])];
  }
  if (self->_cfgPrettyPrinter_ != nil) {
    [self->_cfgPrettyPrinter_ writeEndArrayWithComFasterxmlJacksonCoreJsonGenerator:self withInt:[((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) getEntryCount]];
  }
  else {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RBRACKET;
  }
  JreStrongAssign(&self->_writeContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) clearAndGetParent]);
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeEndObject(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self) {
  if (![((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) inObject]) {
    [self _reportErrorWithNSString:JreStrcat("$$", @"Current context not Object but ", [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) typeDesc])];
  }
  if (self->_cfgPrettyPrinter_ != nil) {
    [self->_cfgPrettyPrinter_ writeEndObjectWithComFasterxmlJacksonCoreJsonGenerator:self withInt:[((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) getEntryCount]];
  }
  else {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_RCURLY;
  }
  JreStrongAssign(&self->_writeContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) clearAndGetParent]);
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *name) {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) writeFieldNameWithNSString:name];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA) {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  if (self->_cfgUnqNames_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, name, false);
    return;
  }
  jint len = [((NSString *) nil_chk(name)) java_length];
  if (len > self->_charBufferLength_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(self, name, true);
    return;
  }
  if (self->_outputTail_ >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  [name java_getChars:0 sourceEnd:len destination:self->_charBuffer_ destinationBegin:0];
  if (len <= self->_outputMaxContiguous_) {
    if ((self->_outputTail_ + len) > self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(self, self->_charBuffer_, 0, len);
  }
  else {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(self, self->_charBuffer_, 0, len);
  }
  if (self->_outputTail_ >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name) {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) writeFieldNameWithNSString:[((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) getValue]];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA) {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  jboolean addQuotes = !self->_cfgUnqNames_;
  if (addQuotes) {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
  ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, [name asQuotedUTF8]);
  if (addQuotes) {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_writeRawWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len) {
  {
    jint len3 = len + len + len;
    if ((self->_outputTail_ + len3) > self->_outputEnd_) {
      if (self->_outputEnd_ < len3) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeSegmentedRawWithCharArray_withInt_withInt_(self, cbuf, offset, len);
        return;
      }
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
  }
  len += offset;
  while (offset < len) {
    while (true) {
      jint ch = (jint) IOSCharArray_Get(nil_chk(cbuf), offset);
      if (ch > (jint) 0x7F) {
        goto break_inner_loop;
      }
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = (jbyte) ch;
      if (++offset >= len) {
        goto break_main_loop;
      }
    }
    break_inner_loop: ;
    jchar ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch < (jint) 0x800) {
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      offset = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(self, ch, cbuf, offset, len);
    }
  }
  break_main_loop: ;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeSegmentedRawWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len) {
  jint end = self->_outputEnd_;
  IOSByteArray *bbuf = self->_outputBuffer_;
  jint inputEnd = offset + len;
  while (offset < inputEnd) {
    while (true) {
      jint ch = (jint) IOSCharArray_Get(nil_chk(cbuf), offset);
      if (ch >= (jint) 0x80) {
        goto break_inner_loop;
      }
      if (self->_outputTail_ >= end) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
      }
      *IOSByteArray_GetRef(nil_chk(bbuf), self->_outputTail_++) = (jbyte) ch;
      if (++offset >= inputEnd) {
        goto break_main_loop;
      }
    }
    break_inner_loop: ;
    if ((self->_outputTail_ + 3) >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jchar ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch < (jint) 0x800) {
      *IOSByteArray_GetRef(nil_chk(bbuf), self->_outputTail_++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      offset = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(self, ch, cbuf, offset, inputEnd);
    }
  }
  break_main_loop: ;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeRawSegmentWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end) {
  while (offset < end) {
    while (true) {
      jint ch = (jint) IOSCharArray_Get(nil_chk(cbuf), offset);
      if (ch > (jint) 0x7F) {
        goto break_inner_loop;
      }
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = (jbyte) ch;
      if (++offset >= end) {
        goto break_main_loop;
      }
    }
    break_inner_loop: ;
    jchar ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch < (jint) 0x800) {
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      offset = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(self, ch, cbuf, offset, end);
    }
  }
  break_main_loop: ;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedShortWithShort_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jshort s) {
  if ((self->_outputTail_ + 8) >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withByteArray_withInt_(s, self->_outputBuffer_, self->_outputTail_);
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedIntWithInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint i) {
  if ((self->_outputTail_ + 13) >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withByteArray_withInt_(i, self->_outputBuffer_, self->_outputTail_);
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedLongWithLong_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jlong l) {
  if ((self->_outputTail_ + 23) >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputLongWithLong_withByteArray_withInt_(l, self->_outputBuffer_, self->_outputTail_);
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeQuotedRawWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *value) {
  if (self->_outputTail_ >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  [self writeRawWithNSString:value];
  if (self->_outputTail_ >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__verifyValueWriteWithNSString_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *typeMsg) {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_writeContext_)) writeValue];
  if (self->_cfgPrettyPrinter_ != nil) {
    [self _verifyPrettyValueWriteWithNSString:typeMsg withInt:status];
    return;
  }
  jbyte b;
  switch (status) {
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AS_IS:
    default:
    return;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA:
    b = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COMMA;
    break;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COLON:
    b = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_COLON;
    break;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_SPACE:
    if (self->_rootValueSeparator_ != nil) {
      IOSByteArray *raw = [self->_rootValueSeparator_ asUnquotedUTF8];
      if (((IOSByteArray *) nil_chk(raw))->size_ > 0) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(self, raw);
      }
    }
    return;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_NAME:
    [self _reportCantWriteValueExpectNameWithNSString:typeMsg];
    return;
  }
  if (self->_outputTail_ >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = b;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *bytes) {
  jint len = ((IOSByteArray *) nil_chk(bytes))->size_;
  if ((self->_outputTail_ + len) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    if (len > ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_MAX_BYTES_TO_BUFFER) {
      [((JavaIoOutputStream *) nil_chk(self->_outputStream_)) writeWithByteArray:bytes withInt:0 withInt:len];
      return;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, self->_outputBuffer_, self->_outputTail_, len);
  self->_outputTail_ += len;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBytesWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *bytes, jint offset, jint len) {
  if ((self->_outputTail_ + len) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    if (len > ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_MAX_BYTES_TO_BUFFER) {
      [((JavaIoOutputStream *) nil_chk(self->_outputStream_)) writeWithByteArray:bytes withInt:offset withInt:len];
      return;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, offset, self->_outputBuffer_, self->_outputTail_, len);
  self->_outputTail_ += len;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jboolean addQuotes) {
  if (addQuotes) {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
  jint left = [((NSString *) nil_chk(text)) java_length];
  jint offset = 0;
  while (left > 0) {
    jint len = JavaLangMath_minWithInt_withInt_(self->_outputMaxContiguous_, left);
    if ((self->_outputTail_ + len) > self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(self, text, offset, len);
    offset += len;
    left -= len;
  }
  if (addQuotes) {
    if (self->_outputTail_ >= self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint totalLen) {
  do {
    jint len = JavaLangMath_minWithInt_withInt_(self->_outputMaxContiguous_, totalLen);
    if ((self->_outputTail_ + len) > self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(self, cbuf, offset, len);
    offset += len;
    totalLen -= len;
  }
  while (totalLen > 0);
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentsWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint totalLen) {
  do {
    jint len = JavaLangMath_minWithInt_withInt_(self->_outputMaxContiguous_, totalLen);
    if ((self->_outputTail_ + len) > self->_outputEnd_) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(self, text, offset, len);
    offset += len;
    totalLen -= len;
  }
  while (totalLen > 0);
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint len) {
  len += offset;
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  while (offset < len) {
    jint ch = IOSCharArray_Get(nil_chk(cbuf), offset);
    if (ch > (jint) 0x7F || IOSIntArray_Get(nil_chk(escCodes), ch) != 0) {
      break;
    }
    *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
    ++offset;
  }
  self->_outputTail_ = outputPtr;
  if (offset < len) {
    if (self->_characterEscapes_ != nil) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithCharArray_withInt_withInt_(self, cbuf, offset, len);
    }
    else if (self->_maximumNonEscapedChar_ == 0) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithCharArray_withInt_withInt_(self, cbuf, offset, len);
    }
    else {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithCharArray_withInt_withInt_(self, cbuf, offset, len);
    }
  }
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint len) {
  len += offset;
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  while (offset < len) {
    jint ch = [((NSString *) nil_chk(text)) charAtWithInt:offset];
    if (ch > (jint) 0x7F || IOSIntArray_Get(nil_chk(escCodes), ch) != 0) {
      break;
    }
    *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
    ++offset;
  }
  self->_outputTail_ = outputPtr;
  if (offset < len) {
    if (self->_characterEscapes_ != nil) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithNSString_withInt_withInt_(self, text, offset, len);
    }
    else if (self->_maximumNonEscapedChar_ == 0) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithNSString_withInt_withInt_(self, text, offset, len);
    }
    else {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithNSString_withInt_withInt_(self, text, offset, len);
    }
  }
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  while (offset < end) {
    jint ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegment2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  while (offset < end) {
    jint ch = [((NSString *) nil_chk(text)) charAtWithInt:offset++];
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxUnescaped = self->_maximumNonEscapedChar_;
  while (offset < end) {
    jint ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch > maxUnescaped) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeStringSegmentASCII2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxUnescaped = self->_maximumNonEscapedChar_;
  while (offset < end) {
    jint ch = [((NSString *) nil_chk(text)) charAtWithInt:offset++];
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch > maxUnescaped) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSCharArray *cbuf, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxUnescaped = (self->_maximumNonEscapedChar_ <= 0) ? (jint) 0xFFFF : self->_maximumNonEscapedChar_;
  ComFasterxmlJacksonCoreIoCharacterEscapes *customEscapes = self->_characterEscapes_;
  while (offset < end) {
    jint ch = IOSCharArray_Get(nil_chk(cbuf), offset++);
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else if (escape == ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM) {
        id<ComFasterxmlJacksonCoreSerializableString> esc = [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:ch];
        if (esc == nil) {
          [self _reportErrorWithNSString:JreStrcat("$$$", @"Invalid custom escape definitions; custom escape not found for character code 0x", JavaLangInteger_toHexStringWithInt_(ch), @", although was supposed to have one")];
        }
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(self, outputBuffer, outputPtr, esc, end - offset);
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch > maxUnescaped) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      continue;
    }
    id<ComFasterxmlJacksonCoreSerializableString> esc = [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:ch];
    if (esc != nil) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(self, outputBuffer, outputPtr, esc, end - offset);
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomStringSegment2WithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, NSString *text, jint offset, jint end) {
  if ((self->_outputTail_ + 6 * (end - offset)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  jint outputPtr = self->_outputTail_;
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxUnescaped = (self->_maximumNonEscapedChar_ <= 0) ? (jint) 0xFFFF : self->_maximumNonEscapedChar_;
  ComFasterxmlJacksonCoreIoCharacterEscapes *customEscapes = self->_characterEscapes_;
  while (offset < end) {
    jint ch = [((NSString *) nil_chk(text)) charAtWithInt:offset++];
    if (ch <= (jint) 0x7F) {
      if (IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ch;
        continue;
      }
      jint escape = IOSIntArray_Get(escCodes, ch);
      if (escape > 0) {
        *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
        *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
      }
      else if (escape == ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM) {
        id<ComFasterxmlJacksonCoreSerializableString> esc = [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:ch];
        if (esc == nil) {
          [self _reportErrorWithNSString:JreStrcat("$$$", @"Invalid custom escape definitions; custom escape not found for character code 0x", JavaLangInteger_toHexStringWithInt_(ch), @", although was supposed to have one")];
        }
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(self, outputBuffer, outputPtr, esc, end - offset);
      }
      else {
        outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      }
      continue;
    }
    if (ch > maxUnescaped) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
      continue;
    }
    id<ComFasterxmlJacksonCoreSerializableString> esc = [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:ch];
    if (esc != nil) {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(self, outputBuffer, outputPtr, esc, end - offset);
      continue;
    }
    if (ch <= (jint) 0x7FF) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = (jbyte) ((jint) 0xc0 | (JreRShift32(ch, 6)));
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeCustomEscapeWithByteArray_withInt_withComFasterxmlJacksonCoreSerializableString_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *outputBuffer, jint outputPtr, id<ComFasterxmlJacksonCoreSerializableString> esc, jint remainingChars) {
  IOSByteArray *raw = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(esc)) asUnquotedUTF8];
  jint len = ((IOSByteArray *) nil_chk(raw))->size_;
  if (len > 6) {
    return ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__handleLongCustomEscapeWithByteArray_withInt_withInt_withByteArray_withInt_(self, outputBuffer, outputPtr, self->_outputEnd_, raw, remainingChars);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(raw, 0, outputBuffer, outputPtr, len);
  return (outputPtr + len);
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__handleLongCustomEscapeWithByteArray_withInt_withInt_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *outputBuffer, jint outputPtr, jint outputEnd, IOSByteArray *raw, jint remainingChars) {
  jint len = ((IOSByteArray *) nil_chk(raw))->size_;
  if ((outputPtr + len) > outputEnd) {
    self->_outputTail_ = outputPtr;
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    outputPtr = self->_outputTail_;
    if (len > ((IOSByteArray *) nil_chk(outputBuffer))->size_) {
      [((JavaIoOutputStream *) nil_chk(self->_outputStream_)) writeWithByteArray:raw withInt:0 withInt:len];
      return outputPtr;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(raw, 0, outputBuffer, outputPtr, len);
    outputPtr += len;
  }
  if ((outputPtr + 6 * remainingChars) > outputEnd) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    return self->_outputTail_;
  }
  return outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentsWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint totalLen) {
  do {
    jint len = JavaLangMath_minWithInt_withInt_(self->_outputMaxContiguous_, totalLen);
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentWithByteArray_withInt_withInt_(self, utf8, offset, len);
    offset += len;
    totalLen -= len;
  }
  while (totalLen > 0);
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8SegmentWithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint len) {
  IOSIntArray *escCodes = self->_outputEscapes_;
  for (jint ptr = offset, end = offset + len; ptr < end; ) {
    jint ch = IOSByteArray_Get(nil_chk(utf8), ptr++);
    if ((ch >= 0) && IOSIntArray_Get(nil_chk(escCodes), ch) != 0) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8Segment2WithByteArray_withInt_withInt_(self, utf8, offset, len);
      return;
    }
  }
  if ((self->_outputTail_ + len) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(utf8, offset, self->_outputBuffer_, self->_outputTail_, len);
  self->_outputTail_ += len;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeUTF8Segment2WithByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, IOSByteArray *utf8, jint offset, jint len) {
  jint outputPtr = self->_outputTail_;
  if ((outputPtr + (len * 6)) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    outputPtr = self->_outputTail_;
  }
  IOSByteArray *outputBuffer = self->_outputBuffer_;
  IOSIntArray *escCodes = self->_outputEscapes_;
  len += offset;
  while (offset < len) {
    jbyte b = IOSByteArray_Get(nil_chk(utf8), offset++);
    jint ch = b;
    if (ch < 0 || IOSIntArray_Get(nil_chk(escCodes), ch) == 0) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = b;
      continue;
    }
    jint escape = IOSIntArray_Get(nil_chk(escCodes), ch);
    if (escape > 0) {
      *IOSByteArray_GetRef(nil_chk(outputBuffer), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
      *IOSByteArray_GetRef(outputBuffer, outputPtr++) = (jbyte) escape;
    }
    else {
      outputPtr = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(self, ch, outputPtr);
    }
  }
  self->_outputTail_ = outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, IOSByteArray *input, jint inputPtr, jint inputEnd) {
  jint safeInputEnd = inputEnd - 3;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (inputPtr <= safeInputEnd) {
    if (self->_outputTail_ > safeOutputEnd) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(input), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF);
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSByteArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  jint inputLeft = inputEnd - inputPtr;
  if (inputLeft > 0) {
    if (self->_outputTail_ > safeOutputEnd) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(input), inputPtr++)), 16);
    if (inputLeft == 2) {
      b24 |= JreLShift32((((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF), 8);
    }
    self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:inputLeft withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
  }
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer, jint bytesLeft) {
  jint inputPtr = 0;
  jint inputEnd = 0;
  jint lastFullOffset = -3;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (bytesLeft > 2) {
    if (inputPtr > lastFullOffset) {
      inputEnd = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, bytesLeft);
      inputPtr = 0;
      if (inputEnd < 3) {
        break;
      }
      lastFullOffset = inputEnd - 3;
    }
    if (self->_outputTail_ > safeOutputEnd) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF);
    bytesLeft -= 3;
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSByteArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  if (bytesLeft > 0) {
    inputEnd = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, bytesLeft);
    inputPtr = 0;
    if (inputEnd > 0) {
      if (self->_outputTail_ > safeOutputEnd) {
        ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
      }
      jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 16);
      jint amount;
      if (inputPtr < inputEnd) {
        b24 |= JreLShift32((((jint) IOSByteArray_Get(readBuffer, inputPtr)) & (jint) 0xFF), 8);
        amount = 2;
      }
      else {
        amount = 1;
      }
      self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:amount withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
      bytesLeft -= amount;
    }
  }
  return bytesLeft;
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer) {
  jint inputPtr = 0;
  jint inputEnd = 0;
  jint lastFullOffset = -3;
  jint bytesDone = 0;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (true) {
    if (inputPtr > lastFullOffset) {
      inputEnd = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, ((IOSByteArray *) nil_chk(readBuffer))->size_);
      inputPtr = 0;
      if (inputEnd < 3) {
        break;
      }
      lastFullOffset = inputEnd - 3;
    }
    if (self->_outputTail_ > safeOutputEnd) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF);
    bytesDone += 3;
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSByteArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSByteArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  if (inputPtr < inputEnd) {
    if (self->_outputTail_ > safeOutputEnd) {
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 16);
    jint amount = 1;
    if (inputPtr < inputEnd) {
      b24 |= JreLShift32((((jint) IOSByteArray_Get(readBuffer, inputPtr)) & (jint) 0xFF), 8);
      amount = 2;
    }
    bytesDone += amount;
    self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:amount withByteArray:self->_outputBuffer_ withInt:self->_outputTail_];
  }
  return bytesDone;
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, JavaIoInputStream *inArg, IOSByteArray *readBuffer, jint inputPtr, jint inputEnd, jint maxRead) {
  jint i = 0;
  while (inputPtr < inputEnd) {
    *IOSByteArray_GetRef(nil_chk(readBuffer), i++) = IOSByteArray_Get(readBuffer, inputPtr++);
  }
  inputPtr = 0;
  inputEnd = i;
  maxRead = JavaLangMath_minWithInt_withInt_(maxRead, ((IOSByteArray *) nil_chk(readBuffer))->size_);
  do {
    jint length = maxRead - inputEnd;
    if (length == 0) {
      break;
    }
    jint count = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:readBuffer withInt:inputEnd withInt:length];
    if (count < 0) {
      return inputEnd;
    }
    inputEnd += count;
  }
  while (inputEnd < 3);
  return inputEnd;
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputRawMultiByteCharWithInt_withCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint ch, IOSCharArray *cbuf, jint inputOffset, jint inputEnd) {
  if (ch >= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR1_FIRST) {
    if (ch <= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR2_LAST) {
      if (inputOffset >= inputEnd || cbuf == nil) {
        [self _reportErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Split surrogate on writeRaw() input (last character): first character 0x%4x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ch) } count:1 type:NSObject_class_()])];
      }
      ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputSurrogatesWithInt_withInt_(self, ch, IOSCharArray_Get(nil_chk(cbuf), inputOffset));
      return inputOffset + 1;
    }
  }
  IOSByteArray *bbuf = self->_outputBuffer_;
  *IOSByteArray_GetRef(nil_chk(bbuf), self->_outputTail_++) = (jbyte) ((jint) 0xe0 | (JreRShift32(ch, 12)));
  *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
  *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
  return inputOffset;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputSurrogatesWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint surr1, jint surr2) {
  jint c = [self _decodeSurrogateWithInt:surr1 withInt:surr2];
  if ((self->_outputTail_ + 4) > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  IOSByteArray *bbuf = self->_outputBuffer_;
  *IOSByteArray_GetRef(nil_chk(bbuf), self->_outputTail_++) = (jbyte) ((jint) 0xf0 | (JreRShift32(c, 18)));
  *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | ((JreRShift32(c, 12)) & (jint) 0x3f));
  *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | ((JreRShift32(c, 6)) & (jint) 0x3f));
  *IOSByteArray_GetRef(bbuf, self->_outputTail_++) = (jbyte) ((jint) 0x80 | (c & (jint) 0x3f));
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__outputMultiByteCharWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint ch, jint outputPtr) {
  IOSByteArray *bbuf = self->_outputBuffer_;
  if (ch >= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR1_FIRST && ch <= ComFasterxmlJacksonCoreBaseGeneratorBase_SURR2_LAST) {
    *IOSByteArray_GetRef(nil_chk(bbuf), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
    *IOSByteArray_GetRef(bbuf, outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_u;
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS), (JreRShift32(ch, 12)) & (jint) 0xF);
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, (JreRShift32(ch, 8)) & (jint) 0xF);
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, (JreRShift32(ch, 4)) & (jint) 0xF);
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, ch & (jint) 0xF);
  }
  else {
    *IOSByteArray_GetRef(nil_chk(bbuf), outputPtr++) = (jbyte) ((jint) 0xe0 | (JreRShift32(ch, 12)));
    *IOSByteArray_GetRef(bbuf, outputPtr++) = (jbyte) ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
    *IOSByteArray_GetRef(bbuf, outputPtr++) = (jbyte) ((jint) 0x80 | (ch & (jint) 0x3f));
  }
  return outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeNull(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self) {
  if ((self->_outputTail_ + 4) >= self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(self);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_NULL_BYTES, 0, self->_outputBuffer_, self->_outputTail_, 4);
  self->_outputTail_ += 4;
}

jint ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__writeGenericEscapeWithInt_withInt_(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self, jint charToEscape, jint outputPtr) {
  IOSByteArray *bbuf = self->_outputBuffer_;
  *IOSByteArray_GetRef(nil_chk(bbuf), outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_BACKSLASH;
  *IOSByteArray_GetRef(bbuf, outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_u;
  if (charToEscape > (jint) 0xFF) {
    jint hi = (JreRShift32(charToEscape, 8)) & (jint) 0xFF;
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
    *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, hi & (jint) 0xF);
    charToEscape &= (jint) 0xFF;
  }
  else {
    *IOSByteArray_GetRef(bbuf, outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_0;
    *IOSByteArray_GetRef(bbuf, outputPtr++) = ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_BYTE_0;
  }
  *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS), JreRShift32(charToEscape, 4));
  *IOSByteArray_GetRef(bbuf, outputPtr++) = IOSByteArray_Get(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator_HEX_CHARS, charToEscape & (jint) 0xF);
  return outputPtr;
}

void ComFasterxmlJacksonCoreJsonUTF8JsonGenerator__flushBuffer(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator *self) {
  jint len = self->_outputTail_;
  if (len > 0) {
    self->_outputTail_ = 0;
    [((JavaIoOutputStream *) nil_chk(self->_outputStream_)) writeWithByteArray:self->_outputBuffer_ withInt:0 withInt:len];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonUTF8JsonGenerator)
