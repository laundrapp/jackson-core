//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeResolvedType")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTypeResolvedType
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeResolvedType 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeResolvedType 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTypeResolvedType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTypeResolvedType_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTypeResolvedType || defined(INCLUDE_ComFasterxmlJacksonCoreTypeResolvedType))
#define ComFasterxmlJacksonCoreTypeResolvedType_

@class IOSClass;

/*!
 @brief Type abstraction that represents Java type that has been resolved
  (i.e.has all generic information, if any, resolved to concrete
  types).
 Note that this is an intermediate type, and all concrete instances
  MUST be of type <code>JavaType</code> from "databind" bundle -- this
  abstraction is only needed so that types can be passed through 
 <code>com.fasterxml.jackson.core.JsonParser</code> methods.
 @since 2.0
 */
@interface ComFasterxmlJacksonCoreTypeResolvedType : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method for accessing definitions of contained ("child")
  types.
 @param index Index of contained type to return
 @return Contained type at index, or null if no such type
     exists (no exception thrown)
 */
- (ComFasterxmlJacksonCoreTypeResolvedType *)containedTypeWithInt:(jint)index;

/*!
 @brief Method for checking how many contained types this type
  has.Contained types are usually generic types, so that
  generic Maps have 2 contained types.
 */
- (jint)containedTypeCount;

/*!
 @brief Method for accessing name of type variable in indicated
  position.If no name is bound, will use placeholders (derived
  from 0-based index); if no type variable or argument exists
  with given index, null is returned.
 @param index Index of contained type to return
 @return Contained type at index, or null if no such type
     exists (no exception thrown)
 */
- (NSString *)containedTypeNameWithInt:(jint)index;

/*!
 @brief Method for accessing content type of this type, if type has
  such a thing: simple types do not, structured types do
  (like arrays, Collections and Maps)
 */
- (ComFasterxmlJacksonCoreTypeResolvedType *)getContentType;

/*!
 @brief Method for accessing key type for this type, assuming type
  has such a concept (only Map types do)
 */
- (ComFasterxmlJacksonCoreTypeResolvedType *)getKeyType;

/*!
 @brief Accessor that can be used to find out type for which parameterization
  is applied: this is often NOT same as what <code>getRawClass</code> returns,
  but rather one of it supertype.
 <p>
  For example: for type like <code>java.util.HashMap</code>, raw type is 
 <code>java.util.HashMap</code>; but this method would return 
 <code>java.util.Map</code>, because relevant type parameters that are
  resolved (and accessible using <code>containedType(int)</code> and 
 <code>getKeyType()</code>) are parameter for <code>java.util.Map</code>
  (which may or may not be same as type parameters for subtype;
  in case of <code>java.util.HashMap</code> they are, but for further
  subtypes they may be different parameters or possibly none at all).
 @since 2.5
 */
- (IOSClass *)getParameterSource;

/*!
 @brief Accessor for type-erased <code>Class</code> of resolved type.
 */
- (IOSClass *)getRawClass;

/*!
 @brief Method for accessing type of value that instances of this
  type references, if any.
 @return Referenced type, if any; null if not.
 @since 2.6
 */
- (ComFasterxmlJacksonCoreTypeResolvedType *)getReferencedType;

/*!
 @brief Method that can be used to find out if the type directly declares generic
  parameters (for its direct super-class and/or super-interfaces).
 */
- (jboolean)hasGenericTypes;

- (jboolean)hasRawClassWithIOSClass:(IOSClass *)clz;

- (jboolean)isAbstract;

- (jboolean)isArrayType;

- (jboolean)isCollectionLikeType;

- (jboolean)isConcrete;

- (jboolean)isContainerType;

- (jboolean)isEnumType;

- (jboolean)isFinal;

- (jboolean)isInterface;

- (jboolean)isMapLikeType;

- (jboolean)isPrimitive;

/*!
 @brief Whether this type is a referential type, meaning that values are
  basically pointers to "real" values (or null) and not regular
  values themselves.Typical examples include things like 
 <code>java.util.concurrent.atomic.AtomicReference</code>, and various 
 <code>Optional</code> types (in JDK8, Guava).
 @since 2.6
 */
- (jboolean)isReferenceType;

- (jboolean)isThrowable;

/*!
 @brief Method that can be used to serialize type into form from which
  it can be fully deserialized from at a later point (using 
 <code>TypeFactory</code> from mapper package).
 For simple types this is same as calling 
 <code>Class.getName</code>, but for structured types it may additionally
  contain type information about contents.
 */
- (NSString *)toCanonical;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTypeResolvedType)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeResolvedType_init(ComFasterxmlJacksonCoreTypeResolvedType *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTypeResolvedType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeResolvedType")
