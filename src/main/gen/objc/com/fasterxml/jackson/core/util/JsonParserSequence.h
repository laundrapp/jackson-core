//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilJsonParserSequence")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilJsonParserSequence
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilJsonParserSequence 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilJsonParserSequence 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilJsonParserSequence

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilJsonParserSequence_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilJsonParserSequence || defined(INCLUDE_ComFasterxmlJacksonCoreUtilJsonParserSequence))
#define ComFasterxmlJacksonCoreUtilJsonParserSequence_

#define RESTRICT_ComFasterxmlJacksonCoreUtilJsonParserDelegate 1
#define INCLUDE_ComFasterxmlJacksonCoreUtilJsonParserDelegate 1
#include "com/fasterxml/jackson/core/util/JsonParserDelegate.h"

@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonToken;
@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief Helper class that can be used to sequence multiple physical 
 <code>JsonParser</code>s to create a single logical sequence of
  tokens, as a single <code>JsonParser</code>.
 <p>
  Fairly simple use of <code>JsonParserDelegate</code>: only need
  to override <code>nextToken</code> to handle transition
 */
@interface ComFasterxmlJacksonCoreUtilJsonParserSequence : ComFasterxmlJacksonCoreUtilJsonParserDelegate {
 @public
  /*!
   @brief Parsers other than the first one (which is initially assigned
  as delegate)
   */
  IOSObjectArray *_parsers_;
  /*!
   @brief Configuration that determines whether state of parsers is first verified
  to see if parser already points to a token (that is, 
 <code>JsonParser.hasCurrentToken()</code> returns <code>true</code>), and if so
  that token is first return before <code>JsonParser.nextToken</code> is called.
   If enabled, this check is made; if disabled, no check is made and 
 <code>JsonParser.nextToken</code> is always called for all parsers.
 <p>
  Default setting is <code>false</code> (for backwards-compatibility)
  so that possible existing token is not considered for parsers.
   @since 2.8
   */
  jboolean _checkForExistingToken_;
  /*!
   @brief Index of the next parser in <code>_parsers</code>.
   */
  jint _nextParserIndex_;
  /*!
   @brief Flag used to indicate that `JsonParser.nextToken()` should not be called,
  due to parser already pointing to a token.
   @since 2.8
   */
  jboolean _hasToken_;
}

#pragma mark Public

- (void)close;

/*!
 @brief Method that is most useful for debugging or testing;
  returns actual number of underlying parsers sequence
  was constructed with (nor just ones remaining active)
 */
- (jint)containedParsersCount;

/*!
 @brief Method that will construct a parser (possibly a sequence) that
  contains all given sub-parsers.
 All parsers given are checked to see if they are sequences: and
  if so, they will be "flattened", that is, contained parsers are
  directly added in a new sequence instead of adding sequences
  within sequences. This is done to minimize delegation depth,
  ideally only having just a single level of delegation.
 */
+ (ComFasterxmlJacksonCoreUtilJsonParserSequence *)createFlattenedWithBoolean:(jboolean)checkForExistingToken
                                        withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)first
                                        withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)second;

/*!
 */
+ (ComFasterxmlJacksonCoreUtilJsonParserSequence *)createFlattenedWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)first
                                                                  withComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)second;

- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

/*!
 @brief Need to override, re-implement similar to how method defined in 
 <code>com.fasterxml.jackson.core.base.ParserMinimalBase</code>, to keep
  state correct here.
 */
- (ComFasterxmlJacksonCoreJsonParser *)skipChildren;

#pragma mark Protected

/*!
 @since 2.8
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)checkForExistingToken
withComFasterxmlJacksonCoreJsonParserArray:(IOSObjectArray *)parsers;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParserArray:(IOSObjectArray *)parsers;

- (void)addFlattenedActiveParsersWithJavaUtilList:(id<JavaUtilList>)listToAddIn;

- (ComFasterxmlJacksonCoreJsonToken *)switchAndReturnNext;

/*!
 @brief Method that will switch active delegate parser from the current one
  to the next parser in sequence, if there is another parser left:
  if so, the next parser will become the active delegate parser.
 @return True if switch succeeded; false otherwise
 @since 2.8
 */
- (jboolean)switchToNext;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonParser:(ComFasterxmlJacksonCoreJsonParser *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreUtilJsonParserSequence)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilJsonParserSequence, _parsers_, IOSObjectArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithComFasterxmlJacksonCoreJsonParserArray_(ComFasterxmlJacksonCoreUtilJsonParserSequence *self, IOSObjectArray *parsers);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *new_ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithComFasterxmlJacksonCoreJsonParserArray_(IOSObjectArray *parsers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *create_ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithComFasterxmlJacksonCoreJsonParserArray_(IOSObjectArray *parsers);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithBoolean_withComFasterxmlJacksonCoreJsonParserArray_(ComFasterxmlJacksonCoreUtilJsonParserSequence *self, jboolean checkForExistingToken, IOSObjectArray *parsers);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *new_ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithBoolean_withComFasterxmlJacksonCoreJsonParserArray_(jboolean checkForExistingToken, IOSObjectArray *parsers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *create_ComFasterxmlJacksonCoreUtilJsonParserSequence_initWithBoolean_withComFasterxmlJacksonCoreJsonParserArray_(jboolean checkForExistingToken, IOSObjectArray *parsers);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *ComFasterxmlJacksonCoreUtilJsonParserSequence_createFlattenedWithBoolean_withComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreJsonParser_(jboolean checkForExistingToken, ComFasterxmlJacksonCoreJsonParser *first, ComFasterxmlJacksonCoreJsonParser *second);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreUtilJsonParserSequence *ComFasterxmlJacksonCoreUtilJsonParserSequence_createFlattenedWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreJsonParser_(ComFasterxmlJacksonCoreJsonParser *first, ComFasterxmlJacksonCoreJsonParser *second);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilJsonParserSequence)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilJsonParserSequence")
