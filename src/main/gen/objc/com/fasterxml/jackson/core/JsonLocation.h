//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonLocation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonLocation")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonLocation
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonLocation 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonLocation 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonLocation

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonLocation_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonLocation || defined(INCLUDE_ComFasterxmlJacksonCoreJsonLocation))
#define ComFasterxmlJacksonCoreJsonLocation_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaLangStringBuilder;

/*!
 @brief Object that encapsulates Location information used for reporting
  parsing (or potentially generation) errors, as well as current location
  within input streams.
 */
@interface ComFasterxmlJacksonCoreJsonLocation : NSObject < JavaIoSerializable > {
 @public
  jlong _totalBytes_;
  jlong _totalChars_;
  jint _lineNr_;
  jint _columnNr_;
  /*!
   @brief Displayable description for input source: file path, URL.
   <p>
  NOTE: <code>transient</code> since 2.2 so that Location itself is Serializable.
   */
  id _sourceRef_;
}

#pragma mark Public

- (instancetype __nonnull)initWithId:(id)srcRef
                            withLong:(jlong)totalChars
                             withInt:(jint)lineNr
                             withInt:(jint)colNr;

- (instancetype __nonnull)initWithId:(id)sourceRef
                            withLong:(jlong)totalBytes
                            withLong:(jlong)totalChars
                             withInt:(jint)lineNr
                             withInt:(jint)columnNr;

- (jboolean)isEqual:(id)other;

/*!
 @return Byte offset within underlying stream, reader or writer,
    if available; -1 if not.
 */
- (jlong)getByteOffset;

/*!
 @return Character offset within underlying stream, reader or writer,
    if available; -1 if not.
 */
- (jlong)getCharOffset;

/*!
 @return Column number of the location (1-based)
 */
- (jint)getColumnNr;

/*!
 @return Line number of the location (1-based)
 */
- (jint)getLineNr;

/*!
 @brief Reference to the original resource being read, if one available.
 For example, when a parser has been constructed by passing a 
 <code>java.io.File</code> instance, this method would return
  that File. Will return null if no such reference is available,
  for example when <code>java.io.InputStream</code> was used to
  construct the parser instance.
 */
- (id)getSourceRef;

- (NSUInteger)hash;

/*!
 @brief Accessor for getting a textual description of source reference
  (Object returned by <code>getSourceRef()</code>), as included in
  description returned by <code>toString()</code>.
 <p>
  NOTE: not added as a "getter" to prevent it from getting serialized.
 @since 2.9
 */
- (NSString *)sourceDescription;

- (NSString *)description;

#pragma mark Protected

- (JavaLangStringBuilder *)_appendSourceDescWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonLocation)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonLocation, _sourceRef_, id)

/*!
 @brief Include at most first 500 characters/bytes from contents; should be enough
  to give context, but not cause unfortunate side effects in things like
  logs.
 @since 2.9
 */
inline jint ComFasterxmlJacksonCoreJsonLocation_get_MAX_CONTENT_SNIPPET(void);
#define ComFasterxmlJacksonCoreJsonLocation_MAX_CONTENT_SNIPPET 500
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonLocation, MAX_CONTENT_SNIPPET, jint)

/*!
 @brief Shared immutable "N/A location" that can be returned to indicate
  that no location information is available.
 <p>
  NOTE: before 2.9, Location was given as String "N/A"; with 2.9 it was
  removed so that source should be indicated as "UNKNOWN".
 */
inline ComFasterxmlJacksonCoreJsonLocation *ComFasterxmlJacksonCoreJsonLocation_get_NA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonLocation *ComFasterxmlJacksonCoreJsonLocation_NA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonLocation, NA, ComFasterxmlJacksonCoreJsonLocation *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withInt_withInt_(ComFasterxmlJacksonCoreJsonLocation *self, id srcRef, jlong totalChars, jint lineNr, jint colNr);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonLocation *new_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withInt_withInt_(id srcRef, jlong totalChars, jint lineNr, jint colNr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonLocation *create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withInt_withInt_(id srcRef, jlong totalChars, jint lineNr, jint colNr);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_(ComFasterxmlJacksonCoreJsonLocation *self, id sourceRef, jlong totalBytes, jlong totalChars, jint lineNr, jint columnNr);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonLocation *new_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_(id sourceRef, jlong totalBytes, jlong totalChars, jint lineNr, jint columnNr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonLocation *create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_(id sourceRef, jlong totalBytes, jlong totalChars, jint lineNr, jint columnNr);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonLocation)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonLocation")
