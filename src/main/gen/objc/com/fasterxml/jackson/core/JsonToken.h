//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonToken")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonToken
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonToken 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonToken 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonToken

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonToken_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonToken || defined(INCLUDE_ComFasterxmlJacksonCoreJsonToken))
#define ComFasterxmlJacksonCoreJsonToken_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSByteArray;
@class IOSCharArray;
@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreJsonToken_Enum) {
  ComFasterxmlJacksonCoreJsonToken_Enum_NOT_AVAILABLE = 0,
  ComFasterxmlJacksonCoreJsonToken_Enum_START_OBJECT = 1,
  ComFasterxmlJacksonCoreJsonToken_Enum_END_OBJECT = 2,
  ComFasterxmlJacksonCoreJsonToken_Enum_START_ARRAY = 3,
  ComFasterxmlJacksonCoreJsonToken_Enum_END_ARRAY = 4,
  ComFasterxmlJacksonCoreJsonToken_Enum_FIELD_NAME = 5,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_EMBEDDED_OBJECT = 6,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_STRING = 7,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_INT = 8,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NUMBER_FLOAT = 9,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_TRUE = 10,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_FALSE = 11,
  ComFasterxmlJacksonCoreJsonToken_Enum_VALUE_NULL = 12,
};

/*!
 @brief Enumeration for basic token types used for returning results
  of parsing JSON content.
 */
@interface ComFasterxmlJacksonCoreJsonToken : JavaLangEnum {
 @public
  NSString *_serialized_;
  IOSCharArray *_serializedChars_;
  IOSByteArray *_serializedBytes_;
  jint _id_;
  jboolean _isStructStart_;
  jboolean _isStructEnd_;
  jboolean _isNumber_;
  jboolean _isBoolean_;
  jboolean _isScalar_;
}

#pragma mark Public

- (IOSByteArray *)asByteArray;

- (IOSCharArray *)asCharArray;

- (NSString *)asString;

- (jint)id__;

- (jboolean)isBoolean;

- (jboolean)isNumeric;

/*!
 @brief Method that can be used to check whether this token represents
  a valid non-structured value.This means all tokens other than
  Object/Array start/end markers all field names.
 */
- (jboolean)isScalarValue;

/*!
 @brief Accessor that is functionally equivalent to: 
 <code>
     this == JsonToken.END_OBJECT || this == JsonToken.END_ARRAY 
 </code>
 @since 2.3
 */
- (jboolean)isStructEnd;

/*!
 @brief Accessor that is functionally equivalent to: 
 <code>
     this == JsonToken.START_OBJECT || this == JsonToken.START_ARRAY 
 </code>
 @since 2.3
 */
- (jboolean)isStructStart;

+ (ComFasterxmlJacksonCoreJsonToken *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonToken)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_values_[];

/*!
 @brief NOT_AVAILABLE can be returned if <code>JsonParser</code>
  implementation can not currently return the requested
  token (usually next one), or even if any will be
  available, but that may be able to determine this in
  future.This is the case with non-blocking parsers --
  they can not block to wait for more data to parse and
  must return something.
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_NOT_AVAILABLE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)

/*!
 @brief START_OBJECT is returned when encountering '{'
  which signals starting of an Object value.
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_START_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)

/*!
 @brief END_OBJECT is returned when encountering '}'
  which signals ending of an Object value
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_END_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, END_OBJECT)

/*!
 @brief START_ARRAY is returned when encountering '['
  which signals starting of an Array value
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_START_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)

/*!
 @brief END_ARRAY is returned when encountering ']'
  which signals ending of an Array value
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_END_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, END_ARRAY)

/*!
 @brief FIELD_NAME is returned when a String token is encountered
  as a field name (same lexical value, different function)
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_FIELD_NAME(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)

/*!
 @brief Placeholder token returned when the input source has a concept
  of embedded Object that are not accessible as usual structure
  (of starting with <code>START_OBJECT</code>, having values, ending with 
 <code>END_OBJECT</code>), but as "raw" objects.
 <p>
  Note: this token is never returned by regular JSON readers, but
  only by readers that expose other kinds of source (like 
 <code>JsonNode</code>-based JSON trees, Maps, Lists and such).
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_EMBEDDED_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_EMBEDDED_OBJECT)

/*!
 @brief VALUE_STRING is returned when a String token is encountered
  in value context (array element, field value, or root-level
  stand-alone value)
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_STRING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)

/*!
 @brief VALUE_NUMBER_INT is returned when an integer numeric token is
  encountered in value context: that is, a number that does
  not have floating point or exponent marker in it (consists
  only of an optional sign, followed by one or more digits;
  or, for binary formats, is indicated as integral number
  by internal representation).
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_NUMBER_INT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)

/*!
 @brief VALUE_NUMBER_FLOAT is returned when a numeric token other
  than integer is encountered: that is, a number that does
  have floating point or exponent marker in it, in addition
  to one or more digits (or, for non-textual formats,
  has internal floating-point representation).
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_NUMBER_FLOAT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)

/*!
 @brief VALUE_TRUE is returned when encountering literal "true" in
  value context
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_TRUE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)

/*!
 @brief VALUE_FALSE is returned when encountering literal "false" in
  value context
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_FALSE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)

/*!
 @brief VALUE_NULL is returned when encountering literal "null" in
  value context
 */
inline ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_get_VALUE_NULL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonToken, _serialized_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonToken, _serializedChars_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonToken, _serializedBytes_, IOSByteArray *)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreJsonToken_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonToken_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonToken)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonToken")
