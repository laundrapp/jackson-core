//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/Version.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreVersion")
#ifdef RESTRICT_ComFasterxmlJacksonCoreVersion
#define INCLUDE_ALL_ComFasterxmlJacksonCoreVersion 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreVersion 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreVersion

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreVersion_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreVersion || defined(INCLUDE_ComFasterxmlJacksonCoreVersion))
#define ComFasterxmlJacksonCoreVersion_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

/*!
 @brief Object that encapsulates versioning information of a component.
 Version information includes not just version number but also
  optionally group and artifact ids of the component being versioned.
 <p>
  Note that optional group and artifact id properties are new with Jackson 2.0:
  if provided, they should align with Maven artifact information.
 */
@interface ComFasterxmlJacksonCoreVersion : NSObject < JavaLangComparable, JavaIoSerializable > {
 @public
  jint _majorVersion_;
  jint _minorVersion_;
  jint _patchLevel_;
  NSString *_groupId_;
  NSString *_artifactId_;
  /*!
   @brief Additional information for snapshot versions; null for non-snapshot
  (release) versions.
   */
  NSString *_snapshotInfo_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)major
                              withInt:(jint)minor
                              withInt:(jint)patchLevel
                         withNSString:(NSString *)snapshotInfo
                         withNSString:(NSString *)groupId
                         withNSString:(NSString *)artifactId;

- (jint)compareToWithId:(ComFasterxmlJacksonCoreVersion *)other;

- (jboolean)isEqual:(id)o;

- (NSString *)getArtifactId;

- (NSString *)getGroupId;

- (jint)getMajorVersion;

- (jint)getMinorVersion;

- (jint)getPatchLevel;

- (NSUInteger)hash;

- (jboolean)isSnapshot;

- (jboolean)isUnknownVersion;

- (NSString *)toFullString;

- (NSString *)description;

/*!
 @brief Method returns canonical "not known" version, which is used as version
  in cases where actual version information is not known (instead of null).
 */
+ (ComFasterxmlJacksonCoreVersion *)unknownVersion;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreVersion)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreVersion, _groupId_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreVersion, _artifactId_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreVersion, _snapshotInfo_, NSString *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreVersion_initWithInt_withInt_withInt_withNSString_withNSString_withNSString_(ComFasterxmlJacksonCoreVersion *self, jint major, jint minor, jint patchLevel, NSString *snapshotInfo, NSString *groupId, NSString *artifactId);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *new_ComFasterxmlJacksonCoreVersion_initWithInt_withInt_withInt_withNSString_withNSString_withNSString_(jint major, jint minor, jint patchLevel, NSString *snapshotInfo, NSString *groupId, NSString *artifactId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *create_ComFasterxmlJacksonCoreVersion_initWithInt_withInt_withInt_withNSString_withNSString_withNSString_(jint major, jint minor, jint patchLevel, NSString *snapshotInfo, NSString *groupId, NSString *artifactId);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreVersion *ComFasterxmlJacksonCoreVersion_unknownVersion(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreVersion)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreVersion")
