//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/io/NumberInput.h"
#include "com/fasterxml/jackson/core/util/BufferRecycler.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/io/Writer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"

@interface ComFasterxmlJacksonCoreUtilTextBuffer () {
 @public
  ComFasterxmlJacksonCoreUtilBufferRecycler *_allocator_;
  /*!
   @brief Shared input buffer; stored here in case some input can be returned
  as is, without being copied to collector's own buffers.Note that
  this is read-only for this Object.
   */
  IOSCharArray *_inputBuffer_;
  /*!
   @brief Character offset of first char in input buffer; -1 to indicate
  that input buffer currently does not contain any useful char data
   */
  jint _inputStart_;
  jint _inputLen_;
  /*!
   @brief List of segments prior to currently active segment.
   */
  JavaUtilArrayList *_segments_;
  /*!
   @brief Flag that indicates whether _seqments is non-empty
   */
  jboolean _hasSegments_;
  /*!
   @brief Amount of characters in segments in <code>_segments</code>
   */
  jint _segmentSize_;
  IOSCharArray *_currentSegment_;
  /*!
   @brief Number of characters in currently active (last) segment
   */
  jint _currentSize_;
  /*!
   @brief String that will be constructed when the whole contents are
  needed; will be temporarily stored in case asked for again.
   */
  NSString *_resultString_;
  IOSCharArray *_resultArray_;
}

/*!
 @brief Helper method used to find a buffer to use, ideally one
  recycled earlier.
 */
- (IOSCharArray *)bufWithInt:(jint)needed;

- (void)clearSegments;

/*!
 @brief Method called if/when we need to append content when we have been
  initialized to use shared buffer.
 */
- (void)unshareWithInt:(jint)needExtra;

/*!
 @brief Method called when current segment is full, to allocate new
  segment.
 */
- (void)expandWithInt:(jint)minNewSegmentSize;

- (IOSCharArray *)resultArray;

- (IOSCharArray *)carrWithInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _allocator_, ComFasterxmlJacksonCoreUtilBufferRecycler *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _inputBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _segments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _currentSegment_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _resultString_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreUtilTextBuffer, _resultArray_, IOSCharArray *)

__attribute__((unused)) static IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint needed);

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(ComFasterxmlJacksonCoreUtilTextBuffer *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint needExtra);

__attribute__((unused)) static void ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint minNewSegmentSize);

__attribute__((unused)) static IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_resultArray(ComFasterxmlJacksonCoreUtilTextBuffer *self);

__attribute__((unused)) static IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint len);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreUtilTextBuffer)

IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS;

@implementation ComFasterxmlJacksonCoreUtilTextBuffer

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreUtilBufferRecycler:(ComFasterxmlJacksonCoreUtilBufferRecycler *)allocator {
  ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(self, allocator);
  return self;
}

- (void)releaseBuffers {
  if (_allocator_ == nil) {
    [self resetWithEmpty];
  }
  else {
    if (_currentSegment_ != nil) {
      [self resetWithEmpty];
      IOSCharArray *buf = _currentSegment_;
      JreStrongAssign(&_currentSegment_, nil);
      [_allocator_ releaseCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_TEXT_BUFFER withCharArray:buf];
    }
  }
}

- (void)resetWithEmpty {
  _inputStart_ = -1;
  _currentSize_ = 0;
  _inputLen_ = 0;
  JreStrongAssign(&_inputBuffer_, nil);
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
}

- (void)resetWithWithChar:(jchar)ch {
  _inputStart_ = -1;
  _inputLen_ = 0;
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
  else if (_currentSegment_ == nil) {
    JreStrongAssign(&_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, 1));
  }
  *IOSCharArray_GetRef(nil_chk(_currentSegment_), 0) = ch;
  _currentSize_ = _segmentSize_ = 1;
}

- (void)resetWithSharedWithCharArray:(IOSCharArray *)buf
                             withInt:(jint)start
                             withInt:(jint)len {
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  JreStrongAssign(&_inputBuffer_, buf);
  _inputStart_ = start;
  _inputLen_ = len;
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
}

- (void)resetWithCopyWithCharArray:(IOSCharArray *)buf
                           withInt:(jint)start
                           withInt:(jint)len {
  JreStrongAssign(&_inputBuffer_, nil);
  _inputStart_ = -1;
  _inputLen_ = 0;
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
  else if (_currentSegment_ == nil) {
    JreStrongAssign(&_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, len));
  }
  _currentSize_ = _segmentSize_ = 0;
  [self appendWithCharArray:buf withInt:start withInt:len];
}

- (void)resetWithCopyWithNSString:(NSString *)text
                          withInt:(jint)start
                          withInt:(jint)len {
  JreStrongAssign(&_inputBuffer_, nil);
  _inputStart_ = -1;
  _inputLen_ = 0;
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
  else if (_currentSegment_ == nil) {
    JreStrongAssign(&_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, len));
  }
  _currentSize_ = _segmentSize_ = 0;
  [self appendWithNSString:text withInt:start withInt:len];
}

- (void)resetWithStringWithNSString:(NSString *)value {
  JreStrongAssign(&_inputBuffer_, nil);
  _inputStart_ = -1;
  _inputLen_ = 0;
  JreStrongAssign(&_resultString_, value);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
  _currentSize_ = 0;
}

- (IOSCharArray *)getBufferWithoutReset {
  return _currentSegment_;
}

- (IOSCharArray *)bufWithInt:(jint)needed {
  return ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, needed);
}

- (void)clearSegments {
  ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
}

- (jint)size {
  if (_inputStart_ >= 0) {
    return _inputLen_;
  }
  if (_resultArray_ != nil) {
    return _resultArray_->size_;
  }
  if (_resultString_ != nil) {
    return [_resultString_ java_length];
  }
  return _segmentSize_ + _currentSize_;
}

- (jint)getTextOffset {
  return (_inputStart_ >= 0) ? _inputStart_ : 0;
}

- (jboolean)hasTextAsCharacters {
  if (_inputStart_ >= 0 || _resultArray_ != nil) return true;
  if (_resultString_ != nil) return false;
  return true;
}

- (IOSCharArray *)getTextBuffer {
  if (_inputStart_ >= 0) return _inputBuffer_;
  if (_resultArray_ != nil) return _resultArray_;
  if (_resultString_ != nil) {
    return (JreStrongAssign(&_resultArray_, [_resultString_ java_toCharArray]));
  }
  if (!_hasSegments_) {
    return (_currentSegment_ == nil) ? ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS : _currentSegment_;
  }
  return [self contentsAsArray];
}

- (NSString *)contentsAsString {
  if (_resultString_ == nil) {
    if (_resultArray_ != nil) {
      JreStrongAssign(&_resultString_, [NSString java_stringWithCharacters:_resultArray_]);
    }
    else {
      if (_inputStart_ >= 0) {
        if (_inputLen_ < 1) {
          return (JreStrongAssign(&_resultString_, @""));
        }
        JreStrongAssign(&_resultString_, [NSString java_stringWithCharacters:_inputBuffer_ offset:_inputStart_ length:_inputLen_]);
      }
      else {
        jint segLen = _segmentSize_;
        jint currLen = _currentSize_;
        if (segLen == 0) {
          JreStrongAssign(&_resultString_, (currLen == 0) ? @"" : [NSString java_stringWithCharacters:_currentSegment_ offset:0 length:currLen]);
        }
        else {
          JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(segLen + currLen);
          if (_segments_ != nil) {
            for (jint i = 0, len = [_segments_ size]; i < len; ++i) {
              IOSCharArray *curr = [((JavaUtilArrayList *) nil_chk(_segments_)) getWithInt:i];
              [sb appendWithCharArray:curr withInt:0 withInt:((IOSCharArray *) nil_chk(curr))->size_];
            }
          }
          [sb appendWithCharArray:_currentSegment_ withInt:0 withInt:_currentSize_];
          JreStrongAssign(&_resultString_, [sb description]);
        }
      }
    }
  }
  return _resultString_;
}

- (IOSCharArray *)contentsAsArray {
  IOSCharArray *result = _resultArray_;
  if (result == nil) {
    JreStrongAssign(&_resultArray_, result = ComFasterxmlJacksonCoreUtilTextBuffer_resultArray(self));
  }
  return result;
}

- (JavaMathBigDecimal *)contentsAsDecimal {
  if (_resultArray_ != nil) {
    return ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_(_resultArray_);
  }
  if ((_inputStart_ >= 0) && (_inputBuffer_ != nil)) {
    return ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_withInt_withInt_(_inputBuffer_, _inputStart_, _inputLen_);
  }
  if ((_segmentSize_ == 0) && (_currentSegment_ != nil)) {
    return ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_withInt_withInt_(_currentSegment_, 0, _currentSize_);
  }
  return ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_([self contentsAsArray]);
}

- (jdouble)contentsAsDouble {
  return ComFasterxmlJacksonCoreIoNumberInput_parseDoubleWithNSString_([self contentsAsString]);
}

- (jint)contentsAsIntWithBoolean:(jboolean)neg {
  if ((_inputStart_ >= 0) && (_inputBuffer_ != nil)) {
    if (neg) {
      return -ComFasterxmlJacksonCoreIoNumberInput_parseIntWithCharArray_withInt_withInt_(_inputBuffer_, _inputStart_ + 1, _inputLen_ - 1);
    }
    return ComFasterxmlJacksonCoreIoNumberInput_parseIntWithCharArray_withInt_withInt_(_inputBuffer_, _inputStart_, _inputLen_);
  }
  if (neg) {
    return -ComFasterxmlJacksonCoreIoNumberInput_parseIntWithCharArray_withInt_withInt_(_currentSegment_, 1, _currentSize_ - 1);
  }
  return ComFasterxmlJacksonCoreIoNumberInput_parseIntWithCharArray_withInt_withInt_(_currentSegment_, 0, _currentSize_);
}

- (jlong)contentsAsLongWithBoolean:(jboolean)neg {
  if ((_inputStart_ >= 0) && (_inputBuffer_ != nil)) {
    if (neg) {
      return -ComFasterxmlJacksonCoreIoNumberInput_parseLongWithCharArray_withInt_withInt_(_inputBuffer_, _inputStart_ + 1, _inputLen_ - 1);
    }
    return ComFasterxmlJacksonCoreIoNumberInput_parseLongWithCharArray_withInt_withInt_(_inputBuffer_, _inputStart_, _inputLen_);
  }
  if (neg) {
    return -ComFasterxmlJacksonCoreIoNumberInput_parseLongWithCharArray_withInt_withInt_(_currentSegment_, 1, _currentSize_ - 1);
  }
  return ComFasterxmlJacksonCoreIoNumberInput_parseLongWithCharArray_withInt_withInt_(_currentSegment_, 0, _currentSize_);
}

- (jint)contentsToWriterWithJavaIoWriter:(JavaIoWriter *)w {
  if (_resultArray_ != nil) {
    [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:_resultArray_];
    return ((IOSCharArray *) nil_chk(_resultArray_))->size_;
  }
  if (_resultString_ != nil) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:_resultString_];
    return [((NSString *) nil_chk(_resultString_)) java_length];
  }
  if (_inputStart_ >= 0) {
    jint len = _inputLen_;
    if (len > 0) {
      [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:_inputBuffer_ withInt:_inputStart_ withInt:len];
    }
    return len;
  }
  jint total = 0;
  if (_segments_ != nil) {
    for (jint i = 0, end = [_segments_ size]; i < end; ++i) {
      IOSCharArray *curr = [((JavaUtilArrayList *) nil_chk(_segments_)) getWithInt:i];
      jint currLen = ((IOSCharArray *) nil_chk(curr))->size_;
      [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:curr withInt:0 withInt:currLen];
      total += currLen;
    }
  }
  jint len = _currentSize_;
  if (len > 0) {
    [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:_currentSegment_ withInt:0 withInt:len];
    total += len;
  }
  return total;
}

- (void)ensureNotShared {
  if (_inputStart_ >= 0) {
    ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, 16);
  }
}

- (void)appendWithChar:(jchar)c {
  if (_inputStart_ >= 0) {
    ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, 16);
  }
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  IOSCharArray *curr = _currentSegment_;
  if (_currentSize_ >= ((IOSCharArray *) nil_chk(curr))->size_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(self, 1);
    curr = _currentSegment_;
  }
  *IOSCharArray_GetRef(nil_chk(curr), _currentSize_++) = c;
}

- (void)appendWithCharArray:(IOSCharArray *)c
                    withInt:(jint)start
                    withInt:(jint)len {
  if (_inputStart_ >= 0) {
    ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, len);
  }
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  IOSCharArray *curr = _currentSegment_;
  jint max = ((IOSCharArray *) nil_chk(curr))->size_ - _currentSize_;
  if (max >= len) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, start, curr, _currentSize_, len);
    _currentSize_ += len;
    return;
  }
  if (max > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, start, curr, _currentSize_, max);
    start += max;
    len -= max;
  }
  do {
    ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(self, len);
    jint amount = JavaLangMath_minWithInt_withInt_(((IOSCharArray *) nil_chk(_currentSegment_))->size_, len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, start, _currentSegment_, 0, amount);
    _currentSize_ += amount;
    start += amount;
    len -= amount;
  }
  while (len > 0);
}

- (void)appendWithNSString:(NSString *)str
                   withInt:(jint)offset
                   withInt:(jint)len {
  if (_inputStart_ >= 0) {
    ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, len);
  }
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  IOSCharArray *curr = _currentSegment_;
  jint max = ((IOSCharArray *) nil_chk(curr))->size_ - _currentSize_;
  if (max >= len) {
    [((NSString *) nil_chk(str)) java_getChars:offset sourceEnd:offset + len destination:curr destinationBegin:_currentSize_];
    _currentSize_ += len;
    return;
  }
  if (max > 0) {
    [((NSString *) nil_chk(str)) java_getChars:offset sourceEnd:offset + max destination:curr destinationBegin:_currentSize_];
    len -= max;
    offset += max;
  }
  do {
    ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(self, len);
    jint amount = JavaLangMath_minWithInt_withInt_(((IOSCharArray *) nil_chk(_currentSegment_))->size_, len);
    [((NSString *) nil_chk(str)) java_getChars:offset sourceEnd:offset + amount destination:_currentSegment_ destinationBegin:0];
    _currentSize_ += amount;
    offset += amount;
    len -= amount;
  }
  while (len > 0);
}

- (IOSCharArray *)getCurrentSegment {
  if (_inputStart_ >= 0) {
    ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, 1);
  }
  else {
    IOSCharArray *curr = _currentSegment_;
    if (curr == nil) {
      JreStrongAssign(&_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, 0));
    }
    else if (_currentSize_ >= curr->size_) {
      ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(self, 1);
    }
  }
  return _currentSegment_;
}

- (IOSCharArray *)emptyAndGetCurrentSegment {
  _inputStart_ = -1;
  _currentSize_ = 0;
  _inputLen_ = 0;
  JreStrongAssign(&_inputBuffer_, nil);
  JreStrongAssign(&_resultString_, nil);
  JreStrongAssign(&_resultArray_, nil);
  if (_hasSegments_) {
    ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(self);
  }
  IOSCharArray *curr = _currentSegment_;
  if (curr == nil) {
    JreStrongAssign(&_currentSegment_, curr = ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, 0));
  }
  return curr;
}

- (jint)getCurrentSegmentSize {
  return _currentSize_;
}

- (void)setCurrentLengthWithInt:(jint)len {
  _currentSize_ = len;
}

- (NSString *)setCurrentAndReturnWithInt:(jint)len {
  _currentSize_ = len;
  if (_segmentSize_ > 0) {
    return [self contentsAsString];
  }
  jint currLen = _currentSize_;
  NSString *str = (currLen == 0) ? @"" : [NSString java_stringWithCharacters:_currentSegment_ offset:0 length:currLen];
  JreStrongAssign(&_resultString_, str);
  return str;
}

- (IOSCharArray *)finishCurrentSegment {
  if (_segments_ == nil) {
    JreStrongAssignAndConsume(&_segments_, new_JavaUtilArrayList_init());
  }
  _hasSegments_ = true;
  [_segments_ addWithId:_currentSegment_];
  jint oldLen = ((IOSCharArray *) nil_chk(_currentSegment_))->size_;
  _segmentSize_ += oldLen;
  _currentSize_ = 0;
  jint newLen = oldLen + (JreRShift32(oldLen, 1));
  if (newLen < ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN) {
    newLen = ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN;
  }
  else if (newLen > ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN) {
    newLen = ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN;
  }
  IOSCharArray *curr = ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(self, newLen);
  JreStrongAssign(&_currentSegment_, curr);
  return curr;
}

- (IOSCharArray *)expandCurrentSegment {
  IOSCharArray *curr = _currentSegment_;
  jint len = ((IOSCharArray *) nil_chk(curr))->size_;
  jint newLen = len + (JreRShift32(len, 1));
  if (newLen > ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN) {
    newLen = len + (JreRShift32(len, 2));
  }
  return (JreStrongAssign(&_currentSegment_, JavaUtilArrays_copyOfWithCharArray_withInt_(curr, newLen)));
}

- (IOSCharArray *)expandCurrentSegmentWithInt:(jint)minSize {
  IOSCharArray *curr = _currentSegment_;
  if (((IOSCharArray *) nil_chk(curr))->size_ >= minSize) return curr;
  JreStrongAssign(&_currentSegment_, curr = JavaUtilArrays_copyOfWithCharArray_withInt_(curr, minSize));
  return curr;
}

- (NSString *)description {
  return [self contentsAsString];
}

- (void)unshareWithInt:(jint)needExtra {
  ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(self, needExtra);
}

- (void)expandWithInt:(jint)minNewSegmentSize {
  ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(self, minNewSegmentSize);
}

- (IOSCharArray *)resultArray {
  return ComFasterxmlJacksonCoreUtilTextBuffer_resultArray(self);
}

- (IOSCharArray *)carrWithInt:(jint)len {
  return ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(self, len);
}

- (void)dealloc {
  RELEASE_(_allocator_);
  RELEASE_(_inputBuffer_);
  RELEASE_(_segments_);
  RELEASE_(_currentSegment_);
  RELEASE_(_resultString_);
  RELEASE_(_resultArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 6, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 10, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 21, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 10, -1, -1, -1, -1 },
    { NULL, "[C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x2, 25, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreUtilBufferRecycler:);
  methods[1].selector = @selector(releaseBuffers);
  methods[2].selector = @selector(resetWithEmpty);
  methods[3].selector = @selector(resetWithWithChar:);
  methods[4].selector = @selector(resetWithSharedWithCharArray:withInt:withInt:);
  methods[5].selector = @selector(resetWithCopyWithCharArray:withInt:withInt:);
  methods[6].selector = @selector(resetWithCopyWithNSString:withInt:withInt:);
  methods[7].selector = @selector(resetWithStringWithNSString:);
  methods[8].selector = @selector(getBufferWithoutReset);
  methods[9].selector = @selector(bufWithInt:);
  methods[10].selector = @selector(clearSegments);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(getTextOffset);
  methods[13].selector = @selector(hasTextAsCharacters);
  methods[14].selector = @selector(getTextBuffer);
  methods[15].selector = @selector(contentsAsString);
  methods[16].selector = @selector(contentsAsArray);
  methods[17].selector = @selector(contentsAsDecimal);
  methods[18].selector = @selector(contentsAsDouble);
  methods[19].selector = @selector(contentsAsIntWithBoolean:);
  methods[20].selector = @selector(contentsAsLongWithBoolean:);
  methods[21].selector = @selector(contentsToWriterWithJavaIoWriter:);
  methods[22].selector = @selector(ensureNotShared);
  methods[23].selector = @selector(appendWithChar:);
  methods[24].selector = @selector(appendWithCharArray:withInt:withInt:);
  methods[25].selector = @selector(appendWithNSString:withInt:withInt:);
  methods[26].selector = @selector(getCurrentSegment);
  methods[27].selector = @selector(emptyAndGetCurrentSegment);
  methods[28].selector = @selector(getCurrentSegmentSize);
  methods[29].selector = @selector(setCurrentLengthWithInt:);
  methods[30].selector = @selector(setCurrentAndReturnWithInt:);
  methods[31].selector = @selector(finishCurrentSegment);
  methods[32].selector = @selector(expandCurrentSegment);
  methods[33].selector = @selector(expandCurrentSegmentWithInt:);
  methods[34].selector = @selector(description);
  methods[35].selector = @selector(unshareWithInt:);
  methods[36].selector = @selector(expandWithInt:);
  methods[37].selector = @selector(resultArray);
  methods[38].selector = @selector(carrWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_CHARS", "[C", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "MIN_SEGMENT_LEN", "I", .constantValue.asInt = ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN, 0x18, -1, -1, -1, -1 },
    { "MAX_SEGMENT_LEN", "I", .constantValue.asInt = ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN, 0x18, -1, -1, -1, -1 },
    { "_allocator_", "LComFasterxmlJacksonCoreUtilBufferRecycler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inputBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inputStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inputLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_segments_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
    { "_hasSegments_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_segmentSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentSegment_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_resultString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_resultArray_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreUtilBufferRecycler;", "resetWith", "C", "resetWithShared", "[CII", "resetWithCopy", "LNSString;II", "resetWithString", "LNSString;", "buf", "I", "LJavaLangNumberFormatException;", "contentsAsInt", "Z", "contentsAsLong", "contentsToWriter", "LJavaIoWriter;", "LJavaIoIOException;", "append", "setCurrentLength", "setCurrentAndReturn", "expandCurrentSegment", "toString", "unshare", "expand", "carr", &ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS, "Ljava/util/ArrayList<[C>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilTextBuffer = { "TextBuffer", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x11, 39, 14, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreUtilTextBuffer;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreUtilTextBuffer class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS, [IOSCharArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreUtilTextBuffer)
  }
}

@end

void ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilTextBuffer *self, ComFasterxmlJacksonCoreUtilBufferRecycler *allocator) {
  NSObject_init(self);
  JreStrongAssign(&self->_allocator_, allocator);
}

ComFasterxmlJacksonCoreUtilTextBuffer *new_ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *allocator) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilTextBuffer, initWithComFasterxmlJacksonCoreUtilBufferRecycler_, allocator)
}

ComFasterxmlJacksonCoreUtilTextBuffer *create_ComFasterxmlJacksonCoreUtilTextBuffer_initWithComFasterxmlJacksonCoreUtilBufferRecycler_(ComFasterxmlJacksonCoreUtilBufferRecycler *allocator) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilTextBuffer, initWithComFasterxmlJacksonCoreUtilBufferRecycler_, allocator)
}

IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint needed) {
  if (self->_allocator_ != nil) {
    return [self->_allocator_ allocCharBufferWithInt:ComFasterxmlJacksonCoreUtilBufferRecycler_CHAR_TEXT_BUFFER withInt:needed];
  }
  return [IOSCharArray arrayWithLength:JavaLangMath_maxWithInt_withInt_(needed, ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN)];
}

void ComFasterxmlJacksonCoreUtilTextBuffer_clearSegments(ComFasterxmlJacksonCoreUtilTextBuffer *self) {
  self->_hasSegments_ = false;
  [((JavaUtilArrayList *) nil_chk(self->_segments_)) clear];
  self->_currentSize_ = self->_segmentSize_ = 0;
}

void ComFasterxmlJacksonCoreUtilTextBuffer_unshareWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint needExtra) {
  jint sharedLen = self->_inputLen_;
  self->_inputLen_ = 0;
  IOSCharArray *inputBuf = self->_inputBuffer_;
  JreStrongAssign(&self->_inputBuffer_, nil);
  jint start = self->_inputStart_;
  self->_inputStart_ = -1;
  jint needed = sharedLen + needExtra;
  if (self->_currentSegment_ == nil || needed > self->_currentSegment_->size_) {
    JreStrongAssign(&self->_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_bufWithInt_(self, needed));
  }
  if (sharedLen > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputBuf, start, self->_currentSegment_, 0, sharedLen);
  }
  self->_segmentSize_ = 0;
  self->_currentSize_ = sharedLen;
}

void ComFasterxmlJacksonCoreUtilTextBuffer_expandWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint minNewSegmentSize) {
  if (self->_segments_ == nil) {
    JreStrongAssignAndConsume(&self->_segments_, new_JavaUtilArrayList_init());
  }
  IOSCharArray *curr = self->_currentSegment_;
  self->_hasSegments_ = true;
  [self->_segments_ addWithId:curr];
  self->_segmentSize_ += ((IOSCharArray *) nil_chk(curr))->size_;
  self->_currentSize_ = 0;
  jint oldLen = curr->size_;
  jint newLen = oldLen + (JreRShift32(oldLen, 1));
  if (newLen < ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN) {
    newLen = ComFasterxmlJacksonCoreUtilTextBuffer_MIN_SEGMENT_LEN;
  }
  else if (newLen > ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN) {
    newLen = ComFasterxmlJacksonCoreUtilTextBuffer_MAX_SEGMENT_LEN;
  }
  JreStrongAssign(&self->_currentSegment_, ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(self, newLen));
}

IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_resultArray(ComFasterxmlJacksonCoreUtilTextBuffer *self) {
  if (self->_resultString_ != nil) {
    return [self->_resultString_ java_toCharArray];
  }
  if (self->_inputStart_ >= 0) {
    jint len = self->_inputLen_;
    if (len < 1) {
      return ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS;
    }
    jint start = self->_inputStart_;
    if (start == 0) {
      return JavaUtilArrays_copyOfWithCharArray_withInt_(self->_inputBuffer_, len);
    }
    return JavaUtilArrays_copyOfRangeWithCharArray_withInt_withInt_(self->_inputBuffer_, start, start + len);
  }
  jint size = [self size];
  if (size < 1) {
    return ComFasterxmlJacksonCoreUtilTextBuffer_NO_CHARS;
  }
  jint offset = 0;
  IOSCharArray *result = ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(self, size);
  if (self->_segments_ != nil) {
    for (jint i = 0, len = [self->_segments_ size]; i < len; ++i) {
      IOSCharArray *curr = [((JavaUtilArrayList *) nil_chk(self->_segments_)) getWithInt:i];
      jint currLen = ((IOSCharArray *) nil_chk(curr))->size_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(curr, 0, result, offset, currLen);
      offset += currLen;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_currentSegment_, 0, result, offset, self->_currentSize_);
  return result;
}

IOSCharArray *ComFasterxmlJacksonCoreUtilTextBuffer_carrWithInt_(ComFasterxmlJacksonCoreUtilTextBuffer *self, jint len) {
  return [IOSCharArray arrayWithLength:len];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilTextBuffer)
