//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/BinaryNameMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymBinaryNameMatcher")
#ifdef RESTRICT_ComFasterxmlJacksonCoreSymBinaryNameMatcher
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymBinaryNameMatcher 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymBinaryNameMatcher 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreSymBinaryNameMatcher

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreSymBinaryNameMatcher_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreSymBinaryNameMatcher || defined(INCLUDE_ComFasterxmlJacksonCoreSymBinaryNameMatcher))
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_

#define RESTRICT_ComFasterxmlJacksonCoreSymHashedMatcherBase 1
#define INCLUDE_ComFasterxmlJacksonCoreSymHashedMatcherBase 1
#include "com/fasterxml/jackson/core/sym/HashedMatcherBase.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreSymFieldNameMatcher;
@class IOSIntArray;
@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief Simplified static symbol table used instead of global quad-based canonicalizer
  when we have smaller set of symbols (like properties of a POJO class).
 @since 3.0
 */
@interface ComFasterxmlJacksonCoreSymBinaryNameMatcher : ComFasterxmlJacksonCoreSymHashedMatcherBase < JavaIoSerializable >

#pragma mark Public

+ (IOSIntArray *)_quadsWithNSString:(NSString *)name;

- (jint)addNameWithNSString:(NSString *)name;

- (jint)bucketCount;

- (jint)calcHashWithInt:(jint)q1;

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2;

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2
                withInt:(jint)q3;

- (jint)calcHashWithIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen;

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructWithJavaUtilList:(id<JavaUtilList>)symbols;

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)fields
                                                                              withBoolean:(jboolean)alreadyInterned;

+ (ComFasterxmlJacksonCoreSymBinaryNameMatcher *)constructFromWithJavaUtilList:(id<JavaUtilList>)fields
                                                                   withBoolean:(jboolean)alreadyInterned;

- (jint)matchByQuadWithInt:(jint)q1;

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2;

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2
                   withInt:(jint)q3;

- (jint)matchByQuadWithIntArray:(IOSIntArray *)q
                        withInt:(jint)qlen;

- (jint)primaryQuadCount;

- (jint)secondaryQuadCount;

- (jint)size;

- (jint)spilloverQuadCount;

- (jint)tertiaryQuadCount;

- (NSString *)description;

- (jint)totalCount;

#pragma mark Package-Private

+ (jint)_calcTertiaryShiftWithInt:(jint)primarySlots;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymHashedMatcherBase:(ComFasterxmlJacksonCoreSymHashedMatcherBase *)arg0
                               withComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymHashedMatcherBase:(ComFasterxmlJacksonCoreSymHashedMatcherBase *)arg0
                                                            withNSStringArray:(IOSObjectArray *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)arg0
                                   withIntArray:(IOSIntArray *)arg1
                                        withInt:(jint)arg2
 withComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)arg3
                              withNSStringArray:(IOSObjectArray *)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymBinaryNameMatcher)

inline jint ComFasterxmlJacksonCoreSymBinaryNameMatcher_get_MAX_ENTRIES(void);
#define ComFasterxmlJacksonCoreSymBinaryNameMatcher_MAX_ENTRIES 32767
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymBinaryNameMatcher, MAX_ENTRIES, jint)

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreSymBinaryNameMatcher__calcTertiaryShiftWithInt_(jint primarySlots);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructFromWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructWithJavaUtilList_(id<JavaUtilList> symbols);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymBinaryNameMatcher *ComFasterxmlJacksonCoreSymBinaryNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned);

FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreSymBinaryNameMatcher__quadsWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymBinaryNameMatcher)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymBinaryNameMatcher")
