//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonParseException.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/JsonTokenId.h"
#include "com/fasterxml/jackson/core/ObjectReadContext.h"
#include "com/fasterxml/jackson/core/SerializableString.h"
#include "com/fasterxml/jackson/core/TokenStreamContext.h"
#include "com/fasterxml/jackson/core/TreeNode.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/JsonEOFException.h"
#include "com/fasterxml/jackson/core/io/NumberInput.h"
#include "com/fasterxml/jackson/core/sym/FieldNameMatcher.h"
#include "com/fasterxml/jackson/core/type/ResolvedType.h"
#include "com/fasterxml/jackson/core/type/TypeReference.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/core/util/VersionUtil.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

__attribute__((unused)) static void ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg);

__attribute__((unused)) static void ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_withId_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg, id arg);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonParseException *ComFasterxmlJacksonCoreBaseParserMinimalBase__constructErrorWithNSString_withJavaLangThrowable_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg, JavaLangThrowable *t);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreBaseParserMinimalBase)

IOSByteArray *ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_BYTES;
IOSIntArray *ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_INTS;
JavaMathBigInteger *ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_INT;
JavaMathBigInteger *ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_INT;
JavaMathBigInteger *ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_LONG;
JavaMathBigInteger *ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_LONG;
JavaMathBigDecimal *ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_LONG;
JavaMathBigDecimal *ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_LONG;
JavaMathBigDecimal *ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_INT;
JavaMathBigDecimal *ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_INT;

@implementation ComFasterxmlJacksonCoreBaseParserMinimalBase

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithComFasterxmlJacksonCoreObjectReadContext_(self, readCtxt);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                   withInt:(jint)features {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithComFasterxmlJacksonCoreObjectReadContext_withInt_(self, readCtxt, features);
  return self;
}

- (id<ComFasterxmlJacksonCoreObjectReadContext>)getObjectReadContext {
  return _objectReadContext_;
}

- (void)close {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isClosed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonCoreTokenStreamContext *)getParsingContext {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)_handleEOF {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)currentName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComFasterxmlJacksonCoreJsonToken *)nextToken {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)finishToken {
  ;
}

- (ComFasterxmlJacksonCoreJsonToken *)currentToken {
  return _currToken_;
}

- (jint)currentTokenId {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  return (t == nil) ? ComFasterxmlJacksonCoreJsonTokenId_ID_NO_TOKEN : [((ComFasterxmlJacksonCoreJsonToken *) nil_chk(t)) id__];
}

- (jboolean)hasCurrentToken {
  return _currToken_ != nil;
}

- (jboolean)hasTokenIdWithInt:(jint)id_ {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t == nil) {
    return ComFasterxmlJacksonCoreJsonTokenId_ID_NO_TOKEN == id_;
  }
  return [t id__] == id_;
}

- (jboolean)hasTokenWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t {
  return _currToken_ == t;
}

- (jboolean)isExpectedStartArrayToken {
  return _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
}

- (jboolean)isExpectedStartObjectToken {
  return _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
}

- (ComFasterxmlJacksonCoreJsonToken *)nextValue {
  ComFasterxmlJacksonCoreJsonToken *t = [self nextToken];
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    t = [self nextToken];
  }
  return t;
}

- (ComFasterxmlJacksonCoreJsonParser *)skipChildren {
  if (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT) && _currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    return self;
  }
  jint open = 1;
  while (true) {
    ComFasterxmlJacksonCoreJsonToken *t = [self nextToken];
    if (t == nil) {
      [self _handleEOF];
      return self;
    }
    if ([t isStructStart]) {
      ++open;
    }
    else if ([t isStructEnd]) {
      if (--open == 0) {
        return self;
      }
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)) {
      ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_withId_(self, @"Not enough content available for `skipChildren()`: non-blocking parser? (%s)", [[self java_getClass] getName]);
    }
  }
}

- (NSString *)nextFieldName {
  return ([self nextToken] == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) ? [self currentName] : nil;
}

- (jboolean)nextFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)str {
  return ([self nextToken] == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) && [((NSString *) nil_chk([((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(str)) getValue])) isEqual:[self currentName]];
}

- (jint)nextFieldNameWithComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)matcher {
  NSString *str = [self nextFieldName];
  if (str != nil) {
    return [((ComFasterxmlJacksonCoreSymFieldNameMatcher *) nil_chk(matcher)) matchNameWithNSString:str];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT)) {
    return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_END_OBJECT;
  }
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_ODD_TOKEN;
}

- (jint)currentFieldNameWithComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)matcher {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [((ComFasterxmlJacksonCoreSymFieldNameMatcher *) nil_chk(matcher)) matchNameWithNSString:[self currentName]];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT)) {
    return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_END_OBJECT;
  }
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_ODD_TOKEN;
}

- (void)clearCurrentToken {
  if (_currToken_ != nil) {
    JreStrongAssign(&_lastClearedToken_, _currToken_);
    JreStrongAssign(&_currToken_, nil);
  }
}

- (ComFasterxmlJacksonCoreJsonToken *)getLastClearedToken {
  return _lastClearedToken_;
}

- (void)overrideCurrentNameWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSCharArray *)getTextCharacters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasTextCharacters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getTextLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getTextOffset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)getValueAsBooleanWithBoolean:(jboolean)defaultValue {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t != nil) {
    {
      NSString *str;
      id value;
      switch ([t id__]) {
        case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
        str = [((NSString *) nil_chk([self getText])) java_trim];
        if ([@"true" isEqual:str]) {
          return true;
        }
        if ([@"false" isEqual:str]) {
          return false;
        }
        if ([self _hasTextualNullWithNSString:str]) {
          return false;
        }
        break;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
        return [self getIntValue] != 0;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_TRUE:
        return true;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_FALSE:
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NULL:
        return false;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_EMBEDDED_OBJECT:
        value = [self getEmbeddedObject];
        if ([value isKindOfClass:[JavaLangBoolean class]]) {
          return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]))) booleanValue];
        }
        break;
        default:
        ;
      }
    }
  }
  return defaultValue;
}

- (jint)getValueAsInt {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    return [self getIntValue];
  }
  return [self getValueAsIntWithInt:0];
}

- (jint)getValueAsIntWithInt:(jint)defaultValue {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    return [self getIntValue];
  }
  if (t != nil) {
    {
      NSString *str;
      id value;
      switch ([t id__]) {
        case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
        str = [self getText];
        if ([self _hasTextualNullWithNSString:str]) {
          return 0;
        }
        return ComFasterxmlJacksonCoreIoNumberInput_parseAsIntWithNSString_withInt_(str, defaultValue);
        case ComFasterxmlJacksonCoreJsonTokenId_ID_TRUE:
        return 1;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_FALSE:
        return 0;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NULL:
        return 0;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_EMBEDDED_OBJECT:
        value = [self getEmbeddedObject];
        if ([value isKindOfClass:[NSNumber class]]) {
          return [((NSNumber *) nil_chk(((NSNumber *) cast_chk(value, [NSNumber class])))) intValue];
        }
      }
    }
  }
  return defaultValue;
}

- (jlong)getValueAsLong {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    return [self getLongValue];
  }
  return [self getValueAsLongWithLong:0LL];
}

- (jlong)getValueAsLongWithLong:(jlong)defaultValue {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if ((t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    return [self getLongValue];
  }
  if (t != nil) {
    {
      NSString *str;
      id value;
      switch ([t id__]) {
        case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
        str = [self getText];
        if ([self _hasTextualNullWithNSString:str]) {
          return 0LL;
        }
        return ComFasterxmlJacksonCoreIoNumberInput_parseAsLongWithNSString_withLong_(str, defaultValue);
        case ComFasterxmlJacksonCoreJsonTokenId_ID_TRUE:
        return 1LL;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_FALSE:
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NULL:
        return 0LL;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_EMBEDDED_OBJECT:
        value = [self getEmbeddedObject];
        if ([value isKindOfClass:[NSNumber class]]) {
          return [((NSNumber *) nil_chk(((NSNumber *) cast_chk(value, [NSNumber class])))) longLongValue];
        }
      }
    }
  }
  return defaultValue;
}

- (jdouble)getValueAsDoubleWithDouble:(jdouble)defaultValue {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t != nil) {
    {
      NSString *str;
      id value;
      switch ([t id__]) {
        case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
        str = [self getText];
        if ([self _hasTextualNullWithNSString:str]) {
          return 0LL;
        }
        return ComFasterxmlJacksonCoreIoNumberInput_parseAsDoubleWithNSString_withDouble_(str, defaultValue);
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
        return [self getDoubleValue];
        case ComFasterxmlJacksonCoreJsonTokenId_ID_TRUE:
        return 1.0;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_FALSE:
        case ComFasterxmlJacksonCoreJsonTokenId_ID_NULL:
        return 0.0;
        case ComFasterxmlJacksonCoreJsonTokenId_ID_EMBEDDED_OBJECT:
        value = [self getEmbeddedObject];
        if ([value isKindOfClass:[NSNumber class]]) {
          return [((NSNumber *) nil_chk(((NSNumber *) cast_chk(value, [NSNumber class])))) doubleValue];
        }
      }
    }
  }
  return defaultValue;
}

- (NSString *)getValueAsString {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [self getText];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [self getValueAsStringWithNSString:nil];
}

- (NSString *)getValueAsStringWithNSString:(NSString *)defaultValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return [self getText];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  if (_currToken_ == nil || _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL) || ![_currToken_ isScalarValue]) {
    return defaultValue;
  }
  return [self getText];
}

- (id)readValueAsWithIOSClass:(IOSClass *)valueType {
  return [((id<ComFasterxmlJacksonCoreObjectReadContext>) nil_chk(_objectReadContext_)) readValueWithComFasterxmlJacksonCoreJsonParser:self withIOSClass:valueType];
}

- (id)readValueAsWithComFasterxmlJacksonCoreTypeTypeReference:(ComFasterxmlJacksonCoreTypeTypeReference *)valueTypeRef {
  return [((id<ComFasterxmlJacksonCoreObjectReadContext>) nil_chk(_objectReadContext_)) readValueWithComFasterxmlJacksonCoreJsonParser:self withComFasterxmlJacksonCoreTypeTypeReference:valueTypeRef];
}

- (id)readValueAsWithComFasterxmlJacksonCoreTypeResolvedType:(ComFasterxmlJacksonCoreTypeResolvedType *)type {
  return [((id<ComFasterxmlJacksonCoreObjectReadContext>) nil_chk(_objectReadContext_)) readValueWithComFasterxmlJacksonCoreJsonParser:self withComFasterxmlJacksonCoreTypeResolvedType:type];
}

- (id<ComFasterxmlJacksonCoreTreeNode>)readValueAsTree {
  return [((id<ComFasterxmlJacksonCoreObjectReadContext>) nil_chk(_objectReadContext_)) readTreeWithComFasterxmlJacksonCoreJsonParser:self];
}

- (void)_decodeBase64WithNSString:(NSString *)str
withComFasterxmlJacksonCoreUtilByteArrayBuilder:(ComFasterxmlJacksonCoreUtilByteArrayBuilder *)builder
withComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  @try {
    [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeWithNSString:str withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, [e getMessage]);
  }
}

- (jboolean)_hasTextualNullWithNSString:(NSString *)value {
  return [@"null" isEqual:value];
}

- (void)reportUnexpectedNumberCharWithInt:(jint)ch
                             withNSString:(NSString *)comment {
  NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unexpected character (%s) in numeric value", [IOSObjectArray arrayWithObjects:(id[]){ ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(ch) } count:1 type:NSObject_class_()]);
  if (comment != nil) {
    JreStrAppend(&msg, "$$", @": ", comment);
  }
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, msg);
}

- (void)reportInvalidNumberWithNSString:(NSString *)msg {
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, JreStrcat("$$", @"Invalid numeric value: ", msg));
}

- (void)reportOverflowInt {
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Numeric value (%s) out of range of int (%d - %s)", [IOSObjectArray arrayWithObjects:(id[]){ [self getText], JavaLangInteger_valueOfWithInt_(JavaLangInteger_MIN_VALUE), JavaLangInteger_valueOfWithInt_(JavaLangInteger_MAX_VALUE) } count:3 type:NSObject_class_()]));
}

- (void)reportOverflowLong {
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Numeric value (%s) out of range of long (%d - %s)", [IOSObjectArray arrayWithObjects:(id[]){ [self getText], JavaLangLong_valueOfWithLong_(JavaLangLong_MIN_VALUE), JavaLangLong_valueOfWithLong_(JavaLangLong_MAX_VALUE) } count:3 type:NSObject_class_()]));
}

- (void)_reportUnexpectedCharWithInt:(jint)ch
                        withNSString:(NSString *)comment {
  if (ch < 0) {
    [self _reportInvalidEOF];
  }
  NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unexpected character (%s)", [IOSObjectArray arrayWithObjects:(id[]){ ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(ch) } count:1 type:NSObject_class_()]);
  if (comment != nil) {
    JreStrAppend(&msg, "$$", @": ", comment);
  }
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, msg);
}

- (void)_reportInvalidEOF {
  [self _reportInvalidEOFWithNSString:JreStrcat("$@", @" in ", _currToken_) withComFasterxmlJacksonCoreJsonToken:_currToken_];
}

- (void)_reportInvalidEOFInValueWithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)type {
  NSString *msg;
  if (type == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    msg = @" in a String value";
  }
  else if ((type == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) || (type == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT))) {
    msg = @" in a Number value";
  }
  else {
    msg = @" in a value";
  }
  [self _reportInvalidEOFWithNSString:msg withComFasterxmlJacksonCoreJsonToken:type];
}

- (void)_reportInvalidEOFWithNSString:(NSString *)msg
 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)currToken {
  @throw create_ComFasterxmlJacksonCoreIoJsonEOFException_initWithComFasterxmlJacksonCoreJsonParser_withComFasterxmlJacksonCoreJsonToken_withNSString_(self, currToken, JreStrcat("$$", @"Unexpected end-of-input", msg));
}

- (void)_reportMissingRootWSWithInt:(jint)ch {
  [self _reportUnexpectedCharWithInt:ch withNSString:@"Expected space separating root-level values"];
}

- (void)_throwInvalidSpaceWithInt:(jint)i {
  jchar c = (jchar) i;
  NSString *msg = JreStrcat("$$$", @"Illegal character (", ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(c), @"): only regular white space (\\r, \\n, \\t) is allowed between tokens");
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, msg);
}

- (void)_throwUnquotedSpaceWithInt:(jint)i
                      withNSString:(NSString *)ctxtDesc {
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_UNQUOTED_CONTROL_CHARS)] || i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    jchar c = (jchar) i;
    NSString *msg = JreStrcat("$$$$", @"Illegal unquoted character (", ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(c), @"): has to be escaped using backslash to be included in ", ctxtDesc);
    ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, msg);
  }
}

- (jchar)_handleUnrecognizedCharacterEscapeWithChar:(jchar)ch {
  if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)]) {
    return ch;
  }
  if (ch == '\'' && [self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
    return ch;
  }
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, JreStrcat("$$", @"Unrecognized character escape ", ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(ch)));
  return ch;
}

+ (NSString *)_getCharDescWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(ch);
}

- (void)_reportErrorWithNSString:(NSString *)msg {
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(self, msg);
}

- (void)_reportErrorWithNSString:(NSString *)msg
                          withId:(id)arg {
  ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_withId_(self, msg, arg);
}

- (void)_reportErrorWithNSString:(NSString *)msg
                          withId:(id)arg1
                          withId:(id)arg2 {
  @throw nil_chk([self _constructErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(msg, [IOSObjectArray arrayWithObjects:(id[]){ arg1, arg2 } count:2 type:NSObject_class_()])]);
}

- (void)_wrapErrorWithNSString:(NSString *)msg
         withJavaLangThrowable:(JavaLangThrowable *)t {
  @throw nil_chk(ComFasterxmlJacksonCoreBaseParserMinimalBase__constructErrorWithNSString_withJavaLangThrowable_(self, msg, t));
}

- (void)_throwInternal {
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
}

- (ComFasterxmlJacksonCoreJsonParseException *)_constructErrorWithNSString:(NSString *)msg
                                                     withJavaLangThrowable:(JavaLangThrowable *)t {
  return ComFasterxmlJacksonCoreBaseParserMinimalBase__constructErrorWithNSString_withJavaLangThrowable_(self, msg, t);
}

+ (IOSByteArray *)_asciiBytesWithNSString:(NSString *)str {
  return ComFasterxmlJacksonCoreBaseParserMinimalBase__asciiBytesWithNSString_(str);
}

+ (NSString *)_asciiWithByteArray:(IOSByteArray *)b {
  return ComFasterxmlJacksonCoreBaseParserMinimalBase__asciiWithByteArray_(b);
}

- (void)dealloc {
  RELEASE_(_objectReadContext_);
  RELEASE_(_currToken_);
  RELEASE_(_lastClearedToken_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreObjectReadContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreTokenStreamContext;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 10, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "[C", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x401, 14, 15, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 5, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 20, 2, -1, -1, -1 },
    { NULL, "D", 0x1, 21, 22, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, 13, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 25, 2, 26, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 27, 2, 28, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 29, 2, 30, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreTreeNode;", 0x1, -1, -1, 2, 31, -1, -1 },
    { NULL, "V", 0x4, 32, 33, 2, -1, -1, -1 },
    { NULL, "Z", 0x4, 34, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 35, 36, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 36, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 39, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 40, 41, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 42, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 43, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 44, 36, 3, -1, -1, -1 },
    { NULL, "C", 0x4, 45, 46, 47, -1, -1, -1 },
    { NULL, "LNSString;", 0x1c, 48, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 49, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 49, 50, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 49, 51, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 52, 53, 3, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParseException;", 0x14, 54, 53, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 55, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 56, 57, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:withInt:);
  methods[2].selector = @selector(getObjectReadContext);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(isClosed);
  methods[5].selector = @selector(getParsingContext);
  methods[6].selector = @selector(_handleEOF);
  methods[7].selector = @selector(currentName);
  methods[8].selector = @selector(nextToken);
  methods[9].selector = @selector(finishToken);
  methods[10].selector = @selector(currentToken);
  methods[11].selector = @selector(currentTokenId);
  methods[12].selector = @selector(hasCurrentToken);
  methods[13].selector = @selector(hasTokenIdWithInt:);
  methods[14].selector = @selector(hasTokenWithComFasterxmlJacksonCoreJsonToken:);
  methods[15].selector = @selector(isExpectedStartArrayToken);
  methods[16].selector = @selector(isExpectedStartObjectToken);
  methods[17].selector = @selector(nextValue);
  methods[18].selector = @selector(skipChildren);
  methods[19].selector = @selector(nextFieldName);
  methods[20].selector = @selector(nextFieldNameWithComFasterxmlJacksonCoreSerializableString:);
  methods[21].selector = @selector(nextFieldNameWithComFasterxmlJacksonCoreSymFieldNameMatcher:);
  methods[22].selector = @selector(currentFieldNameWithComFasterxmlJacksonCoreSymFieldNameMatcher:);
  methods[23].selector = @selector(clearCurrentToken);
  methods[24].selector = @selector(getLastClearedToken);
  methods[25].selector = @selector(overrideCurrentNameWithNSString:);
  methods[26].selector = @selector(getText);
  methods[27].selector = @selector(getTextCharacters);
  methods[28].selector = @selector(hasTextCharacters);
  methods[29].selector = @selector(getTextLength);
  methods[30].selector = @selector(getTextOffset);
  methods[31].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[32].selector = @selector(getValueAsBooleanWithBoolean:);
  methods[33].selector = @selector(getValueAsInt);
  methods[34].selector = @selector(getValueAsIntWithInt:);
  methods[35].selector = @selector(getValueAsLong);
  methods[36].selector = @selector(getValueAsLongWithLong:);
  methods[37].selector = @selector(getValueAsDoubleWithDouble:);
  methods[38].selector = @selector(getValueAsString);
  methods[39].selector = @selector(getValueAsStringWithNSString:);
  methods[40].selector = @selector(readValueAsWithIOSClass:);
  methods[41].selector = @selector(readValueAsWithComFasterxmlJacksonCoreTypeTypeReference:);
  methods[42].selector = @selector(readValueAsWithComFasterxmlJacksonCoreTypeResolvedType:);
  methods[43].selector = @selector(readValueAsTree);
  methods[44].selector = @selector(_decodeBase64WithNSString:withComFasterxmlJacksonCoreUtilByteArrayBuilder:withComFasterxmlJacksonCoreBase64Variant:);
  methods[45].selector = @selector(_hasTextualNullWithNSString:);
  methods[46].selector = @selector(reportUnexpectedNumberCharWithInt:withNSString:);
  methods[47].selector = @selector(reportInvalidNumberWithNSString:);
  methods[48].selector = @selector(reportOverflowInt);
  methods[49].selector = @selector(reportOverflowLong);
  methods[50].selector = @selector(_reportUnexpectedCharWithInt:withNSString:);
  methods[51].selector = @selector(_reportInvalidEOF);
  methods[52].selector = @selector(_reportInvalidEOFInValueWithComFasterxmlJacksonCoreJsonToken:);
  methods[53].selector = @selector(_reportInvalidEOFWithNSString:withComFasterxmlJacksonCoreJsonToken:);
  methods[54].selector = @selector(_reportMissingRootWSWithInt:);
  methods[55].selector = @selector(_throwInvalidSpaceWithInt:);
  methods[56].selector = @selector(_throwUnquotedSpaceWithInt:withNSString:);
  methods[57].selector = @selector(_handleUnrecognizedCharacterEscapeWithChar:);
  methods[58].selector = @selector(_getCharDescWithInt:);
  methods[59].selector = @selector(_reportErrorWithNSString:);
  methods[60].selector = @selector(_reportErrorWithNSString:withId:);
  methods[61].selector = @selector(_reportErrorWithNSString:withId:withId:);
  methods[62].selector = @selector(_wrapErrorWithNSString:withJavaLangThrowable:);
  methods[63].selector = @selector(_throwInternal);
  methods[64].selector = @selector(_constructErrorWithNSString:withJavaLangThrowable:);
  methods[65].selector = @selector(_asciiBytesWithNSString:);
  methods[66].selector = @selector(_asciiWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT_TAB", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB, 0x1c, -1, -1, -1, -1 },
    { "INT_LF", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF, 0x1c, -1, -1, -1, -1 },
    { "INT_CR", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR, 0x1c, -1, -1, -1, -1 },
    { "INT_SPACE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE, 0x1c, -1, -1, -1, -1 },
    { "INT_LBRACKET", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LBRACKET, 0x1c, -1, -1, -1, -1 },
    { "INT_RBRACKET", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET, 0x1c, -1, -1, -1, -1 },
    { "INT_LCURLY", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LCURLY, 0x1c, -1, -1, -1, -1 },
    { "INT_RCURLY", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY, 0x1c, -1, -1, -1, -1 },
    { "INT_QUOTE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE, 0x1c, -1, -1, -1, -1 },
    { "INT_APOS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_APOS, 0x1c, -1, -1, -1, -1 },
    { "INT_BACKSLASH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH, 0x1c, -1, -1, -1, -1 },
    { "INT_SLASH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH, 0x1c, -1, -1, -1, -1 },
    { "INT_ASTERISK", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_ASTERISK, 0x1c, -1, -1, -1, -1 },
    { "INT_COLON", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON, 0x1c, -1, -1, -1, -1 },
    { "INT_COMMA", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA, 0x1c, -1, -1, -1, -1 },
    { "INT_HASH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH, 0x1c, -1, -1, -1, -1 },
    { "INT_0", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0, 0x1c, -1, -1, -1, -1 },
    { "INT_9", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9, 0x1c, -1, -1, -1, -1 },
    { "INT_MINUS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_MINUS, 0x1c, -1, -1, -1, -1 },
    { "INT_PLUS", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PLUS, 0x1c, -1, -1, -1, -1 },
    { "INT_PERIOD", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD, 0x1c, -1, -1, -1, -1 },
    { "INT_e", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e, 0x1c, -1, -1, -1, -1 },
    { "INT_E", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E, 0x1c, -1, -1, -1, -1 },
    { "CHAR_NULL", "C", .constantValue.asUnichar = ComFasterxmlJacksonCoreBaseParserMinimalBase_CHAR_NULL, 0x1c, -1, -1, -1, -1 },
    { "NO_BYTES", "[B", .constantValue.asLong = 0, 0x1c, -1, 58, -1, -1 },
    { "NO_INTS", "[I", .constantValue.asLong = 0, 0x1c, -1, 59, -1, -1 },
    { "NR_UNKNOWN", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN, 0x1c, -1, -1, -1, -1 },
    { "NR_INT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT, 0x1c, -1, -1, -1, -1 },
    { "NR_LONG", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG, 0x1c, -1, -1, -1, -1 },
    { "NR_BIGINT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT, 0x1c, -1, -1, -1, -1 },
    { "NR_DOUBLE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE, 0x1c, -1, -1, -1, -1 },
    { "NR_BIGDECIMAL", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL, 0x1c, -1, -1, -1, -1 },
    { "NR_FLOAT", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_FLOAT, 0x1c, -1, -1, -1, -1 },
    { "BI_MIN_INT", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1c, -1, 60, -1, -1 },
    { "BI_MAX_INT", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1c, -1, 61, -1, -1 },
    { "BI_MIN_LONG", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1c, -1, 62, -1, -1 },
    { "BI_MAX_LONG", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1c, -1, 63, -1, -1 },
    { "BD_MIN_LONG", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1c, -1, 64, -1, -1 },
    { "BD_MAX_LONG", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1c, -1, 65, -1, -1 },
    { "BD_MIN_INT", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1c, -1, 66, -1, -1 },
    { "BD_MAX_INT", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1c, -1, 67, -1, -1 },
    { "MIN_INT_L", "J", .constantValue.asLong = ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_INT_L, 0x1c, -1, -1, -1, -1 },
    { "MAX_INT_L", "J", .constantValue.asLong = ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_INT_L, 0x1c, -1, -1, -1, -1 },
    { "MIN_LONG_D", "D", .constantValue.asDouble = ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_LONG_D, 0x1c, -1, -1, -1, -1 },
    { "MAX_LONG_D", "D", .constantValue.asDouble = ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_LONG_D, 0x1c, -1, -1, -1, -1 },
    { "MIN_INT_D", "D", .constantValue.asDouble = ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_INT_D, 0x1c, -1, -1, -1, -1 },
    { "MAX_INT_D", "D", .constantValue.asDouble = ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_INT_D, 0x1c, -1, -1, -1, -1 },
    { "MAX_ERROR_TOKEN_LENGTH", "I", .constantValue.asInt = ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_ERROR_TOKEN_LENGTH, 0x1c, -1, -1, -1, -1 },
    { "_objectReadContext_", "LComFasterxmlJacksonCoreObjectReadContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_currToken_", "LComFasterxmlJacksonCoreJsonToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_lastClearedToken_", "LComFasterxmlJacksonCoreJsonToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreObjectReadContext;", "LComFasterxmlJacksonCoreObjectReadContext;I", "LJavaIoIOException;", "LComFasterxmlJacksonCoreJsonParseException;", "hasTokenId", "I", "hasToken", "LComFasterxmlJacksonCoreJsonToken;", "nextFieldName", "LComFasterxmlJacksonCoreSerializableString;", "LComFasterxmlJacksonCoreSymFieldNameMatcher;", "currentFieldName", "overrideCurrentName", "LNSString;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "getValueAsBoolean", "Z", "getValueAsInt", "getValueAsLong", "J", "getValueAsDouble", "D", "getValueAsString", "readValueAs", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;", "LComFasterxmlJacksonCoreTypeTypeReference;", "<T:Ljava/lang/Object;>(Lcom/fasterxml/jackson/core/type/TypeReference<*>;)TT;", "LComFasterxmlJacksonCoreTypeResolvedType;", "<T:Ljava/lang/Object;>(Lcom/fasterxml/jackson/core/type/ResolvedType;)TT;", "<T::Lcom/fasterxml/jackson/core/TreeNode;>()TT;", "_decodeBase64", "LNSString;LComFasterxmlJacksonCoreUtilByteArrayBuilder;LComFasterxmlJacksonCoreBase64Variant;", "_hasTextualNull", "reportUnexpectedNumberChar", "ILNSString;", "reportInvalidNumber", "_reportUnexpectedChar", "_reportInvalidEOFInValue", "_reportInvalidEOF", "LNSString;LComFasterxmlJacksonCoreJsonToken;", "_reportMissingRootWS", "_throwInvalidSpace", "_throwUnquotedSpace", "_handleUnrecognizedCharacterEscape", "C", "LComFasterxmlJacksonCoreJsonProcessingException;", "_getCharDesc", "_reportError", "LNSString;LNSObject;", "LNSString;LNSObject;LNSObject;", "_wrapError", "LNSString;LJavaLangThrowable;", "_constructError", "_asciiBytes", "_ascii", "[B", &ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_BYTES, &ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_INTS, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_INT, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_INT, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_LONG, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_LONG, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_LONG, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_LONG, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_INT, &ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_INT };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreBaseParserMinimalBase = { "ParserMinimalBase", "com.fasterxml.jackson.core.base", ptrTable, methods, fields, 7, 0x401, 67, 51, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreBaseParserMinimalBase;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreBaseParserMinimalBase class]) {
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_BYTES, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_NO_INTS, [IOSIntArray newArrayWithLength:0]);
    JreStrongAssign(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_INT, JavaMathBigInteger_valueOfWithLong_(JavaLangInteger_MIN_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_INT, JavaMathBigInteger_valueOfWithLong_(JavaLangInteger_MAX_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_LONG, JavaMathBigInteger_valueOfWithLong_(JavaLangLong_MIN_VALUE));
    JreStrongAssign(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_LONG, JavaMathBigInteger_valueOfWithLong_(JavaLangLong_MAX_VALUE));
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_LONG, new_JavaMathBigDecimal_initWithJavaMathBigInteger_(ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_LONG));
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_LONG, new_JavaMathBigDecimal_initWithJavaMathBigInteger_(ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_LONG));
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MIN_INT, new_JavaMathBigDecimal_initWithJavaMathBigInteger_(ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MIN_INT));
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBaseParserMinimalBase_BD_MAX_INT, new_JavaMathBigDecimal_initWithJavaMathBigInteger_(ComFasterxmlJacksonCoreBaseParserMinimalBase_BI_MAX_INT));
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreBaseParserMinimalBase)
  }
}

@end

void ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithComFasterxmlJacksonCoreObjectReadContext_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt) {
  ComFasterxmlJacksonCoreJsonParser_init(self);
  JreStrongAssign(&self->_objectReadContext_, readCtxt);
}

void ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithComFasterxmlJacksonCoreObjectReadContext_withInt_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, jint features) {
  ComFasterxmlJacksonCoreJsonParser_initWithInt_(self, features);
  JreStrongAssign(&self->_objectReadContext_, readCtxt);
}

NSString *ComFasterxmlJacksonCoreBaseParserMinimalBase__getCharDescWithInt_(jint ch) {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initialize();
  jchar c = (jchar) ch;
  if (JavaLangCharacter_isISOControlWithChar_(c)) {
    return JreStrcat("$IC", @"(CTRL-CHAR, code ", ch, ')');
  }
  if (ch > 255) {
    return JreStrcat("CC$I$$C", '\'', c, @"' (code ", ch, @" / 0x", JavaLangInteger_toHexStringWithInt_(ch), ')');
  }
  return JreStrcat("CC$IC", '\'', c, @"' (code ", ch, ')');
}

void ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg) {
  @throw nil_chk([self _constructErrorWithNSString:msg]);
}

void ComFasterxmlJacksonCoreBaseParserMinimalBase__reportErrorWithNSString_withId_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg, id arg) {
  @throw nil_chk([self _constructErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(msg, [IOSObjectArray arrayWithObjects:(id[]){ arg } count:1 type:NSObject_class_()])]);
}

ComFasterxmlJacksonCoreJsonParseException *ComFasterxmlJacksonCoreBaseParserMinimalBase__constructErrorWithNSString_withJavaLangThrowable_(ComFasterxmlJacksonCoreBaseParserMinimalBase *self, NSString *msg, JavaLangThrowable *t) {
  return create_ComFasterxmlJacksonCoreJsonParseException_initWithComFasterxmlJacksonCoreJsonParser_withNSString_withJavaLangThrowable_(self, msg, t);
}

IOSByteArray *ComFasterxmlJacksonCoreBaseParserMinimalBase__asciiBytesWithNSString_(NSString *str) {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initialize();
  IOSByteArray *b = [IOSByteArray arrayWithLength:[((NSString *) nil_chk(str)) java_length]];
  for (jint i = 0, len = [str java_length]; i < len; ++i) {
    *IOSByteArray_GetRef(b, i) = (jbyte) [str charAtWithInt:i];
  }
  return b;
}

NSString *ComFasterxmlJacksonCoreBaseParserMinimalBase__asciiWithByteArray_(IOSByteArray *b) {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initialize();
  @try {
    return [NSString java_stringWithBytes:b charsetName:@"US-ASCII"];
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreBaseParserMinimalBase)
