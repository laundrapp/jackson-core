//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParseException.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/JsonTokenId.h"
#include "com/fasterxml/jackson/core/ObjectReadContext.h"
#include "com/fasterxml/jackson/core/SerializableString.h"
#include "com/fasterxml/jackson/core/base/ParserBase.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/json/JsonReadContext.h"
#include "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.h"
#include "com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"

@interface ComFasterxmlJacksonCoreJsonReaderBasedJsonParser ()

- (ComFasterxmlJacksonCoreJsonToken *)_nextAfterName;

- (void)_isNextTokenNameYesWithInt:(jint)i;

- (ComFasterxmlJacksonCoreJsonToken *)_nextTokenNotInObjectWithInt:(jint)i;

- (ComFasterxmlJacksonCoreJsonToken *)_parseFloatWithInt:(jint)ch
                                                 withInt:(jint)startPtr
                                                 withInt:(jint)ptr
                                             withBoolean:(jboolean)neg
                                                 withInt:(jint)intLen;

/*!
 @brief Method called to parse a number, when the primary parse
  method has failed to parse it, due to it being split on
  buffer boundary.As a result code is very similar, except
  that it has to explicitly copy contents to the text buffer
  instead of just sharing the main input buffer.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_parseNumber2WithBoolean:(jboolean)neg
                                                       withInt:(jint)startPtr;

/*!
 @brief Method called when we have seen one zero, and want to ensure
  it is not followed by another
 */
- (jchar)_verifyNoLeadingZeroes;

- (jchar)_verifyNLZ2;

/*!
 @brief Method called to ensure that a root-value is followed by a space
  token.
 <p>
  NOTE: caller MUST ensure there is at least one character available;
  and that input pointer is AT given char (not past)
 */
- (void)_verifyRootSpaceWithInt:(jint)ch;

- (NSString *)_parseName2WithInt:(jint)startPtr
                         withInt:(jint)hash_
                         withInt:(jint)endChar;

- (NSString *)_handleOddName2WithInt:(jint)startPtr
                             withInt:(jint)hash_
                        withIntArray:(IOSIntArray *)codes;

- (jint)_skipColon;

- (jint)_skipColon2WithBoolean:(jboolean)gotColon;

- (jint)_skipColonFastWithInt:(jint)ptr;

- (jint)_skipCommaWithInt:(jint)i;

- (jint)_skipAfterComma2;

- (jint)_skipWSOrEnd;

- (jint)_skipWSOrEnd2;

- (void)_skipComment;

- (void)_skipCComment;

- (jboolean)_skipYAMLComment;

- (void)_skipLine;

- (void)_matchTrue;

- (void)_matchFalse;

- (void)_matchNull;

- (void)_matchToken2WithNSString:(NSString *)matchStr
                         withInt:(jint)i;

- (void)_checkMatchEndWithNSString:(NSString *)matchStr
                           withInt:(jint)i
                           withInt:(jint)c;

- (void)_updateLocation;

- (void)_updateNameLocation;

- (void)_closeScopeWithInt:(jint)i;

@end

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_getText(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, ComFasterxmlJacksonCoreJsonToken *t);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__isNextTokenNameYesWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextTokenNotInObjectWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseFloatWithInt_withInt_withInt_withBoolean_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch, jint startPtr, jint ptr, jboolean neg, jint intLen);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jboolean neg, jint startPtr);

__attribute__((unused)) static jchar ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNoLeadingZeroes(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jchar ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNLZ2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName2WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint startPtr, jint hash_, jint endChar);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__handleOddName2WithInt_withInt_withIntArray_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint startPtr, jint hash_, IOSIntArray *codes);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jboolean gotColon);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColonFastWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ptr);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipAfterComma2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipLine(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchToken2WithNSString_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__checkMatchEndWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i, jint c);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser)

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA;
IOSIntArray *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1;

@implementation ComFasterxmlJacksonCoreJsonReaderBasedJsonParser

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)features
                                                          withJavaIoReader:(JavaIoReader *)r
                    withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)st
                                                             withCharArray:(IOSCharArray *)inputBuffer
                                                                   withInt:(jint)start
                                                                   withInt:(jint)end
                                                               withBoolean:(jboolean)bufferRecyclable {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_(self, readCtxt, ctxt, features, r, st, inputBuffer, start, end, bufferRecyclable);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                                   withInt:(jint)features
                                                          withJavaIoReader:(JavaIoReader *)r
                    withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)st {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(self, readCtxt, ctxt, features, r, st);
  return self;
}

- (jint)releaseBufferedWithJavaIoWriter:(JavaIoWriter *)w {
  jint count = _inputEnd_ - _inputPtr_;
  if (count < 1) {
    return 0;
  }
  jint origPtr = _inputPtr_;
  [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:_inputBuffer_ withInt:origPtr withInt:count];
  return count;
}

- (id)getInputSource {
  return _reader_;
}

- (jchar)getNextCharWithNSString:(NSString *)eofMsg
withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)forToken {
  if (_inputPtr_ >= _inputEnd_) {
    if (![self _loadMore]) {
      [self _reportInvalidEOFWithNSString:eofMsg withComFasterxmlJacksonCoreJsonToken:forToken];
    }
  }
  return IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
}

- (void)_closeInput {
  if (_reader_ != nil) {
    if ([((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) isResourceManaged] || [self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, AUTO_CLOSE_SOURCE)]) {
      [((JavaIoReader *) nil_chk(_reader_)) close];
    }
    JreStrongAssign(&_reader_, nil);
  }
}

- (void)_releaseBuffers {
  [super _releaseBuffers];
  [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(_symbols_)) release__];
  if (_bufferRecyclable_) {
    IOSCharArray *buf = _inputBuffer_;
    if (buf != nil) {
      JreStrongAssign(&_inputBuffer_, nil);
      [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseTokenBufferWithCharArray:buf];
    }
  }
}

- (void)_loadMoreGuaranteed {
  if (![self _loadMore]) {
    [self _reportInvalidEOF];
  }
}

- (jboolean)_loadMore {
  jint bufSize = _inputEnd_;
  _currInputProcessed_ += bufSize;
  _currInputRowStart_ -= bufSize;
  _nameStartOffset_ -= bufSize;
  if (_reader_ != nil) {
    jint count = [_reader_ readWithCharArray:_inputBuffer_ withInt:0 withInt:((IOSCharArray *) nil_chk(_inputBuffer_))->size_];
    if (count > 0) {
      _inputPtr_ = 0;
      _inputEnd_ = count;
      return true;
    }
    [self _closeInput];
    if (count == 0) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Reader returned 0 characters when trying to read ", _inputEnd_));
    }
  }
  return false;
}

- (NSString *)getText {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_getText(self);
}

- (jint)getTextWithJavaIoWriter:(JavaIoWriter *)writer {
  ComFasterxmlJacksonCoreJsonToken *t = _currToken_;
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
  }
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    NSString *n = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:n];
    return [((NSString *) nil_chk(n)) java_length];
  }
  if (t != nil) {
    if ([t isNumeric]) {
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsToWriterWithJavaIoWriter:writer];
    }
    IOSCharArray *ch = [t asCharArray];
    [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:ch];
    return ((IOSCharArray *) nil_chk(ch))->size_;
  }
  return 0;
}

- (NSString *)getValueAsString {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:nil];
}

- (NSString *)getValueAsStringWithNSString:(NSString *)defValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (_tokenIncomplete_) {
      _tokenIncomplete_ = false;
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return [self currentName];
  }
  return [super getValueAsStringWithNSString:defValue];
}

- (NSString *)_getText2WithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(self, t);
}

- (IOSCharArray *)getTextCharacters {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      if (!_nameCopied_) {
        NSString *name = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName];
        jint nameLen = [((NSString *) nil_chk(name)) java_length];
        if (_nameCopyBuffer_ == nil) {
          JreStrongAssign(&_nameCopyBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocNameCopyBufferWithInt:nameLen]);
        }
        else if (_nameCopyBuffer_->size_ < nameLen) {
          JreStrongAssignAndConsume(&_nameCopyBuffer_, [IOSCharArray newArrayWithLength:nameLen]);
        }
        [name java_getChars:0 sourceEnd:nameLen destination:_nameCopyBuffer_ destinationBegin:0];
        _nameCopied_ = true;
      }
      return _nameCopyBuffer_;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
      }
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextBuffer];
      default:
      return [((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray];
    }
  }
  return nil;
}

- (jint)getTextLength {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      return [((NSString *) nil_chk([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) currentName])) java_length];
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
      }
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) size];
      default:
      return ((IOSCharArray *) nil_chk([((ComFasterxmlJacksonCoreJsonToken *) nil_chk(_currToken_)) asCharArray]))->size_;
    }
  }
  return 0;
}

- (jint)getTextOffset {
  if (_currToken_ != nil) {
    switch ([_currToken_ id__]) {
      case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
      return 0;
      case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
      }
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
      case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getTextOffset];
      default:
      ;
    }
  }
  return 0;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  if ((_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_EMBEDDED_OBJECT)) && (_binaryValue_ != nil)) {
    return _binaryValue_;
  }
  if (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    [self _reportErrorWithNSString:JreStrcat("$@$", @"Current token (", _currToken_, @") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary")];
  }
  if (_tokenIncomplete_) {
    @try {
      JreStrongAssign(&_binaryValue_, [self _decodeBase64WithComFasterxmlJacksonCoreBase64Variant:b64variant]);
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      @throw nil_chk([self _constructErrorWithNSString:JreStrcat("$@$$", @"Failed to decode VALUE_STRING as base64 (", b64variant, @"): ", [iae getMessage])]);
    }
    _tokenIncomplete_ = false;
  }
  else {
    if (_binaryValue_ == nil) {
      ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
      [self _decodeBase64WithNSString:ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_getText(self) withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder withComFasterxmlJacksonCoreBase64Variant:b64variant];
      JreStrongAssign(&_binaryValue_, [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray]);
    }
  }
  return _binaryValue_;
}

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (!_tokenIncomplete_ || _currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    IOSByteArray *b = [self getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:b64variant];
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b];
    return ((IOSByteArray *) nil_chk(b))->size_;
  }
  IOSByteArray *buf = [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocBase64Buffer];
  @try {
    return [self _readBinaryWithComFasterxmlJacksonCoreBase64Variant:b64variant withJavaIoOutputStream:outArg withByteArray:buf];
  }
  @finally {
    [_ioContext_ releaseBase64BufferWithByteArray:buf];
  }
}

- (jint)_readBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                              withByteArray:(IOSByteArray *)buffer {
  jint outputPtr = 0;
  jint outputEnd = ((IOSByteArray *) nil_chk(buffer))->size_ - 3;
  jint outputCount = 0;
  while (true) {
    jchar ch;
    do {
      if (_inputPtr_ >= _inputEnd_) {
        [self _loadMoreGuaranteed];
      }
      ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    }
    while (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE);
    jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (ch == '"') {
        break;
      }
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:0];
      if (bits < 0) {
        continue;
      }
    }
    if (outputPtr > outputEnd) {
      outputCount += outputPtr;
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:outputPtr];
      outputPtr = 0;
    }
    jint decodedData = bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:1];
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 4);
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
          break;
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:2];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (_inputPtr_ >= _inputEnd_) {
          [self _loadMoreGuaranteed];
        }
        ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
        if (![b64variant usesPaddingCharWithChar:ch]) {
          @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3 withNSString:JreStrcat("$CC", @"expected padding character '", [b64variant getPaddingChar], '\'')]);
        }
        JreRShiftAssignInt(&decodedData, 4);
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 2);
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
          *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
          break;
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:3];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        JreRShiftAssignInt(&decodedData, 2);
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
        *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 16));
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) (JreRShift32(decodedData, 8));
    *IOSByteArray_GetRef(buffer, outputPtr++) = (jbyte) decodedData;
  }
  _tokenIncomplete_ = false;
  if (outputPtr > 0) {
    outputCount += outputPtr;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:outputPtr];
  }
  return outputCount;
}

- (ComFasterxmlJacksonCoreJsonToken *)nextToken {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_nextAfterName {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(self);
}

- (void)finishToken {
  if (_tokenIncomplete_) {
    _tokenIncomplete_ = false;
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
  }
}

- (jboolean)nextFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)sstr {
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(self);
    return false;
  }
  if (_tokenIncomplete_) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(self);
  }
  jint i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(self);
  if (i < 0) {
    [self close];
    JreStrongAssign(&_currToken_, nil);
    return false;
  }
  JreStrongAssign(&_binaryValue_, nil);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
    return false;
  }
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) expectComma]) {
    i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(self, i);
    if ((_features_ & ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA) != 0) {
      if ((i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
        return false;
      }
    }
  }
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inObject]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextTokenNotInObjectWithInt_(self, i);
    return false;
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(self);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    IOSCharArray *nameChars = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(sstr)) asQuotedChars];
    jint len = ((IOSCharArray *) nil_chk(nameChars))->size_;
    if ((_inputPtr_ + len + 4) < _inputEnd_) {
      jint end = _inputPtr_ + len;
      if (IOSCharArray_Get(nil_chk(_inputBuffer_), end) == '"') {
        jint offset = 0;
        jint ptr = _inputPtr_;
        while (true) {
          if (ptr == end) {
            [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:[sstr getValue]];
            ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__isNextTokenNameYesWithInt_(self, ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColonFastWithInt_(self, ptr + 1));
            return true;
          }
          if (IOSCharArray_Get(nameChars, offset) != IOSCharArray_Get(_inputBuffer_, ptr)) {
            break;
          }
          ++offset;
          ++ptr;
        }
      }
    }
  }
  return [self _isNextTokenNameMaybeWithInt:i withNSString:[((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(sstr)) getValue]];
}

- (NSString *)nextFieldName {
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(self);
    return nil;
  }
  if (_tokenIncomplete_) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(self);
  }
  jint i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(self);
  if (i < 0) {
    [self close];
    JreStrongAssign(&_currToken_, nil);
    return nil;
  }
  JreStrongAssign(&_binaryValue_, nil);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
    return nil;
  }
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) expectComma]) {
    i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(self, i);
    if ((_features_ & ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA) != 0) {
      if ((i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
        return nil;
      }
    }
  }
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inObject]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextTokenNotInObjectWithInt_(self, i);
    return nil;
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(self);
  NSString *name = (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) ? ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(self) : [self _handleOddNameWithInt:i];
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:name];
  JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
  i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(self);
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    _tokenIncomplete_ = true;
    JreStrongAssign(&_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
    return name;
  }
  ComFasterxmlJacksonCoreJsonToken *t;
  switch (i) {
    case '-':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self);
    break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, i);
    break;
    case 'f':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE);
    break;
    case 'n':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    break;
    case 't':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE);
    break;
    case '[':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
    break;
    case '{':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
    break;
    default:
    t = [self _handleOddValueWithInt:i];
    break;
  }
  JreStrongAssign(&_nextToken_, t);
  return name;
}

- (void)_isNextTokenNameYesWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__isNextTokenNameYesWithInt_(self, i);
}

- (jboolean)_isNextTokenNameMaybeWithInt:(jint)i
                            withNSString:(NSString *)nameToMatch {
  NSString *name = (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) ? ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(self) : [self _handleOddNameWithInt:i];
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentNameWithNSString:name];
  JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
  i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(self);
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    _tokenIncomplete_ = true;
    JreStrongAssign(&_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
    return [((NSString *) nil_chk(nameToMatch)) isEqual:name];
  }
  ComFasterxmlJacksonCoreJsonToken *t;
  switch (i) {
    case '-':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self);
    break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, i);
    break;
    case 'f':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE);
    break;
    case 'n':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    break;
    case 't':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE);
    break;
    case '[':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
    break;
    case '{':
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
    break;
    default:
    t = [self _handleOddValueWithInt:i];
    break;
  }
  JreStrongAssign(&_nextToken_, t);
  return [((NSString *) nil_chk(nameToMatch)) isEqual:name];
}

- (ComFasterxmlJacksonCoreJsonToken *)_nextTokenNotInObjectWithInt:(jint)i {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextTokenNotInObjectWithInt_(self, i);
}

- (NSString *)nextTextValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
      if (_tokenIncomplete_) {
        _tokenIncomplete_ = false;
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
      }
      return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return nil;
  }
  return (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(self) == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) ? ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_getText(self) : nil;
}

- (jint)nextIntValueWithInt:(jint)defaultValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
      return [self getIntValue];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return defaultValue;
  }
  return (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(self) == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) ? [self getIntValue] : defaultValue;
}

- (jlong)nextLongValueWithLong:(jlong)defaultValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
      return [self getLongValue];
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return defaultValue;
  }
  return (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(self) == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) ? [self getLongValue] : defaultValue;
}

- (JavaLangBoolean *)nextBooleanValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    _nameCopied_ = false;
    ComFasterxmlJacksonCoreJsonToken *t = _nextToken_;
    JreStrongAssign(&_nextToken_, nil);
    JreStrongAssign(&_currToken_, t);
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)) {
      return JreLoadStatic(JavaLangBoolean, TRUE);
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)) {
      return JreLoadStatic(JavaLangBoolean, FALSE);
    }
    if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildArrayContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) createChildObjectContextWithInt:_tokenInputRow_ withInt:_tokenInputCol_]);
    }
    return nil;
  }
  ComFasterxmlJacksonCoreJsonToken *t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(self);
  if (t != nil) {
    jint id_ = [t id__];
    if (id_ == ComFasterxmlJacksonCoreJsonTokenId_ID_TRUE) return JreLoadStatic(JavaLangBoolean, TRUE);
    if (id_ == ComFasterxmlJacksonCoreJsonTokenId_ID_FALSE) return JreLoadStatic(JavaLangBoolean, FALSE);
  }
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_parsePosNumberWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseFloatWithInt:(jint)ch
                                                 withInt:(jint)startPtr
                                                 withInt:(jint)ptr
                                             withBoolean:(jboolean)neg
                                                 withInt:(jint)intLen {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseFloatWithInt_withInt_withInt_withBoolean_withInt_(self, ch, startPtr, ptr, neg, intLen);
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseNegNumber {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseNumber2WithBoolean:(jboolean)neg
                                                       withInt:(jint)startPtr {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, neg, startPtr);
}

- (jchar)_verifyNoLeadingZeroes {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNoLeadingZeroes(self);
}

- (jchar)_verifyNLZ2 {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNLZ2(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleInvalidNumberStartWithInt:(jint)ch
                                                           withBoolean:(jboolean)negative {
  if (ch == 'I') {
    if (_inputPtr_ >= _inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFInValueWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
      }
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    if (ch == 'N') {
      NSString *match = negative ? @"-INF" : @"+INF";
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, match, 3);
      if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
        return [self resetAsNaNWithNSString:match withDouble:negative ? JavaLangDouble_NEGATIVE_INFINITY : JavaLangDouble_POSITIVE_INFINITY];
      }
      [self _reportErrorWithNSString:JreStrcat("$$$", @"Non-standard token '", match, @"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow")];
    }
    else if (ch == 'n') {
      NSString *match = negative ? @"-Infinity" : @"+Infinity";
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, match, 3);
      if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
        return [self resetAsNaNWithNSString:match withDouble:negative ? JavaLangDouble_NEGATIVE_INFINITY : JavaLangDouble_POSITIVE_INFINITY];
      }
      [self _reportErrorWithNSString:JreStrcat("$$$", @"Non-standard token '", match, @"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow")];
    }
  }
  [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  return nil;
}

- (void)_verifyRootSpaceWithInt:(jint)ch {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(self, ch);
}

- (NSString *)_parseName {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(self);
}

- (NSString *)_parseName2WithInt:(jint)startPtr
                         withInt:(jint)hash_
                         withInt:(jint)endChar {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName2WithInt_withInt_withInt_(self, startPtr, hash_, endChar);
}

- (NSString *)_handleOddNameWithInt:(jint)i {
  if (i == '\'' && [self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
    return [self _parseAposName];
  }
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_UNQUOTED_FIELD_NAMES)]) {
    [self _reportUnexpectedCharWithInt:i withNSString:@"was expecting double-quote to start field name"];
  }
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1JsNames();
  jint maxCode = ((IOSIntArray *) nil_chk(codes))->size_;
  jboolean firstOk;
  if (i < maxCode) {
    firstOk = (IOSIntArray_Get(codes, i) == 0);
  }
  else {
    firstOk = JavaLangCharacter_isJavaIdentifierPartWithChar_((jchar) i);
  }
  if (!firstOk) {
    [self _reportUnexpectedCharWithInt:i withNSString:@"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"];
  }
  jint ptr = _inputPtr_;
  jint hash_ = _hashSeed_;
  jint inputLen = _inputEnd_;
  if (ptr < inputLen) {
    do {
      jint ch = IOSCharArray_Get(nil_chk(_inputBuffer_), ptr);
      if (ch < maxCode) {
        if (IOSIntArray_Get(codes, ch) != 0) {
          jint start = _inputPtr_ - 1;
          _inputPtr_ = ptr;
          return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(_symbols_)) findSymbolWithCharArray:_inputBuffer_ withInt:start withInt:ptr - start withInt:hash_];
        }
      }
      else if (!JavaLangCharacter_isJavaIdentifierPartWithChar_((jchar) ch)) {
        jint start = _inputPtr_ - 1;
        _inputPtr_ = ptr;
        return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(_symbols_)) findSymbolWithCharArray:_inputBuffer_ withInt:start withInt:ptr - start withInt:hash_];
      }
      hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + ch;
      ++ptr;
    }
    while (ptr < inputLen);
  }
  jint start = _inputPtr_ - 1;
  _inputPtr_ = ptr;
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__handleOddName2WithInt_withInt_withIntArray_(self, start, hash_, codes);
}

- (NSString *)_parseAposName {
  jint ptr = _inputPtr_;
  jint hash_ = _hashSeed_;
  jint inputLen = _inputEnd_;
  if (ptr < inputLen) {
    IOSIntArray *codes = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1;
    jint maxCode = ((IOSIntArray *) nil_chk(codes))->size_;
    do {
      jint ch = IOSCharArray_Get(nil_chk(_inputBuffer_), ptr);
      if (ch == '\'') {
        jint start = _inputPtr_;
        _inputPtr_ = ptr + 1;
        return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(_symbols_)) findSymbolWithCharArray:_inputBuffer_ withInt:start withInt:ptr - start withInt:hash_];
      }
      if (ch < maxCode && IOSIntArray_Get(codes, ch) != 0) {
        break;
      }
      hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + ch;
      ++ptr;
    }
    while (ptr < inputLen);
  }
  jint start = _inputPtr_;
  _inputPtr_ = ptr;
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName2WithInt_withInt_withInt_(self, start, hash_, '\'');
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleOddValueWithInt:(jint)i {
  switch (i) {
    case '\'':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
      return [self _handleApos];
    }
    break;
    case ']':
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inArray]) {
      break;
    }
    case ',':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_MISSING_VALUES)]) {
      --_inputPtr_;
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    }
    break;
    case 'N':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"NaN", 1);
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
      return [self resetAsNaNWithNSString:@"NaN" withDouble:JavaLangDouble_NaN];
    }
    [self _reportErrorWithNSString:@"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"];
    break;
    case 'I':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"Infinity", 1);
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NON_NUMERIC_NUMBERS)]) {
      return [self resetAsNaNWithNSString:@"Infinity" withDouble:JavaLangDouble_POSITIVE_INFINITY];
    }
    [self _reportErrorWithNSString:@"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"];
    break;
    case '+':
    if (_inputPtr_ >= _inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFInValueWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
      }
    }
    return [self _handleInvalidNumberStartWithInt:IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) withBoolean:false];
  }
  if (JavaLangCharacter_isJavaIdentifierStartWithInt_(i)) {
    [self _reportInvalidTokenWithNSString:JreStrcat("C", ((jchar) i)) withNSString:@"('true', 'false' or 'null')"];
  }
  [self _reportUnexpectedCharWithInt:i withNSString:@"expected a valid value (number, String, array, object, 'true', 'false' or 'null')"];
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleApos {
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  jint outPtr = [_textBuffer_ getCurrentSegmentSize];
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFWithNSString:@": was expecting closing quote for a string value" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
    }
    jchar c = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    jint i = (jint) c;
    if (i <= '\\') {
      if (i == '\\') {
        c = [self _decodeEscaped];
      }
      else if (i <= '\'') {
        if (i == '\'') {
          break;
        }
        if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
          [self _throwUnquotedSpaceWithInt:i withNSString:@"string value"];
        }
      }
    }
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING);
}

- (NSString *)_handleOddName2WithInt:(jint)startPtr
                             withInt:(jint)hash_
                        withIntArray:(IOSIntArray *)codes {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__handleOddName2WithInt_withInt_withIntArray_(self, startPtr, hash_, codes);
}

- (void)_finishString {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
}

- (void)_finishString2 {
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getCurrentSegment];
  jint outPtr = [_textBuffer_ getCurrentSegmentSize];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1;
  jint maxCode = ((IOSIntArray *) nil_chk(codes))->size_;
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFWithNSString:@": was expecting closing quote for a string value" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
    }
    jchar c = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    jint i = (jint) c;
    if (i < maxCode && IOSIntArray_Get(codes, i) != 0) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        break;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
        c = [self _decodeEscaped];
      }
      else if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        [self _throwUnquotedSpaceWithInt:i withNSString:@"string value"];
      }
    }
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
}

- (void)_skipString {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(self);
}

- (void)_skipCR {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
}

- (jint)_skipColon {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(self);
}

- (jint)_skipColon2WithBoolean:(jboolean)gotColon {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, gotColon);
}

- (jint)_skipColonFastWithInt:(jint)ptr {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColonFastWithInt_(self, ptr);
}

- (jint)_skipCommaWithInt:(jint)i {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(self, i);
}

- (jint)_skipAfterComma2 {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipAfterComma2(self);
}

- (jint)_skipWSOrEnd {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(self);
}

- (jint)_skipWSOrEnd2 {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(self);
}

- (void)_skipComment {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(self);
}

- (void)_skipCComment {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCComment(self);
}

- (jboolean)_skipYAMLComment {
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(self);
}

- (void)_skipLine {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipLine(self);
}

- (jchar)_decodeEscaped {
  if (_inputPtr_ >= _inputEnd_) {
    if (![self _loadMore]) {
      [self _reportInvalidEOFWithNSString:@" in character escape sequence" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
    }
  }
  jchar c = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
  switch ((jint) c) {
    case 'b':
    return 0x0008;
    case 't':
    return 0x0009;
    case 'n':
    return 0x000a;
    case 'f':
    return 0x000c;
    case 'r':
    return 0x000d;
    case '"':
    case '/':
    case '\\':
    return c;
    case 'u':
    break;
    default:
    return [self _handleUnrecognizedCharacterEscapeWithChar:c];
  }
  jint value = 0;
  for (jint i = 0; i < 4; ++i) {
    if (_inputPtr_ >= _inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFWithNSString:@" in character escape sequence" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
    }
    jint ch = (jint) IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    jint digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
    if (digit < 0) {
      [self _reportUnexpectedCharWithInt:ch withNSString:@"expected a hex-digit for character escape sequence"];
    }
    value = (JreLShift32(value, 4)) | digit;
  }
  return (jchar) value;
}

- (void)_matchTrue {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(self);
}

- (void)_matchFalse {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(self);
}

- (void)_matchNull {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(self);
}

- (void)_matchTokenWithNSString:(NSString *)matchStr
                        withInt:(jint)i {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, matchStr, i);
}

- (void)_matchToken2WithNSString:(NSString *)matchStr
                         withInt:(jint)i {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchToken2WithNSString_withInt_(self, matchStr, i);
}

- (void)_checkMatchEndWithNSString:(NSString *)matchStr
                           withInt:(jint)i
                           withInt:(jint)c {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__checkMatchEndWithNSString_withInt_withInt_(self, matchStr, i, c);
}

- (IOSByteArray *)_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant {
  ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
  while (true) {
    jchar ch;
    do {
      if (_inputPtr_ >= _inputEnd_) {
        [self _loadMoreGuaranteed];
      }
      ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    }
    while (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE);
    jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (ch == '"') {
        return [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray];
      }
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:0];
      if (bits < 0) {
        continue;
      }
    }
    jint decodedData = bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:1];
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 4);
          [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendWithInt:decodedData];
          return [builder toByteArray];
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:2];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (_inputPtr_ >= _inputEnd_) {
          [self _loadMoreGuaranteed];
        }
        ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
        if (![b64variant usesPaddingCharWithChar:ch]) {
          @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:3 withNSString:JreStrcat("$CC", @"expected padding character '", [b64variant getPaddingChar], '\'')]);
        }
        JreRShiftAssignInt(&decodedData, 4);
        [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendWithInt:decodedData];
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    if (_inputPtr_ >= _inputEnd_) {
      [self _loadMoreGuaranteed];
    }
    ch = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    bits = [b64variant decodeBase64CharWithChar:ch];
    if (bits < 0) {
      if (bits != ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        if (ch == '"' && ![b64variant usesPadding]) {
          JreRShiftAssignInt(&decodedData, 2);
          [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendTwoBytesWithInt:decodedData];
          return [builder toByteArray];
        }
        bits = [self _decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:b64variant withChar:ch withInt:3];
      }
      if (bits == ComFasterxmlJacksonCoreBase64Variant_BASE64_VALUE_PADDING) {
        JreRShiftAssignInt(&decodedData, 2);
        [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendTwoBytesWithInt:decodedData];
        continue;
      }
    }
    decodedData = (JreLShift32(decodedData, 6)) | bits;
    [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) appendThreeBytesWithInt:decodedData];
  }
}

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    jlong total = _currInputProcessed_ + (_nameStartOffset_ - 1);
    return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, total, _nameStartRow_, _nameStartCol_);
  }
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, _tokenInputTotal_ - 1, _tokenInputRow_, _tokenInputCol_);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  jint col = _inputPtr_ - _currInputRowStart_ + 1;
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, _currInputProcessed_ + _inputPtr_, _currInputRow_, col);
}

- (void)_updateLocation {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
}

- (void)_updateNameLocation {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(self);
}

- (void)_reportInvalidTokenWithNSString:(NSString *)matchedPart {
  [self _reportInvalidTokenWithNSString:matchedPart withNSString:@"'null', 'true', 'false' or NaN"];
}

- (void)_reportInvalidTokenWithNSString:(NSString *)matchedPart
                           withNSString:(NSString *)msg {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(matchedPart);
  while ((_inputPtr_ < _inputEnd_) || [self _loadMore]) {
    jchar c = IOSCharArray_Get(nil_chk(_inputBuffer_), _inputPtr_);
    if (!JavaLangCharacter_isJavaIdentifierPartWithChar_(c)) {
      break;
    }
    ++_inputPtr_;
    [sb appendWithChar:c];
    if ([sb java_length] >= ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_ERROR_TOKEN_LENGTH) {
      [sb appendWithNSString:@"..."];
      break;
    }
  }
  [self _reportErrorWithNSString:@"Unrecognized token '%s': was expecting %s" withId:sb withId:msg];
}

- (void)_closeScopeWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
}

- (void)dealloc {
  RELEASE_(_reader_);
  RELEASE_(_inputBuffer_);
  RELEASE_(_symbols_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 8, 9, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 10, 11, -1, -1, -1, -1 },
    { NULL, "[C", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, 4, -1, -1, -1 },
    { NULL, "I", 0x4, 16, 17, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 20, 21, 4, -1, -1, -1 },
    { NULL, "Z", 0x4, 22, 23, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 24, 21, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x11, 25, 21, 4, -1, -1, -1 },
    { NULL, "J", 0x11, 26, 27, 4, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 28, 21, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 29, 30, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 31, 32, 4, -1, -1, -1 },
    { NULL, "C", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 33, 34, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 35, 21, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 36, 37, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 38, 21, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 39, 21, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 40, 41, 4, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 42, 43, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 44, 21, 4, -1, -1, -1 },
    { NULL, "I", 0x12, 45, 21, 4, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x14, 46, 47, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 48, 47, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 49, 50, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, 51, 13, 4, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 52, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 52, 53, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 21, 55, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:withComFasterxmlJacksonCoreIoIOContext:withInt:withJavaIoReader:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:withCharArray:withInt:withInt:withBoolean:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreObjectReadContext:withComFasterxmlJacksonCoreIoIOContext:withInt:withJavaIoReader:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:);
  methods[2].selector = @selector(releaseBufferedWithJavaIoWriter:);
  methods[3].selector = @selector(getInputSource);
  methods[4].selector = @selector(getNextCharWithNSString:withComFasterxmlJacksonCoreJsonToken:);
  methods[5].selector = @selector(_closeInput);
  methods[6].selector = @selector(_releaseBuffers);
  methods[7].selector = @selector(_loadMoreGuaranteed);
  methods[8].selector = @selector(_loadMore);
  methods[9].selector = @selector(getText);
  methods[10].selector = @selector(getTextWithJavaIoWriter:);
  methods[11].selector = @selector(getValueAsString);
  methods[12].selector = @selector(getValueAsStringWithNSString:);
  methods[13].selector = @selector(_getText2WithComFasterxmlJacksonCoreJsonToken:);
  methods[14].selector = @selector(getTextCharacters);
  methods[15].selector = @selector(getTextLength);
  methods[16].selector = @selector(getTextOffset);
  methods[17].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[18].selector = @selector(readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:);
  methods[19].selector = @selector(_readBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoOutputStream:withByteArray:);
  methods[20].selector = @selector(nextToken);
  methods[21].selector = @selector(_nextAfterName);
  methods[22].selector = @selector(finishToken);
  methods[23].selector = @selector(nextFieldNameWithComFasterxmlJacksonCoreSerializableString:);
  methods[24].selector = @selector(nextFieldName);
  methods[25].selector = @selector(_isNextTokenNameYesWithInt:);
  methods[26].selector = @selector(_isNextTokenNameMaybeWithInt:withNSString:);
  methods[27].selector = @selector(_nextTokenNotInObjectWithInt:);
  methods[28].selector = @selector(nextTextValue);
  methods[29].selector = @selector(nextIntValueWithInt:);
  methods[30].selector = @selector(nextLongValueWithLong:);
  methods[31].selector = @selector(nextBooleanValue);
  methods[32].selector = @selector(_parsePosNumberWithInt:);
  methods[33].selector = @selector(_parseFloatWithInt:withInt:withInt:withBoolean:withInt:);
  methods[34].selector = @selector(_parseNegNumber);
  methods[35].selector = @selector(_parseNumber2WithBoolean:withInt:);
  methods[36].selector = @selector(_verifyNoLeadingZeroes);
  methods[37].selector = @selector(_verifyNLZ2);
  methods[38].selector = @selector(_handleInvalidNumberStartWithInt:withBoolean:);
  methods[39].selector = @selector(_verifyRootSpaceWithInt:);
  methods[40].selector = @selector(_parseName);
  methods[41].selector = @selector(_parseName2WithInt:withInt:withInt:);
  methods[42].selector = @selector(_handleOddNameWithInt:);
  methods[43].selector = @selector(_parseAposName);
  methods[44].selector = @selector(_handleOddValueWithInt:);
  methods[45].selector = @selector(_handleApos);
  methods[46].selector = @selector(_handleOddName2WithInt:withInt:withIntArray:);
  methods[47].selector = @selector(_finishString);
  methods[48].selector = @selector(_finishString2);
  methods[49].selector = @selector(_skipString);
  methods[50].selector = @selector(_skipCR);
  methods[51].selector = @selector(_skipColon);
  methods[52].selector = @selector(_skipColon2WithBoolean:);
  methods[53].selector = @selector(_skipColonFastWithInt:);
  methods[54].selector = @selector(_skipCommaWithInt:);
  methods[55].selector = @selector(_skipAfterComma2);
  methods[56].selector = @selector(_skipWSOrEnd);
  methods[57].selector = @selector(_skipWSOrEnd2);
  methods[58].selector = @selector(_skipComment);
  methods[59].selector = @selector(_skipCComment);
  methods[60].selector = @selector(_skipYAMLComment);
  methods[61].selector = @selector(_skipLine);
  methods[62].selector = @selector(_decodeEscaped);
  methods[63].selector = @selector(_matchTrue);
  methods[64].selector = @selector(_matchFalse);
  methods[65].selector = @selector(_matchNull);
  methods[66].selector = @selector(_matchTokenWithNSString:withInt:);
  methods[67].selector = @selector(_matchToken2WithNSString:withInt:);
  methods[68].selector = @selector(_checkMatchEndWithNSString:withInt:withInt:);
  methods[69].selector = @selector(_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:);
  methods[70].selector = @selector(getTokenLocation);
  methods[71].selector = @selector(getCurrentLocation);
  methods[72].selector = @selector(_updateLocation);
  methods[73].selector = @selector(_updateNameLocation);
  methods[74].selector = @selector(_reportInvalidTokenWithNSString:);
  methods[75].selector = @selector(_reportInvalidTokenWithNSString:withNSString:);
  methods[76].selector = @selector(_closeScopeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FEAT_MASK_TRAILING_COMMA", "I", .constantValue.asLong = 0, 0x1c, -1, 56, -1, -1 },
    { "_icLatin1", "[I", .constantValue.asLong = 0, 0x1c, -1, 57, -1, -1 },
    { "_reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_inputBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_bufferRecyclable_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_symbols_", "LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_hashSeed_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_tokenIncomplete_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nameStartOffset_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nameStartRow_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nameStartCol_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreObjectReadContext;LComFasterxmlJacksonCoreIoIOContext;ILJavaIoReader;LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;[CIIZ", "LComFasterxmlJacksonCoreObjectReadContext;LComFasterxmlJacksonCoreIoIOContext;ILJavaIoReader;LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;", "releaseBuffered", "LJavaIoWriter;", "LJavaIoIOException;", "getNextChar", "LNSString;LComFasterxmlJacksonCoreJsonToken;", "getText", "getValueAsString", "LNSString;", "_getText2", "LComFasterxmlJacksonCoreJsonToken;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "readBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;", "_readBinary", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoOutputStream;[B", "nextFieldName", "LComFasterxmlJacksonCoreSerializableString;", "_isNextTokenNameYes", "I", "_isNextTokenNameMaybe", "ILNSString;", "_nextTokenNotInObject", "nextIntValue", "nextLongValue", "J", "_parsePosNumber", "_parseFloat", "IIIZI", "_parseNumber2", "ZI", "_handleInvalidNumberStart", "IZ", "_verifyRootSpace", "_parseName2", "III", "_handleOddName", "_handleOddValue", "_handleOddName2", "II[I", "_skipColon2", "Z", "_skipColonFast", "_skipComma", "_matchToken", "LNSString;I", "_matchToken2", "_checkMatchEnd", "LNSString;II", "_decodeBase64", "_reportInvalidToken", "LNSString;LNSString;", "_closeScope", "LComFasterxmlJacksonCoreJsonParseException;", &ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA, &ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonReaderBasedJsonParser = { "ReaderBasedJsonParser", "com.fasterxml.jackson.core.json", ptrTable, methods, fields, 7, 0x1, 77, 11, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonReaderBasedJsonParser class]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA = [((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA))) getMask];
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1, ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser)
  }
}

@end

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st, IOSCharArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable) {
  ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_(self, readCtxt, ctxt, features);
  JreStrongAssign(&self->_reader_, r);
  JreStrongAssign(&self->_inputBuffer_, inputBuffer);
  self->_inputPtr_ = start;
  self->_inputEnd_ = end;
  JreStrongAssign(&self->_symbols_, st);
  self->_hashSeed_ = [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(st)) hashSeed];
  self->_bufferRecyclable_ = bufferRecyclable;
}

ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *new_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st, IOSCharArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_, readCtxt, ctxt, features, r, st, inputBuffer, start, end, bufferRecyclable)
}

ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *create_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st, IOSCharArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_withCharArray_withInt_withInt_withBoolean_, readCtxt, ctxt, features, r, st, inputBuffer, start, end, bufferRecyclable)
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st) {
  ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_(self, readCtxt, ctxt, features);
  JreStrongAssign(&self->_reader_, r);
  JreStrongAssign(&self->_inputBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ctxt)) allocTokenBuffer]);
  self->_inputPtr_ = 0;
  self->_inputEnd_ = 0;
  JreStrongAssign(&self->_symbols_, st);
  self->_hashSeed_ = [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(st)) hashSeed];
  self->_bufferRecyclable_ = true;
}

ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *new_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_, readCtxt, ctxt, features, r, st)
}

ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *create_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(id<ComFasterxmlJacksonCoreObjectReadContext> readCtxt, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoReader *r, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *st) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser, initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_, readCtxt, ctxt, features, r, st)
}

NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_getText(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  ComFasterxmlJacksonCoreJsonToken *t = self->_currToken_;
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    if (self->_tokenIncomplete_) {
      self->_tokenIncomplete_ = false;
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(self);
    }
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsString];
  }
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(self, t);
}

NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__getText2WithComFasterxmlJacksonCoreJsonToken_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, ComFasterxmlJacksonCoreJsonToken *t) {
  if (t == nil) {
    return nil;
  }
  switch ([t id__]) {
    case ComFasterxmlJacksonCoreJsonTokenId_ID_FIELD_NAME:
    return [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) currentName];
    case ComFasterxmlJacksonCoreJsonTokenId_ID_STRING:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_INT:
    case ComFasterxmlJacksonCoreJsonTokenId_ID_NUMBER_FLOAT:
    return [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsString];
    default:
    return [t asString];
  }
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_nextToken(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (self->_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(self);
  }
  self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  if (self->_tokenIncomplete_) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(self);
  }
  jint i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(self);
  if (i < 0) {
    [self close];
    return (JreStrongAssign(&self->_currToken_, nil));
  }
  JreStrongAssign(&self->_binaryValue_, nil);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
    return self->_currToken_;
  }
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) expectComma]) {
    i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(self, i);
    if ((self->_features_ & ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_FEAT_MASK_TRAILING_COMMA) != 0) {
      if ((i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(self, i);
        return self->_currToken_;
      }
    }
  }
  jboolean inObject = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inObject];
  if (inObject) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(self);
    NSString *name = (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) ? ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(self) : [self _handleOddNameWithInt:i];
    [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) setCurrentNameWithNSString:name];
    JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
    i = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(self);
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
  ComFasterxmlJacksonCoreJsonToken *t;
  switch (i) {
    case '"':
    self->_tokenIncomplete_ = true;
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING);
    break;
    case '[':
    if (!inObject) {
      JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildArrayContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    }
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY);
    break;
    case '{':
    if (!inObject) {
      JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildObjectContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    }
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT);
    break;
    case '}':
    [self _reportUnexpectedCharWithInt:i withNSString:@"expected a value"];
    case 't':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE);
    break;
    case 'f':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE);
    break;
    case 'n':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(self);
    t = JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL);
    break;
    case '-':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self);
    break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    t = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, i);
    break;
    default:
    t = [self _handleOddValueWithInt:i];
    break;
  }
  if (inObject) {
    JreStrongAssign(&self->_nextToken_, t);
    return self->_currToken_;
  }
  JreStrongAssign(&self->_currToken_, t);
  return t;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextAfterName(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  self->_nameCopied_ = false;
  ComFasterxmlJacksonCoreJsonToken *t = self->_nextToken_;
  JreStrongAssign(&self->_nextToken_, nil);
  if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildArrayContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
  }
  else if (t == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)) {
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildObjectContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
  }
  return (JreStrongAssign(&self->_currToken_, t));
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__isNextTokenNameYesWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i) {
  JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME));
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
  switch (i) {
    case '"':
    self->_tokenIncomplete_ = true;
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING));
    return;
    case '[':
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY));
    return;
    case '{':
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT));
    return;
    case 't':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE));
    return;
    case 'f':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE));
    return;
    case 'n':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
    JreStrongAssign(&self->_nextToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL));
    return;
    case '-':
    JreStrongAssign(&self->_nextToken_, ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self));
    return;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    JreStrongAssign(&self->_nextToken_, ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, i));
    return;
  }
  JreStrongAssign(&self->_nextToken_, [self _handleOddValueWithInt:i]);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__nextTokenNotInObjectWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i) {
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    self->_tokenIncomplete_ = true;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)));
  }
  switch (i) {
    case '[':
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildArrayContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)));
    case '{':
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) createChildObjectContextWithInt:self->_tokenInputRow_ withInt:self->_tokenInputCol_]);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT)));
    case 't':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)));
    case 'f':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)));
    case 'n':
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)));
    case '-':
    return (JreStrongAssign(&self->_currToken_, ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(self)));
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return (JreStrongAssign(&self->_currToken_, ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(self, i)));
    case ',':
    case ']':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_MISSING_VALUES)]) {
      self->_inputPtr_--;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)));
    }
  }
  return (JreStrongAssign(&self->_currToken_, [self _handleOddValueWithInt:i]));
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parsePosNumberWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch) {
  jint ptr = self->_inputPtr_;
  jint startPtr = ptr - 1;
  jint inputLen = self->_inputEnd_;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, false, startPtr);
  }
  jint intLen = 1;
  while (true) {
    if (ptr >= inputLen) {
      self->_inputPtr_ = startPtr;
      return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, false, startPtr);
    }
    ch = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr++);
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      goto break_int_loop;
    }
    ++intLen;
  }
  break_int_loop: ;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
    self->_inputPtr_ = ptr;
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseFloatWithInt_withInt_withInt_withBoolean_withInt_(self, ch, startPtr, ptr, false, intLen);
  }
  --ptr;
  self->_inputPtr_ = ptr;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(self, ch);
  }
  jint len = ptr - startPtr;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:startPtr withInt:len];
  return [self resetIntWithBoolean:false withInt:intLen];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseFloatWithInt_withInt_withInt_withBoolean_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch, jint startPtr, jint ptr, jboolean neg, jint intLen) {
  jint inputLen = self->_inputEnd_;
  jint fractLen = 0;
  if (ch == '.') {
    while (true) {
      if (ptr >= inputLen) {
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, neg, startPtr);
      }
      ch = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr++);
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
        goto break_fract_loop;
      }
      ++fractLen;
    }
    break_fract_loop: ;
    if (fractLen == 0) {
      [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Decimal point not followed by a digit"];
    }
  }
  jint expLen = 0;
  if (ch == 'e' || ch == 'E') {
    if (ptr >= inputLen) {
      self->_inputPtr_ = startPtr;
      return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, neg, startPtr);
    }
    ch = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr++);
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_MINUS || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PLUS) {
      if (ptr >= inputLen) {
        self->_inputPtr_ = startPtr;
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, neg, startPtr);
      }
      ch = (jint) IOSCharArray_Get(self->_inputBuffer_, ptr++);
    }
    while (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && ch >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      ++expLen;
      if (ptr >= inputLen) {
        self->_inputPtr_ = startPtr;
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, neg, startPtr);
      }
      ch = (jint) IOSCharArray_Get(self->_inputBuffer_, ptr++);
    }
    if (expLen == 0) {
      [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Exponent indicator not followed by a digit"];
    }
  }
  --ptr;
  self->_inputPtr_ = ptr;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(self, ch);
  }
  jint len = ptr - startPtr;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:startPtr withInt:len];
  return [self resetFloatWithBoolean:neg withInt:intLen withInt:fractLen withInt:expLen];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNegNumber(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  jint startPtr = ptr - 1;
  jint inputLen = self->_inputEnd_;
  if (ptr >= inputLen) {
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, true, startPtr);
  }
  jint ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr++);
  if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 || ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    self->_inputPtr_ = ptr;
    return [self _handleInvalidNumberStartWithInt:ch withBoolean:true];
  }
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, true, startPtr);
  }
  jint intLen = 1;
  while (true) {
    if (ptr >= inputLen) {
      return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(self, true, startPtr);
    }
    ch = (jint) IOSCharArray_Get(self->_inputBuffer_, ptr++);
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      goto break_int_loop;
    }
    ++intLen;
  }
  break_int_loop: ;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
    self->_inputPtr_ = ptr;
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseFloatWithInt_withInt_withInt_withBoolean_withInt_(self, ch, startPtr, ptr, true, intLen);
  }
  --ptr;
  self->_inputPtr_ = ptr;
  if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inRoot]) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(self, ch);
  }
  jint len = ptr - startPtr;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:startPtr withInt:len];
  return [self resetIntWithBoolean:true withInt:intLen];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseNumber2WithBoolean_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jboolean neg, jint startPtr) {
  self->_inputPtr_ = neg ? (startPtr + 1) : startPtr;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) emptyAndGetCurrentSegment];
  jint outPtr = 0;
  if (neg) {
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = '-';
  }
  jint intLen = 0;
  jchar c = (self->_inputPtr_ < self->_inputEnd_) ? IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) : [self getNextCharWithNSString:@"No digit following minus sign" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
  if (c == '0') {
    c = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNoLeadingZeroes(self);
  }
  jboolean eof = false;
  while (c >= '0' && c <= '9') {
    ++intLen;
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [self->_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
      c = ComFasterxmlJacksonCoreBaseParserMinimalBase_CHAR_NULL;
      eof = true;
      goto break_int_loop;
    }
    c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  }
  break_int_loop: ;
  if (intLen == 0) {
    return [self _handleInvalidNumberStartWithInt:c withBoolean:neg];
  }
  jint fractLen = 0;
  if (c == '.') {
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [self->_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    while (true) {
      if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
        eof = true;
        goto break_fract_loop;
      }
      c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
      if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || c > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
        goto break_fract_loop;
      }
      ++fractLen;
      if (outPtr >= outBuf->size_) {
        outBuf = [self->_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    }
    break_fract_loop: ;
    if (fractLen == 0) {
      [self reportUnexpectedNumberCharWithInt:c withNSString:@"Decimal point not followed by a digit"];
    }
  }
  jint expLen = 0;
  if (c == 'e' || c == 'E') {
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [self->_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    c = (self->_inputPtr_ < self->_inputEnd_) ? IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) : [self getNextCharWithNSString:@"expected a digit for number exponent" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
    if (c == '-' || c == '+') {
      if (outPtr >= outBuf->size_) {
        outBuf = [self->_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
      c = (self->_inputPtr_ < self->_inputEnd_) ? IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) : [self getNextCharWithNSString:@"expected a digit for number exponent" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
    }
    while (c <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9 && c >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      ++expLen;
      if (outPtr >= outBuf->size_) {
        outBuf = [self->_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
      if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
        eof = true;
        goto break_exp_loop;
      }
      c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    }
    break_exp_loop: ;
    if (expLen == 0) {
      [self reportUnexpectedNumberCharWithInt:c withNSString:@"Exponent indicator not followed by a digit"];
    }
  }
  if (!eof) {
    --self->_inputPtr_;
    if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inRoot]) {
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(self, c);
    }
  }
  [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
  return [self resetWithBoolean:neg withInt:intLen withInt:fractLen withInt:expLen];
}

jchar ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNoLeadingZeroes(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (self->_inputPtr_ < self->_inputEnd_) {
    jchar ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
    if (ch < '0' || ch > '9') {
      return '0';
    }
  }
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNLZ2(self);
}

jchar ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyNLZ2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
    return '0';
  }
  jchar ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
  if (ch < '0' || ch > '9') {
    return '0';
  }
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NUMERIC_LEADING_ZEROS)]) {
    [self reportInvalidNumberWithNSString:@"Leading zeroes not allowed"];
  }
  ++self->_inputPtr_;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    while (self->_inputPtr_ < self->_inputEnd_ || [self _loadMore]) {
      ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
      if (ch < '0' || ch > '9') {
        return '0';
      }
      ++self->_inputPtr_;
      if (ch != '0') {
        break;
      }
    }
  }
  return ch;
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__verifyRootSpaceWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ch) {
  ++self->_inputPtr_;
  switch (ch) {
    case ' ':
    case 0x0009:
    return;
    case 0x000d:
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
    return;
    case 0x000a:
    ++self->_currInputRow_;
    self->_currInputRowStart_ = self->_inputPtr_;
    return;
  }
  [self _reportMissingRootWSWithInt:ch];
}

NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  jint hash_ = self->_hashSeed_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1;
  while (ptr < self->_inputEnd_) {
    jint ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr);
    if (ch < ((IOSIntArray *) nil_chk(codes))->size_ && IOSIntArray_Get(codes, ch) != 0) {
      if (ch == '"') {
        jint start = self->_inputPtr_;
        self->_inputPtr_ = ptr + 1;
        return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(self->_symbols_)) findSymbolWithCharArray:self->_inputBuffer_ withInt:start withInt:ptr - start withInt:hash_];
      }
      break;
    }
    hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + ch;
    ++ptr;
  }
  jint start = self->_inputPtr_;
  self->_inputPtr_ = ptr;
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName2WithInt_withInt_withInt_(self, start, hash_, ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE);
}

NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__parseName2WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint startPtr, jint hash_, jint endChar) {
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:startPtr withInt:(self->_inputPtr_ - startPtr)];
  IOSCharArray *outBuf = [self->_textBuffer_ getCurrentSegment];
  jint outPtr = [self->_textBuffer_ getCurrentSegmentSize];
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      if (![self _loadMore]) {
        [self _reportInvalidEOFWithNSString:@" in field name" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)];
      }
    }
    jchar c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    jint i = (jint) c;
    if (i <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
        c = [self _decodeEscaped];
      }
      else if (i <= endChar) {
        if (i == endChar) {
          break;
        }
        if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
          [self _throwUnquotedSpaceWithInt:i withNSString:@"name"];
        }
      }
    }
    hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + c;
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    if (outPtr >= outBuf->size_) {
      outBuf = [self->_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
  }
  [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
  {
    ComFasterxmlJacksonCoreUtilTextBuffer *tb = self->_textBuffer_;
    IOSCharArray *buf = [tb getTextBuffer];
    jint start = [tb getTextOffset];
    jint len = [tb size];
    return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(self->_symbols_)) findSymbolWithCharArray:buf withInt:start withInt:len withInt:hash_];
  }
}

NSString *ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__handleOddName2WithInt_withInt_withIntArray_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint startPtr, jint hash_, IOSIntArray *codes) {
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:startPtr withInt:(self->_inputPtr_ - startPtr)];
  IOSCharArray *outBuf = [self->_textBuffer_ getCurrentSegment];
  jint outPtr = [self->_textBuffer_ getCurrentSegmentSize];
  jint maxCode = ((IOSIntArray *) nil_chk(codes))->size_;
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      if (![self _loadMore]) {
        break;
      }
    }
    jchar c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
    jint i = (jint) c;
    if (i <= maxCode) {
      if (IOSIntArray_Get(codes, i) != 0) {
        break;
      }
    }
    else if (!JavaLangCharacter_isJavaIdentifierPartWithChar_(c)) {
      break;
    }
    ++self->_inputPtr_;
    hash_ = (hash_ * ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_HASH_MULT) + i;
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = c;
    if (outPtr >= outBuf->size_) {
      outBuf = [self->_textBuffer_ finishCurrentSegment];
      outPtr = 0;
    }
  }
  [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
  {
    ComFasterxmlJacksonCoreUtilTextBuffer *tb = self->_textBuffer_;
    IOSCharArray *buf = [tb getTextBuffer];
    jint start = [tb getTextOffset];
    jint len = [tb size];
    return [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(self->_symbols_)) findSymbolWithCharArray:buf withInt:start withInt:len withInt:hash_];
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__finishString(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  jint inputLen = self->_inputEnd_;
  if (ptr < inputLen) {
    IOSIntArray *codes = ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__icLatin1;
    jint maxCode = ((IOSIntArray *) nil_chk(codes))->size_;
    do {
      jint ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr);
      if (ch < maxCode && IOSIntArray_Get(codes, ch) != 0) {
        if (ch == '"') {
          [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithSharedWithCharArray:self->_inputBuffer_ withInt:self->_inputPtr_ withInt:(ptr - self->_inputPtr_)];
          self->_inputPtr_ = ptr + 1;
          return;
        }
        break;
      }
      ++ptr;
    }
    while (ptr < inputLen);
  }
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) resetWithCopyWithCharArray:self->_inputBuffer_ withInt:self->_inputPtr_ withInt:(ptr - self->_inputPtr_)];
  self->_inputPtr_ = ptr;
  [self _finishString2];
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipString(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  self->_tokenIncomplete_ = false;
  jint inPtr = self->_inputPtr_;
  jint inLen = self->_inputEnd_;
  IOSCharArray *inBuf = self->_inputBuffer_;
  while (true) {
    if (inPtr >= inLen) {
      self->_inputPtr_ = inPtr;
      if (![self _loadMore]) {
        [self _reportInvalidEOFWithNSString:@": was expecting closing quote for a string value" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
      inPtr = self->_inputPtr_;
      inLen = self->_inputEnd_;
    }
    jchar c = IOSCharArray_Get(nil_chk(inBuf), inPtr++);
    jint i = (jint) c;
    if (i <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
        self->_inputPtr_ = inPtr;
        [self _decodeEscaped];
        inPtr = self->_inputPtr_;
        inLen = self->_inputEnd_;
      }
      else if (i <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
          self->_inputPtr_ = inPtr;
          break;
        }
        if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
          self->_inputPtr_ = inPtr;
          [self _throwUnquotedSpaceWithInt:i withNSString:@"string value"];
        }
      }
    }
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (self->_inputPtr_ < self->_inputEnd_ || [self _loadMore]) {
    if (IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_) == 0x000a) {
      ++self->_inputPtr_;
    }
  }
  ++self->_currInputRow_;
  self->_currInputRowStart_ = self->_inputPtr_;
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if ((self->_inputPtr_ + 4) >= self->_inputEnd_) {
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, false);
  }
  jchar c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
  if (c == ':') {
    jint i = IOSCharArray_Get(self->_inputBuffer_, ++self->_inputPtr_);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
      }
      ++self->_inputPtr_;
      return i;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = (jint) IOSCharArray_Get(self->_inputBuffer_, ++self->_inputPtr_);
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
        }
        ++self->_inputPtr_;
        return i;
      }
    }
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
  }
  if (c == ' ' || c == 0x0009) {
    c = IOSCharArray_Get(self->_inputBuffer_, ++self->_inputPtr_);
  }
  if (c == ':') {
    jint i = IOSCharArray_Get(self->_inputBuffer_, ++self->_inputPtr_);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
      }
      ++self->_inputPtr_;
      return i;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = (jint) IOSCharArray_Get(self->_inputBuffer_, ++self->_inputPtr_);
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
        }
        ++self->_inputPtr_;
        return i;
      }
    }
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
  }
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, false);
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jboolean gotColon) {
  while (self->_inputPtr_ < self->_inputEnd_ || [self _loadMore]) {
    jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(self);
        continue;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        if (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(self)) {
          continue;
        }
      }
      if (gotColon) {
        return i;
      }
      if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
        [self _reportUnexpectedCharWithInt:i withNSString:@"was expecting a colon to separate field name and value"];
      }
      gotColon = true;
      continue;
    }
    if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
  [self _reportInvalidEOFWithNSString:JreStrcat("$$$", @" within/between ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) typeDesc], @" entries") withComFasterxmlJacksonCoreJsonToken:nil];
  return -1;
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColonFastWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint ptr) {
  jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), ptr++);
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
    i = IOSCharArray_Get(self->_inputBuffer_, ptr++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH && i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        self->_inputPtr_ = ptr;
        return i;
      }
    }
    else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = (jint) IOSCharArray_Get(self->_inputBuffer_, ptr++);
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH && i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          self->_inputPtr_ = ptr;
          return i;
        }
      }
    }
    self->_inputPtr_ = ptr - 1;
    return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, true);
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
    i = IOSCharArray_Get(self->_inputBuffer_, ptr++);
  }
  jboolean gotColon = i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON;
  if (gotColon) {
    i = IOSCharArray_Get(self->_inputBuffer_, ptr++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH && i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        self->_inputPtr_ = ptr;
        return i;
      }
    }
    else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      i = (jint) IOSCharArray_Get(self->_inputBuffer_, ptr++);
      if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH && i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
          self->_inputPtr_ = ptr;
          return i;
        }
      }
    }
  }
  self->_inputPtr_ = ptr - 1;
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipColon2WithBoolean_(self, gotColon);
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCommaWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i) {
  if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA) {
    [self _reportUnexpectedCharWithInt:i withNSString:JreStrcat("$$$", @"was expecting comma to separate ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) typeDesc], @" entries")];
  }
  while (self->_inputPtr_ < self->_inputEnd_) {
    i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        --self->_inputPtr_;
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipAfterComma2(self);
      }
      return i;
    }
    if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipAfterComma2(self);
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipAfterComma2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  while (self->_inputPtr_ < self->_inputEnd_ || [self _loadMore]) {
    jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(self);
        continue;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        if (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(self)) {
          continue;
        }
      }
      return i;
    }
    if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
  @throw nil_chk([self _constructErrorWithNSString:JreStrcat("$$$", @"Unexpected end-of-input within/between ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) typeDesc], @" entries")]);
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (self->_inputPtr_ >= self->_inputEnd_) {
    if (![self _loadMore]) {
      return [self _eofAsNextChar];
    }
  }
  jint i = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
      --self->_inputPtr_;
      return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(self);
    }
    return i;
  }
  if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
      ++self->_currInputRow_;
      self->_currInputRowStart_ = self->_inputPtr_;
    }
    else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
      ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
    }
    else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
      [self _throwInvalidSpaceWithInt:i];
    }
  }
  while (self->_inputPtr_ < self->_inputEnd_) {
    i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH || i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        --self->_inputPtr_;
        return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(self);
      }
      return i;
    }
    if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
  return ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(self);
}

jint ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipWSOrEnd2(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      if (![self _loadMore]) {
        return [self _eofAsNextChar];
      }
    }
    jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(self);
        continue;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
        if (ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(self)) {
          continue;
        }
      }
      return i;
    }
    else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_COMMENTS)]) {
    [self _reportUnexpectedCharWithInt:'/' withNSString:@"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"];
  }
  if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
    [self _reportInvalidEOFWithNSString:@" in a comment" withComFasterxmlJacksonCoreJsonToken:nil];
  }
  jchar c = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  if (c == '/') {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipLine(self);
  }
  else if (c == '*') {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCComment(self);
  }
  else {
    [self _reportUnexpectedCharWithInt:c withNSString:@"was expecting either '*' or '/' for a comment"];
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  while ((self->_inputPtr_ < self->_inputEnd_) || [self _loadMore]) {
    jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i <= '*') {
      if (i == '*') {
        if ((self->_inputPtr_ >= self->_inputEnd_) && ![self _loadMore]) {
          break;
        }
        if (IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_) == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
          ++self->_inputPtr_;
          return;
        }
        continue;
      }
      if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
          ++self->_currInputRow_;
          self->_currInputRowStart_ = self->_inputPtr_;
        }
        else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
          ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
        }
        else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
          [self _throwInvalidSpaceWithInt:i];
        }
      }
    }
  }
  [self _reportInvalidEOFWithNSString:@" in a comment" withComFasterxmlJacksonCoreJsonToken:nil];
}

jboolean ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipYAMLComment(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_YAML_COMMENTS)]) {
    return false;
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipLine(self);
  return true;
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipLine(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  while ((self->_inputPtr_ < self->_inputEnd_) || [self _loadMore]) {
    jint i = (jint) IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    if (i < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
        break;
      }
      else if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__skipCR(self);
        break;
      }
      else if (i != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:i];
      }
    }
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTrue(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  if ((ptr + 3) < self->_inputEnd_) {
    IOSCharArray *b = self->_inputBuffer_;
    if (IOSCharArray_Get(nil_chk(b), ptr) == 'r' && IOSCharArray_Get(b, ++ptr) == 'u' && IOSCharArray_Get(b, ++ptr) == 'e') {
      jchar c = IOSCharArray_Get(b, ++ptr);
      if (c < '0' || c == ']' || c == '}') {
        self->_inputPtr_ = ptr;
        return;
      }
    }
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"true", 1);
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchFalse(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  if ((ptr + 4) < self->_inputEnd_) {
    IOSCharArray *b = self->_inputBuffer_;
    if (IOSCharArray_Get(nil_chk(b), ptr) == 'a' && IOSCharArray_Get(b, ++ptr) == 'l' && IOSCharArray_Get(b, ++ptr) == 's' && IOSCharArray_Get(b, ++ptr) == 'e') {
      jchar c = IOSCharArray_Get(b, ++ptr);
      if (c < '0' || c == ']' || c == '}') {
        self->_inputPtr_ = ptr;
        return;
      }
    }
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"false", 1);
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchNull(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  if ((ptr + 3) < self->_inputEnd_) {
    IOSCharArray *b = self->_inputBuffer_;
    if (IOSCharArray_Get(nil_chk(b), ptr) == 'u' && IOSCharArray_Get(b, ++ptr) == 'l' && IOSCharArray_Get(b, ++ptr) == 'l') {
      jchar c = IOSCharArray_Get(b, ++ptr);
      if (c < '0' || c == ']' || c == '}') {
        self->_inputPtr_ = ptr;
        return;
      }
    }
  }
  ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(self, @"null", 1);
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchTokenWithNSString_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i) {
  jint len = [((NSString *) nil_chk(matchStr)) java_length];
  if ((self->_inputPtr_ + len) >= self->_inputEnd_) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchToken2WithNSString_withInt_(self, matchStr, i);
    return;
  }
  do {
    if (IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_) != [matchStr charAtWithInt:i]) {
      [self _reportInvalidTokenWithNSString:[matchStr java_substring:0 endIndex:i]];
    }
    ++self->_inputPtr_;
  }
  while (++i < len);
  jint ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
  if (ch >= '0' && ch != ']' && ch != '}') {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__checkMatchEndWithNSString_withInt_withInt_(self, matchStr, i, ch);
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__matchToken2WithNSString_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i) {
  jint len = [((NSString *) nil_chk(matchStr)) java_length];
  do {
    if (((self->_inputPtr_ >= self->_inputEnd_) && ![self _loadMore]) || (IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_) != [matchStr charAtWithInt:i])) {
      [self _reportInvalidTokenWithNSString:[matchStr java_substring:0 endIndex:i]];
    }
    ++self->_inputPtr_;
  }
  while (++i < len);
  if (self->_inputPtr_ >= self->_inputEnd_ && ![self _loadMore]) {
    return;
  }
  jint ch = IOSCharArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_);
  if (ch >= '0' && ch != ']' && ch != '}') {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__checkMatchEndWithNSString_withInt_withInt_(self, matchStr, i, ch);
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__checkMatchEndWithNSString_withInt_withInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, NSString *matchStr, jint i, jint c) {
  jchar ch = (jchar) c;
  if (JavaLangCharacter_isJavaIdentifierPartWithChar_(ch)) {
    [self _reportInvalidTokenWithNSString:[((NSString *) nil_chk(matchStr)) java_substring:0 endIndex:i]];
  }
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  self->_tokenInputTotal_ = self->_currInputProcessed_ + ptr;
  self->_tokenInputRow_ = self->_currInputRow_;
  self->_tokenInputCol_ = ptr - self->_currInputRowStart_;
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateNameLocation(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self) {
  jint ptr = self->_inputPtr_;
  self->_nameStartOffset_ = ptr;
  self->_nameStartRow_ = self->_currInputRow_;
  self->_nameStartCol_ = ptr - self->_currInputRowStart_;
}

void ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__closeScopeWithInt_(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser *self, jint i) {
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inArray]) {
      [self _reportMismatchedEndMarkerWithInt:i withChar:'}'];
    }
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) clearAndGetParent]);
    JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_ARRAY));
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
    ComFasterxmlJacksonCoreJsonReaderBasedJsonParser__updateLocation(self);
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) inObject]) {
      [self _reportMismatchedEndMarkerWithInt:i withChar:']'];
    }
    JreStrongAssign(&self->_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) clearAndGetParent]);
    JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, END_OBJECT));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonReaderBasedJsonParser)
