//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFormatMatchStrength")
#ifdef RESTRICT_ComFasterxmlJacksonCoreFormatMatchStrength
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFormatMatchStrength 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreFormatMatchStrength 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreFormatMatchStrength

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreFormatMatchStrength_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreFormatMatchStrength || defined(INCLUDE_ComFasterxmlJacksonCoreFormatMatchStrength))
#define ComFasterxmlJacksonCoreFormatMatchStrength_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreFormatMatchStrength_Enum) {
  ComFasterxmlJacksonCoreFormatMatchStrength_Enum_NO_MATCH = 0,
  ComFasterxmlJacksonCoreFormatMatchStrength_Enum_INCONCLUSIVE = 1,
  ComFasterxmlJacksonCoreFormatMatchStrength_Enum_WEAK_MATCH = 2,
  ComFasterxmlJacksonCoreFormatMatchStrength_Enum_SOLID_MATCH = 3,
  ComFasterxmlJacksonCoreFormatMatchStrength_Enum_FULL_MATCH = 4,
};

/*!
 @brief Enumeration used to indicate strength of match between data format
  and piece of data (typically beginning of a data file).
 Values are in increasing match strength; and detectors should return
  "strongest" value: that is, it should start with strongest match
  criteria, and downgrading if criteria is not fulfilled.
 */
@interface ComFasterxmlJacksonCoreFormatMatchStrength : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonCoreFormatMatchStrength *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreFormatMatchStrength)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_values_[];

/*!
 @brief Value that indicates that given data can not be in given format.
 */
inline ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_get_NO_MATCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreFormatMatchStrength, NO_MATCH)

/*!
 @brief Value that indicates that detector can not find out whether could
  be a match or not.
 This can occur for example for textual data formats t
  when there are so many leading spaces that detector can not
  find the first data byte (because detectors typically limit lookahead
  to some smallish value).
 */
inline ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_get_INCONCLUSIVE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreFormatMatchStrength, INCONCLUSIVE)

/*!
 @brief Value that indicates that given data could be of specified format (i.e.
 it can not be ruled out). This can occur for example when seen data
  is both not in canonical formats (for example: JSON data should be a JSON Array or Object
  not a scalar value, as per JSON specification) and there are known use case
  where a format detected is actually used (plain JSON Strings are actually used, even
  though specification does not indicate that as valid usage: as such, seeing a leading
  double-quote could indicate a JSON String, which plausibly <b>could</b> indicate
  non-standard JSON usage).
 */
inline ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_get_WEAK_MATCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreFormatMatchStrength, WEAK_MATCH)

/*!
 @brief Value that indicates that given data conforms to (one of) canonical form(s) of
  the data format.
 <p>
  For example, when testing for XML data format,
  seeing a less-than character ("&lt;") alone (with possible leading spaces)
  would be a strong indication that data could
  be in xml format (but see below for <code>FULL_MATCH</code> description for more)
 */
inline ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_get_SOLID_MATCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreFormatMatchStrength, SOLID_MATCH)

/*!
 @brief Value that indicates that given data contains a signature that is deemed
  specific enough to uniquely indicate data format used.
 <p>
  For example, when testing for XML data format,
  seing "&lt;xml" as the first data bytes ("XML declaration", as per XML specification)
  could give full confidence that data is indeed in XML format.
  Not all data formats have unique leading identifiers to allow full matches; for example,
  JSON only has heuristic matches and can have at most <code>SOLID_MATCH</code>) match.
 */
inline ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_get_FULL_MATCH(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreFormatMatchStrength, FULL_MATCH)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreFormatMatchStrength_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreFormatMatchStrength *ComFasterxmlJacksonCoreFormatMatchStrength_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreFormatMatchStrength)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreFormatMatchStrength")
