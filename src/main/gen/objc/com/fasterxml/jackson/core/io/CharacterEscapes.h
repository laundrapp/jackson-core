//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoCharacterEscapes")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoCharacterEscapes
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoCharacterEscapes 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoCharacterEscapes 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoCharacterEscapes

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoCharacterEscapes_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoCharacterEscapes || defined(INCLUDE_ComFasterxmlJacksonCoreIoCharacterEscapes))
#define ComFasterxmlJacksonCoreIoCharacterEscapes_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSIntArray;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief Abstract base class that defines interface for customizing character
  escaping aspects for String values, for formats that use escaping.
 For JSON this applies to both property names and String values.
 */
@interface ComFasterxmlJacksonCoreIoCharacterEscapes : NSObject < JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method generators can call to get lookup table for determining
  escape handling for first 128 characters of Unicode (ASCII
  characters.Caller is not to modify contents of this array, since
  this is expected to be a shared copy.
 @return Array with size of at least 128, where first 128 entries
     have either one of <code>ESCAPE_xxx</code> constants, or non-zero positive
     integer (meaning of which is data format specific; for JSON it means
     that combination of backslash and character with that value is to be used)
     to indicate that specific escape sequence is to be used.
 */
- (IOSIntArray *)getEscapeCodesForAscii;

/*!
 @brief Method generators can call to get lookup table for determining
  exact escape sequence to use for given character.
 It can be called for any character, but typically is called for
  either for ASCII characters for which custom escape
  sequence is needed; or for any non-ASCII character.
 */
- (id<ComFasterxmlJacksonCoreSerializableString>)getEscapeSequenceWithInt:(jint)ch;

/*!
 @brief Helper method that can be used to get a copy of standard JSON
  escape definitions; this is useful when just wanting to slightly
  customize definitions.Caller can modify this array as it sees
  fit and usually returns modified instance via <code>getEscapeCodesForAscii</code>
 */
+ (IOSIntArray *)standardAsciiEscapesForJSON;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreIoCharacterEscapes)

/*!
 @brief Value used for lookup tables to indicate that matching characters
  do not need to be escaped.
 */
inline jint ComFasterxmlJacksonCoreIoCharacterEscapes_get_ESCAPE_NONE(void);
#define ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoCharacterEscapes, ESCAPE_NONE, jint)

/*!
 @brief Value used for lookup tables to indicate that matching characters
  are to be escaped using standard escaping; for JSON this means
  (for example) using "backslash - u" escape method.
 */
inline jint ComFasterxmlJacksonCoreIoCharacterEscapes_get_ESCAPE_STANDARD(void);
#define ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD -1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoCharacterEscapes, ESCAPE_STANDARD, jint)

/*!
 @brief Value used for lookup tables to indicate that matching characters
  will need custom escapes; and that another call
  to <code>getEscapeSequence</code> is needed to figure out exact escape
  sequence to output.
 */
inline jint ComFasterxmlJacksonCoreIoCharacterEscapes_get_ESCAPE_CUSTOM(void);
#define ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM -2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoCharacterEscapes, ESCAPE_CUSTOM, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoCharacterEscapes_init(ComFasterxmlJacksonCoreIoCharacterEscapes *self);

FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreIoCharacterEscapes_standardAsciiEscapesForJSON(void);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoCharacterEscapes)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoCharacterEscapes")
