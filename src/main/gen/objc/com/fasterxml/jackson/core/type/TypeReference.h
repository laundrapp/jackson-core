//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/type/TypeReference.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeTypeReference")
#ifdef RESTRICT_ComFasterxmlJacksonCoreTypeTypeReference
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeTypeReference 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreTypeTypeReference 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreTypeTypeReference

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreTypeTypeReference_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreTypeTypeReference || defined(INCLUDE_ComFasterxmlJacksonCoreTypeTypeReference))
#define ComFasterxmlJacksonCoreTypeTypeReference_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@protocol JavaLangReflectType;

/*!
 @brief This generic abstract class is used for obtaining full generics type information
  by sub-classing; it must be converted to <code>ResolvedType</code> implementation
  (implemented by <code>JavaType</code> from "databind" bundle) to be used.
 Class is based on ideas from 
 <a href="http://gafter.blogspot.com/2006/12/super-type-tokens.html">
 http://gafter.blogspot.com/2006/12/super-type-tokens.html</a>,
  Additional idea (from a suggestion made in comments of the article)
  is to require bogus implementation of <code>Comparable</code>
  (any such generic interface would do, as long as it forces a method
  with generic type to be implemented).
  to ensure that a Type argument is indeed given.
 <p>
  Usage is by sub-classing: here is one way to instantiate reference
  to generic type <code>List&lt;Integer&gt;</code>:
 @code

   TypeReference ref = new TypeReference&lt;List&lt;Integer&gt;&gt;() { };
 
@endcode
  which can be passed to methods that accept TypeReference, or resolved
  using <code>TypeFactory</code> to obtain <code>ResolvedType</code>.
 */
@interface ComFasterxmlJacksonCoreTypeTypeReference : NSObject < JavaLangComparable > {
 @public
  id<JavaLangReflectType> _type_;
}

#pragma mark Public

/*!
 @brief The only reason we define this method (and require implementation
  of <code>Comparable</code>) is to prevent constructing a
  reference without type information.
 */
- (jint)compareToWithId:(ComFasterxmlJacksonCoreTypeTypeReference *)o;

- (id<JavaLangReflectType>)getType;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreTypeTypeReference)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreTypeTypeReference, _type_, id<JavaLangReflectType>)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreTypeTypeReference_init(ComFasterxmlJacksonCoreTypeTypeReference *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreTypeTypeReference)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreTypeTypeReference")
