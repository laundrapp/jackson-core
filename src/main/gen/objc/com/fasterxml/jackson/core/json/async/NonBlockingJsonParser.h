//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser || defined(INCLUDE_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser))
#define ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_

#define RESTRICT_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase 1
#define INCLUDE_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase 1
#include "com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.h"

#define RESTRICT_ComFasterxmlJacksonCoreAsyncByteArrayFeeder 1
#define INCLUDE_ComFasterxmlJacksonCoreAsyncByteArrayFeeder 1
#include "com/fasterxml/jackson/core/async/ByteArrayFeeder.h"

@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class JavaIoOutputStream;

@interface ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser : ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase < ComFasterxmlJacksonCoreAsyncByteArrayFeeder > {
 @public
  /*!
   @brief This buffer is actually provided via <code>NonBlockingInputFeeder</code>
   */
  IOSByteArray *_inputBuffer_;
  /*!
   @brief In addition to current buffer pointer, and end pointer,
  we will also need to know number of bytes originally
  contained.This is needed to correctly update location
  information when the block has been completed.
   */
  jint _origBufferLen_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)parserFeatures
                withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym;

- (void)endOfInput;

- (void)feedInputWithByteArray:(IOSByteArray *)buf
                       withInt:(jint)start
                       withInt:(jint)end;

- (id<ComFasterxmlJacksonCoreAsyncByteArrayFeeder>)getNonBlockingInputFeeder;

- (jboolean)needMoreInput;

- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Protected

- (jchar)_decodeEscaped;

- (ComFasterxmlJacksonCoreJsonToken *)_finishErrorToken;

- (ComFasterxmlJacksonCoreJsonToken *)_finishErrorTokenWithEOF;

- (ComFasterxmlJacksonCoreJsonToken *)_finishFieldWithEscape;

- (ComFasterxmlJacksonCoreJsonToken *)_finishFloatExponentWithBoolean:(jboolean)checkSign
                                                              withInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_finishFloatFraction;

- (ComFasterxmlJacksonCoreJsonToken *)_finishKeywordTokenWithNSString:(NSString *)expToken
                                                              withInt:(jint)matched
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)result;

- (ComFasterxmlJacksonCoreJsonToken *)_finishKeywordTokenWithEOFWithNSString:(NSString *)expToken
                                                                     withInt:(jint)matched
                                        withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)result;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNonStdTokenWithInt:(jint)type
                                                        withInt:(jint)matched;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNonStdTokenWithEOFWithInt:(jint)type
                                                               withInt:(jint)matched;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberIntegralPartWithCharArray:(IOSCharArray *)outBuf
                                                                     withInt:(jint)outPtr;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberLeadingNegZeroes;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberLeadingZeroes;

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberMinusWithInt:(jint)ch;

/*!
 @brief Method called when decoding of a token has been started, but not yet completed due
  to missing input; method is to continue decoding due to at least one more byte
  being made available to decode.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_finishToken;

/*!
 @brief Method similar to <code>_finishToken</code>, but called when no more input is
  available, and end-of-input has been detected.This is usually problem
  case, but not always: root-level values may be properly terminated by
  this, and similarly trailing white-space may have been skipped.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_finishTokenWithEOF;

- (ComFasterxmlJacksonCoreJsonToken *)_reportErrorTokenWithNSString:(NSString *)actualToken;

- (ComFasterxmlJacksonCoreJsonToken *)_startAposString;

- (ComFasterxmlJacksonCoreJsonToken *)_startFalseToken;

- (ComFasterxmlJacksonCoreJsonToken *)_startFloatWithCharArray:(IOSCharArray *)outBuf
                                                       withInt:(jint)outPtr
                                                       withInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_startNegativeNumber;

- (ComFasterxmlJacksonCoreJsonToken *)_startNullToken;

- (ComFasterxmlJacksonCoreJsonToken *)_startNumberLeadingZero;

- (ComFasterxmlJacksonCoreJsonToken *)_startPositiveNumberWithInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_startString;

- (ComFasterxmlJacksonCoreJsonToken *)_startTrueToken;

- (ComFasterxmlJacksonCoreJsonToken *)_startUnexpectedValueWithBoolean:(jboolean)leadingComma
                                                               withInt:(jint)ch;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser, _inputBuffer_, IOSByteArray *)

inline IOSIntArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_get__icLatin1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser, _icLatin1, IOSIntArray *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *new_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *create_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser")
