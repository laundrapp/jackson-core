//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/NameN.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymNameN")
#ifdef RESTRICT_ComFasterxmlJacksonCoreSymNameN
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymNameN 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymNameN 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreSymNameN

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreSymNameN_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreSymNameN || defined(INCLUDE_ComFasterxmlJacksonCoreSymNameN))
#define ComFasterxmlJacksonCoreSymNameN_

#define RESTRICT_ComFasterxmlJacksonCoreSymName 1
#define INCLUDE_ComFasterxmlJacksonCoreSymName 1
#include "com/fasterxml/jackson/core/sym/Name.h"

@class IOSIntArray;

/*!
 @brief Generic implementation of PName used for "long" names, where long
  means that its byte (UTF-8) representation is 13 bytes or more.
 */
@interface ComFasterxmlJacksonCoreSymNameN : ComFasterxmlJacksonCoreSymName

#pragma mark Public

+ (ComFasterxmlJacksonCoreSymNameN *)constructWithNSString:(NSString *)name
                                                   withInt:(jint)hash_
                                              withIntArray:(IOSIntArray *)q
                                                   withInt:(jint)qlen;

- (jboolean)equalsWithInt:(jint)quad;

- (jboolean)equalsWithInt:(jint)quad1
                  withInt:(jint)quad2;

- (jboolean)equalsWithInt:(jint)quad1
                  withInt:(jint)quad2
                  withInt:(jint)quad3;

- (jboolean)equalsWithIntArray:(IOSIntArray *)quads
                       withInt:(jint)len;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)hash_
                                   withInt:(jint)q1
                                   withInt:(jint)q2
                                   withInt:(jint)q3
                                   withInt:(jint)q4
                              withIntArray:(IOSIntArray *)quads
                                   withInt:(jint)quadLen;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                                   withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymNameN)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreSymNameN_initWithNSString_withInt_withInt_withInt_withInt_withInt_withIntArray_withInt_(ComFasterxmlJacksonCoreSymNameN *self, NSString *name, jint hash_, jint q1, jint q2, jint q3, jint q4, IOSIntArray *quads, jint quadLen);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymNameN *new_ComFasterxmlJacksonCoreSymNameN_initWithNSString_withInt_withInt_withInt_withInt_withInt_withIntArray_withInt_(NSString *name, jint hash_, jint q1, jint q2, jint q3, jint q4, IOSIntArray *quads, jint quadLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymNameN *create_ComFasterxmlJacksonCoreSymNameN_initWithNSString_withInt_withInt_withInt_withInt_withInt_withIntArray_withInt_(NSString *name, jint hash_, jint q1, jint q2, jint q3, jint q4, IOSIntArray *quads, jint quadLen);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymNameN *ComFasterxmlJacksonCoreSymNameN_constructWithNSString_withInt_withIntArray_withInt_(NSString *name, jint hash_, IOSIntArray *q, jint qlen);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymNameN)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymNameN")
