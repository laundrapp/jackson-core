//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/CharTypes.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/CharacterEscapes.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

inline IOSCharArray *ComFasterxmlJacksonCoreIoCharTypes_get_HC(void);
static IOSCharArray *ComFasterxmlJacksonCoreIoCharTypes_HC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, HC, IOSCharArray *)

inline IOSByteArray *ComFasterxmlJacksonCoreIoCharTypes_get_HB(void);
static IOSByteArray *ComFasterxmlJacksonCoreIoCharTypes_HB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, HB, IOSByteArray *)

/*!
 @brief Lookup table used for determining which input characters
  need special handling when contained in text segment.
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodes(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodes, IOSIntArray *)

/*!
 @brief Additionally we can combine UTF-8 decoding info into similar
  data table.
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodesUTF8(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodesUTF8, IOSIntArray *)

/*!
 @brief To support non-default (and -standard) unquoted field names mode,
  need to have alternate checking.
 Basically this is list of 8-bit ASCII characters that are legal
  as part of Javascript identifier
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodesJsNames(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodesJsNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodesJsNames, IOSIntArray *)

/*!
 @brief This table is similar to Latin-1, except that it marks all "high-bit"
  code as ok.They will be validated at a later point, when decoding
  name
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodesUtf8JsNames(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUtf8JsNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodesUtf8JsNames, IOSIntArray *)

/*!
 @brief Decoding table used to quickly determine characters that are
  relevant within comment content.
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodesComment(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodesComment;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodesComment, IOSIntArray *)

/*!
 @brief Decoding table used for skipping white space and comments.
 @since 2.3
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sInputCodesWS(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sInputCodesWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sInputCodesWS, IOSIntArray *)

/*!
 @brief Lookup table used for determining which output characters in
  7-bit ASCII range need to be quoted.
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sOutputEscapes128(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sOutputEscapes128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sOutputEscapes128, IOSIntArray *)

/*!
 @brief Lookup table for the first 128 Unicode characters (7-bit ASCII)
  range.For actual hex digits, contains corresponding value;
  for others -1.
 */
inline IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get_sHexValues(void);
static IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_sHexValues;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoCharTypes, sHexValues, IOSIntArray *)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreIoCharTypes)

@implementation ComFasterxmlJacksonCoreIoCharTypes

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreIoCharTypes_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSIntArray *)getInputCodeLatin1 {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1();
}

+ (IOSIntArray *)getInputCodeUtf8 {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8();
}

+ (IOSIntArray *)getInputCodeLatin1JsNames {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1JsNames();
}

+ (IOSIntArray *)getInputCodeUtf8JsNames {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8JsNames();
}

+ (IOSIntArray *)getInputCodeComment {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeComment();
}

+ (IOSIntArray *)getInputCodeWS {
  return ComFasterxmlJacksonCoreIoCharTypes_getInputCodeWS();
}

+ (IOSIntArray *)get7BitOutputEscapes {
  return ComFasterxmlJacksonCoreIoCharTypes_get7BitOutputEscapes();
}

+ (jint)charToHexWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
}

+ (void)appendQuotedWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)content {
  ComFasterxmlJacksonCoreIoCharTypes_appendQuotedWithJavaLangStringBuilder_withNSString_(sb, content);
}

+ (IOSCharArray *)copyHexChars {
  return ComFasterxmlJacksonCoreIoCharTypes_copyHexChars();
}

+ (IOSByteArray *)copyHexBytes {
  return ComFasterxmlJacksonCoreIoCharTypes_copyHexBytes();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInputCodeLatin1);
  methods[2].selector = @selector(getInputCodeUtf8);
  methods[3].selector = @selector(getInputCodeLatin1JsNames);
  methods[4].selector = @selector(getInputCodeUtf8JsNames);
  methods[5].selector = @selector(getInputCodeComment);
  methods[6].selector = @selector(getInputCodeWS);
  methods[7].selector = @selector(get7BitOutputEscapes);
  methods[8].selector = @selector(charToHexWithInt:);
  methods[9].selector = @selector(appendQuotedWithJavaLangStringBuilder:withNSString:);
  methods[10].selector = @selector(copyHexChars);
  methods[11].selector = @selector(copyHexBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HC", "[C", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "HB", "[B", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "sInputCodes", "[I", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "sInputCodesUTF8", "[I", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "sInputCodesJsNames", "[I", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "sInputCodesUtf8JsNames", "[I", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "sInputCodesComment", "[I", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "sInputCodesWS", "[I", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "sOutputEscapes128", "[I", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "sHexValues", "[I", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "charToHex", "I", "appendQuoted", "LJavaLangStringBuilder;LNSString;", &ComFasterxmlJacksonCoreIoCharTypes_HC, &ComFasterxmlJacksonCoreIoCharTypes_HB, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodes, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodesJsNames, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUtf8JsNames, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodesComment, &ComFasterxmlJacksonCoreIoCharTypes_sInputCodesWS, &ComFasterxmlJacksonCoreIoCharTypes_sOutputEscapes128, &ComFasterxmlJacksonCoreIoCharTypes_sHexValues };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreIoCharTypes = { "CharTypes", "com.fasterxml.jackson.core.io", ptrTable, methods, fields, 7, 0x11, 12, 10, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreIoCharTypes;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreIoCharTypes class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_HC, [@"0123456789ABCDEF" java_toCharArray]);
    {
      jint len = ((IOSCharArray *) nil_chk(ComFasterxmlJacksonCoreIoCharTypes_HC))->size_;
      JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreIoCharTypes_HB, [IOSByteArray newArrayWithLength:len]);
      for (jint i = 0; i < len; ++i) {
        *IOSByteArray_GetRef(ComFasterxmlJacksonCoreIoCharTypes_HB, i) = (jbyte) IOSCharArray_Get(ComFasterxmlJacksonCoreIoCharTypes_HC, i);
      }
    }
    {
      IOSIntArray *table = [IOSIntArray arrayWithLength:256];
      for (jint i = 0; i < 32; ++i) {
        *IOSIntArray_GetRef(table, i) = -1;
      }
      *IOSIntArray_GetRef(table, '"') = 1;
      *IOSIntArray_GetRef(table, '\\') = 1;
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodes, table);
    }
    {
      IOSIntArray *table = [IOSIntArray arrayWithLength:ComFasterxmlJacksonCoreIoCharTypes_sInputCodes->size_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComFasterxmlJacksonCoreIoCharTypes_sInputCodes, 0, table, 0, table->size_);
      for (jint c = 128; c < 256; ++c) {
        jint code;
        if ((c & (jint) 0xE0) == (jint) 0xC0) {
          code = 2;
        }
        else if ((c & (jint) 0xF0) == (jint) 0xE0) {
          code = 3;
        }
        else if ((c & (jint) 0xF8) == (jint) 0xF0) {
          code = 4;
        }
        else {
          code = -1;
        }
        *IOSIntArray_GetRef(table, c) = code;
      }
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8, table);
    }
    {
      IOSIntArray *table = [IOSIntArray arrayWithLength:256];
      JavaUtilArrays_fillWithIntArray_withInt_(table, -1);
      for (jint i = 33; i < 256; ++i) {
        if (JavaLangCharacter_isJavaIdentifierPartWithChar_((jchar) i)) {
          *IOSIntArray_GetRef(table, i) = 0;
        }
      }
      *IOSIntArray_GetRef(table, '@') = 0;
      *IOSIntArray_GetRef(table, '#') = 0;
      *IOSIntArray_GetRef(table, '*') = 0;
      *IOSIntArray_GetRef(table, '-') = 0;
      *IOSIntArray_GetRef(table, '+') = 0;
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodesJsNames, table);
    }
    {
      IOSIntArray *table = [IOSIntArray arrayWithLength:256];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComFasterxmlJacksonCoreIoCharTypes_sInputCodesJsNames, 0, table, 0, table->size_);
      JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(table, 128, 128, 0);
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUtf8JsNames, table);
    }
    {
      IOSIntArray *buf = [IOSIntArray arrayWithLength:256];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8, 128, buf, 128, 128);
      JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(buf, 0, 32, -1);
      *IOSIntArray_GetRef(buf, 0x0009) = 0;
      *IOSIntArray_GetRef(buf, 0x000a) = 0x000a;
      *IOSIntArray_GetRef(buf, 0x000d) = 0x000d;
      *IOSIntArray_GetRef(buf, '*') = '*';
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodesComment, buf);
    }
    {
      IOSIntArray *buf = [IOSIntArray arrayWithLength:256];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8, 128, buf, 128, 128);
      JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(buf, 0, 32, -1);
      *IOSIntArray_GetRef(buf, ' ') = 1;
      *IOSIntArray_GetRef(buf, 0x0009) = 1;
      *IOSIntArray_GetRef(buf, 0x000a) = 0x000a;
      *IOSIntArray_GetRef(buf, 0x000d) = 0x000d;
      *IOSIntArray_GetRef(buf, '/') = '/';
      *IOSIntArray_GetRef(buf, '#') = '#';
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sInputCodesWS, buf);
    }
    {
      IOSIntArray *table = [IOSIntArray arrayWithLength:128];
      for (jint i = 0; i < 32; ++i) {
        *IOSIntArray_GetRef(table, i) = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
      }
      *IOSIntArray_GetRef(table, '"') = '"';
      *IOSIntArray_GetRef(table, '\\') = '\\';
      *IOSIntArray_GetRef(table, (jint) 0x08) = 'b';
      *IOSIntArray_GetRef(table, (jint) 0x09) = 't';
      *IOSIntArray_GetRef(table, (jint) 0x0C) = 'f';
      *IOSIntArray_GetRef(table, (jint) 0x0A) = 'n';
      *IOSIntArray_GetRef(table, (jint) 0x0D) = 'r';
      JreStrongAssign(&ComFasterxmlJacksonCoreIoCharTypes_sOutputEscapes128, table);
    }
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreIoCharTypes_sHexValues, [IOSIntArray newArrayWithLength:128]);
    {
      JavaUtilArrays_fillWithIntArray_withInt_(ComFasterxmlJacksonCoreIoCharTypes_sHexValues, -1);
      for (jint i = 0; i < 10; ++i) {
        *IOSIntArray_GetRef(ComFasterxmlJacksonCoreIoCharTypes_sHexValues, '0' + i) = i;
      }
      for (jint i = 0; i < 6; ++i) {
        *IOSIntArray_GetRef(ComFasterxmlJacksonCoreIoCharTypes_sHexValues, 'a' + i) = 10 + i;
        *IOSIntArray_GetRef(ComFasterxmlJacksonCoreIoCharTypes_sHexValues, 'A' + i) = 10 + i;
      }
    }
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreIoCharTypes)
  }
}

@end

void ComFasterxmlJacksonCoreIoCharTypes_init(ComFasterxmlJacksonCoreIoCharTypes *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreIoCharTypes *new_ComFasterxmlJacksonCoreIoCharTypes_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreIoCharTypes, init)
}

ComFasterxmlJacksonCoreIoCharTypes *create_ComFasterxmlJacksonCoreIoCharTypes_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreIoCharTypes, init)
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodes;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUTF8;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1JsNames() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodesJsNames;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8JsNames() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodesUtf8JsNames;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeComment() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodesComment;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_getInputCodeWS() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sInputCodesWS;
}

IOSIntArray *ComFasterxmlJacksonCoreIoCharTypes_get7BitOutputEscapes() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return ComFasterxmlJacksonCoreIoCharTypes_sOutputEscapes128;
}

jint ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(jint ch) {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return (ch > 127) ? -1 : IOSIntArray_Get(nil_chk(ComFasterxmlJacksonCoreIoCharTypes_sHexValues), ch);
}

void ComFasterxmlJacksonCoreIoCharTypes_appendQuotedWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *content) {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  IOSIntArray *escCodes = ComFasterxmlJacksonCoreIoCharTypes_sOutputEscapes128;
  jint escLen = ((IOSIntArray *) nil_chk(escCodes))->size_;
  for (jint i = 0, len = [((NSString *) nil_chk(content)) java_length]; i < len; ++i) {
    jchar c = [content charAtWithInt:i];
    if (c >= escLen || IOSIntArray_Get(escCodes, c) == 0) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
      continue;
    }
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\\'];
    jint escCode = IOSIntArray_Get(escCodes, c);
    if (escCode < 0) {
      [sb appendWithChar:'u'];
      [sb appendWithChar:'0'];
      [sb appendWithChar:'0'];
      jint value = c;
      [sb appendWithChar:IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreIoCharTypes_HC), JreRShift32(value, 4))];
      [sb appendWithChar:IOSCharArray_Get(ComFasterxmlJacksonCoreIoCharTypes_HC, value & (jint) 0xF)];
    }
    else {
      [sb appendWithChar:(jchar) escCode];
    }
  }
}

IOSCharArray *ComFasterxmlJacksonCoreIoCharTypes_copyHexChars() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return [((IOSCharArray *) nil_chk(ComFasterxmlJacksonCoreIoCharTypes_HC)) java_clone];
}

IOSByteArray *ComFasterxmlJacksonCoreIoCharTypes_copyHexBytes() {
  ComFasterxmlJacksonCoreIoCharTypes_initialize();
  return [((IOSByteArray *) nil_chk(ComFasterxmlJacksonCoreIoCharTypes_HB)) java_clone];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreIoCharTypes)
