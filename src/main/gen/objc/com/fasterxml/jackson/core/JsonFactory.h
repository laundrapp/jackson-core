//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonFactory
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonFactory_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory || defined(INCLUDE_ComFasterxmlJacksonCoreJsonFactory))
#define ComFasterxmlJacksonCoreJsonFactory_

#define RESTRICT_ComFasterxmlJacksonCoreVersioned 1
#define INCLUDE_ComFasterxmlJacksonCoreVersioned 1
#include "com/fasterxml/jackson/core/Versioned.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreFormatMatchStrength;
@class ComFasterxmlJacksonCoreIoCharacterEscapes;
@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreIoInputDecorator;
@class ComFasterxmlJacksonCoreIoOutputDecorator;
@class ComFasterxmlJacksonCoreJsonEncoding;
@class ComFasterxmlJacksonCoreJsonFactory_Feature;
@class ComFasterxmlJacksonCoreJsonGenerator;
@class ComFasterxmlJacksonCoreJsonGenerator_Feature;
@class ComFasterxmlJacksonCoreJsonParser;
@class ComFasterxmlJacksonCoreJsonParser_Feature;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;
@class ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;
@class ComFasterxmlJacksonCoreUtilBufferRecycler;
@class ComFasterxmlJacksonCoreVersion;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaNetURL;
@protocol ComFasterxmlJacksonCoreFormatInputAccessor;
@protocol ComFasterxmlJacksonCoreFormatSchema;
@protocol ComFasterxmlJacksonCoreSerializableString;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;

/*!
 @brief The main factory class of Jackson package, used to configure and
  construct reader (aka parser, <code>JsonParser</code>)
  and writer (aka generator, <code>JsonGenerator</code>)
  instances.
 <p>
  Factory instances are thread-safe and reusable after configuration
  (if any). Typically applications and services use only a single
  globally shared factory instance, unless they need differently
  configured factories. Factory reuse is important if efficiency matters;
  most recycling of expensive construct is done on per-factory basis.
 <p>
  Creation of a factory instance is a light-weight operation,
  and since there is no need for pluggable alternative implementations
  (as there is no "standard" JSON processor API to implement),
  the default constructor is used for constructing factory
  instances.
 @author Tatu Saloranta
 */
@interface ComFasterxmlJacksonCoreJsonFactory : NSObject < ComFasterxmlJacksonCoreVersioned, JavaIoSerializable > {
 @public
  /*!
   @brief Each factory comes equipped with a shared root symbol table.
   It should not be linked back to the original blueprint, to
  avoid contents from leaking between factories.
   */
  ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *_rootCharSymbols_;
  /*!
   @brief Alternative to the basic symbol table, some stream-based
  parsers use different name canonicalization method.
   <p>
  TODO: should clean up this; looks messy having 2 alternatives
  with not very clear differences.
   @since 2.6.0
   */
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *_byteSymbolCanonicalizer_;
  /*!
   @brief Object that implements conversion functionality between
  Java objects and JSON content.For base JsonFactory implementation
  usually not set by default, but can be explicitly set.
   Sub-classes (like @@link org.codehaus.jackson.map.MappingJsonFactory}
  usually provide an implementation.
   */
  ComFasterxmlJacksonCoreObjectCodec *_objectCodec_;
  /*!
   @brief Currently enabled factory features.
   */
  jint _factoryFeatures_;
  /*!
   @brief Currently enabled parser features.
   */
  jint _parserFeatures_;
  /*!
   @brief Currently enabled generator features.
   */
  jint _generatorFeatures_;
  /*!
   @brief Definition of custom character escapes to use for generators created
  by this factory, if any.If null, standard data format specific
  escapes are used.
   */
  ComFasterxmlJacksonCoreIoCharacterEscapes *_characterEscapes_;
  /*!
   @brief Optional helper object that may decorate input sources, to do
  additional processing on input during parsing.
   */
  ComFasterxmlJacksonCoreIoInputDecorator *_inputDecorator_;
  /*!
   @brief Optional helper object that may decorate output object, to do
  additional processing on output during content generation.
   */
  ComFasterxmlJacksonCoreIoOutputDecorator *_outputDecorator_;
  /*!
   @brief Separator used between root-level values, if any; null indicates
  "do not add separator".
   Default separator is a single space character.
   @since 2.1
   */
  id<ComFasterxmlJacksonCoreSerializableString> _rootValueSeparator_;
}

#pragma mark Public

/*!
 @brief Default constructor used to create factory instances.
 Creation of a factory instance is a light-weight operation,
  but it is still a good idea to reuse limited number of
  factory instances (and quite often just a single instance):
  factories are used as context for storing some reused
  processing objects (such as symbol tables parsers use)
  and this reuse only works within context of a single
  factory instance.
 */
- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)oc;

/*!
 @brief Method used by factory to create buffer recycler instances
  for parsers and generators.
 <p>
  Note: only public to give access for <code>ObjectMapper</code>
 */
- (ComFasterxmlJacksonCoreUtilBufferRecycler *)_getBufferRecycler;

/*!
 @brief Introspection method that higher-level functionality may call
  to see whether underlying data format can read and write binary
  data natively; that is, embeded it as-is without using encodings
  such as Base64.
 <p>
  Default implementation returns <code>false</code> as JSON does not
  support native access: all binary content must use Base64 encoding.
  Most binary formats (like Smile and Avro) support native binary content.
 @since 2.3
 */
- (jboolean)canHandleBinaryNatively;

/*!
 @brief Introspection method that can be used to check whether this
  factory can create non-blocking parsers: parsers that do not
  use blocking I/O abstractions but instead use a 
 <code>com.fasterxml.jackson.core.async.NonBlockingInputFeeder</code>.
 @since 2.9
 */
- (jboolean)canParseAsync;

/*!
 @brief Introspection method that can be used by base factory to check
  whether access using <code>char[]</code> is something that actual
  parser implementations can take advantage of, over having to
  use <code>java.io.Reader</code>.Sub-types are expected to override
  definition; default implementation (suitable for JSON) alleges
  that optimization are possible; and thereby is likely to try
  to access <code>java.lang.String</code> content by first copying it into
  recyclable intermediate buffer.
 @since 2.4
 */
- (jboolean)canUseCharArrays;

/*!
 @brief Method that can be used to quickly check whether given schema
  is something that parsers and/or generators constructed by this
  factory could use.Note that this means possible use, at the level
  of data format (i.e. schema is for same data format as parsers and
  generators this factory constructs); individual schema instances
  may have further usage restrictions.
 @since 2.1
 */
- (jboolean)canUseSchemaWithComFasterxmlJacksonCoreFormatSchema:(id<ComFasterxmlJacksonCoreFormatSchema>)schema;

/*!
 @brief Method for enabling or disabling specified parser feature
  (check <code>JsonParser.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)configureWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f
                                                                                    withBoolean:(jboolean)state;

/*!
 @brief Method for enabling or disabling specified parser feature
  (check <code>JsonParser.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)configureWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f
                                                                                   withBoolean:(jboolean)state;

/*!
 @brief Method for enabling or disabling specified generator feature
  (check <code>JsonGenerator.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)configureWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f
                                                                                      withBoolean:(jboolean)state;

/*!
 @brief Method for constructing a new <code>JsonFactory</code> that has
  the same settings as this instance, but is otherwise
  independent (i.e.nothing is actually shared, symbol tables
  are separate).
 Note that <code>ObjectCodec</code> reference is not copied but is
  set to null; caller typically needs to set it after calling
  this method. Reason for this is that the codec is used for
  callbacks, and assumption is that there is strict 1-to-1
  mapping between codec, factory. Caller has to, then, explicitly
  set codec after making the copy.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonFactory *)copy__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Convenience method for constructing generator that uses default
  encoding of the format (UTF-8 for JSON and most other data formats).
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats).
 @since 2.8
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Method for constructing generator for writing content using specified 
 <code>DataOutput</code> instance.
 @since 2.8
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                                      withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  to specified file, overwriting contents it might have (or creating
  it if such file does not yet exist).
 Encoding to use must be specified, and needs to be one of available
  types (as per JSON specification).
 <p>
  Underlying stream <b>is owned</b> by the generator constructed,
  i.e. generator will handle closing of file when 
 <code>JsonGenerator.close</code> is called.
 @param f File to write contents to
 @param enc Character encoding to use
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoFile:(JavaIoFile *)f
                                withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Convenience method for constructing generator that uses default
  encoding of the format (UTF-8 for JSON and most other data formats).
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats).
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified output stream.
 Encoding to use must be specified, and needs to be one of available
  types (as per JSON specification).
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the output stream when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  is enabled).
  Using application needs to close it explicitly if this is the case.
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats)
  and that ignore passed in encoding.
 @param outArg OutputStream to use for writing JSON content
 @param enc Character encoding to use
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                        withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified Writer.
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the Reader when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code> is enabled).
  Using application needs to close it explicitly.
 @since 2.1
 @param w Writer to use for writing JSON content
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createGeneratorWithJavaIoWriter:(JavaIoWriter *)w;

/*!
 @brief Convenience method for constructing generator that uses default
  encoding of the format (UTF-8 for JSON and most other data formats).
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats).
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createJsonGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified output stream.
 Encoding to use must be specified, and needs to be one of available
  types (as per JSON specification).
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the output stream when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code>
  is enabled).
  Using application needs to close it explicitly if this is the case.
 <p>
  Note: there are formats that use fixed encoding (like most binary data formats)
  and that ignore passed in encoding.
 @param outArg OutputStream to use for writing JSON content
 @param enc Character encoding to use
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createJsonGeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                            withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc;

/*!
 @brief Method for constructing JSON generator for writing JSON content
  using specified Writer.
 <p>
  Underlying stream <b>is NOT owned</b> by the generator constructed,
  so that generator will NOT close the Reader when 
 <code>JsonGenerator.close</code> is called (unless auto-closing
  feature, 
 <code>com.fasterxml.jackson.core.JsonGenerator.Feature</code> is enabled).
  Using application needs to close it explicitly.
 @param outArg Writer to use for writing JSON content
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)createJsonGeneratorWithJavaIoWriter:(JavaIoWriter *)outArg;

/*!
 @brief Method for constructing parser for parsing the contents of given byte array.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithByteArray:(IOSByteArray *)data;

/*!
 @brief Method for constructing parser for parsing
  the contents of given byte array.
 @param data Buffer that contains data to parse
 @param offset Offset of the first data byte within buffer
 @param len Length of contents to parse within buffer
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithByteArray:(IOSByteArray *)data
                                                             withInt:(jint)offset
                                                             withInt:(jint)len;

/*!
 @brief Method for constructing JSON parser instance to parse
  contents of specified file.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param f File that contains JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithJavaIoFile:(JavaIoFile *)f;

/*!
 @brief Method for constructing JSON parser instance to parse
  the contents accessed via specified input stream.
 <p>
  The input stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 <p>
  Note: no encoding argument is taken since it can always be
  auto-detected as suggested by JSON RFC. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 @param inArg InputStream to use for reading JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method for constructing parser for parsing
  the contents accessed via specified Reader.
 <p>
  The read stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 @param r Reader to use for reading JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithJavaIoReader:(JavaIoReader *)r;

/*!
 @brief Method for constructing parser for parsing
  contents of given String.
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithNSString:(NSString *)content;

/*!
 @brief Method for constructing JSON parser instance to parse
  contents of resource reference by given URL.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param url URL pointing to resource that contains JSON content to parse
 */
- (ComFasterxmlJacksonCoreJsonParser *)createJsonParserWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Optional method for constructing parser for non-blocking parsing
  via <code>com.fasterxml.jackson.core.async.ByteArrayFeeder</code>
  interface (accessed using <code>JsonParser.getNonBlockingInputFeeder()</code>
  from constructed instance).
 <p>
  If this factory does not support non-blocking parsing (either at all,
  or from byte array),
  will throw <code>UnsupportedOperationException</code>
 @since 2.9
 */
- (ComFasterxmlJacksonCoreJsonParser *)createNonBlockingByteArrayParser;

/*!
 @brief Method for constructing parser for parsing
  the contents of given byte array.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithByteArray:(IOSByteArray *)data;

/*!
 @brief Method for constructing parser for parsing
  the contents of given byte array.
 @param data Buffer that contains data to parse
 @param offset Offset of the first data byte within buffer
 @param len Length of contents to parse within buffer
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithByteArray:(IOSByteArray *)data
                                                         withInt:(jint)offset
                                                         withInt:(jint)len;

/*!
 @brief Method for constructing parser for parsing
  contents of given char array.
 @since 2.4
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithCharArray:(IOSCharArray *)content;

/*!
 @brief Method for constructing parser for parsing contents of given char array.
 @since 2.4
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithCharArray:(IOSCharArray *)content
                                                         withInt:(jint)offset
                                                         withInt:(jint)len;

/*!
 @brief Optional method for constructing parser for reading contents from specified <code>DataInput</code>
  instance.
 <p>
  If this factory does not support <code>DataInput</code> as source,
  will throw <code>UnsupportedOperationException</code>
 @since 2.8
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

/*!
 @brief Method for constructing JSON parser instance to parse
  contents of specified file.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param f File that contains JSON content to parse
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoFile:(JavaIoFile *)f;

/*!
 @brief Method for constructing JSON parser instance to parse
  the contents accessed via specified input stream.
 <p>
  The input stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 <p>
  Note: no encoding argument is taken since it can always be
  auto-detected as suggested by JSON RFC. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 @param inArg InputStream to use for reading JSON content to parse
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Method for constructing parser for parsing
  the contents accessed via specified Reader.
 <p>
  The read stream will <b>not be owned</b> by
  the parser, it will still be managed (i.e. closed if
  end-of-stream is reacher, or parser close method called)
  if (and only if) <code>com.fasterxml.jackson.core.JsonParser.Feature</code>
  is enabled.
 @param r Reader to use for reading JSON content to parse
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaIoReader:(JavaIoReader *)r;

/*!
 @brief Method for constructing parser for parsing
  contents of given String.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithNSString:(NSString *)content;

/*!
 @brief Method for constructing JSON parser instance to parse
  contents of resource reference by given URL.
 <p>
  Encoding is auto-detected from contents according to JSON
  specification recommended mechanism. Json specification
  supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
  so auto-detection implemented only for this charsets.
  For other charsets use <code>createParser(java.io.Reader)</code>.
 <p>
  Underlying input stream (needed for reading contents)
  will be <b>owned</b> (and managed, i.e. closed as need be) by
  the parser, since caller has no access to it.
 @param url URL pointing to resource that contains JSON content to parse
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)createParserWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Method for disabling specified parser features
  (check <code>JsonFactory.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)disableWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f;

/*!
 @brief Method for disabling specified parser features
  (check <code>JsonParser.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)disableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

/*!
 @brief Method for disabling specified generator feature
  (check <code>JsonGenerator.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)disableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method for enabling specified parser feature
  (check <code>JsonFactory.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)enableWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f;

/*!
 @brief Method for enabling specified parser feature
  (check <code>JsonParser.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)enableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

/*!
 @brief Method for enabling specified generator features
  (check <code>JsonGenerator.Feature</code> for list of features)
 */
- (ComFasterxmlJacksonCoreJsonFactory *)enableWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method for accessing custom escapes factory uses for <code>JsonGenerator</code>s
  it creates.
 */
- (ComFasterxmlJacksonCoreIoCharacterEscapes *)getCharacterEscapes;

- (ComFasterxmlJacksonCoreObjectCodec *)getCodec;

/*!
 @brief Method that returns short textual id identifying format
  this factory supports.
 <p>
  Note: sub-classes should override this method; default
  implementation will return null for all sub-classes
 */
- (NSString *)getFormatName;

/*!
 @brief Method for accessing kind of <code>FormatFeature</code> that a parser 
 <code>JsonParser</code> produced by this factory would accept, if any; 
 <code>null</code> returned if none.
 @since 2.6
 */
- (IOSClass *)getFormatReadFeatureType;

/*!
 @brief Method for accessing kind of <code>FormatFeature</code> that a parser 
 <code>JsonGenerator</code> produced by this factory would accept, if any; 
 <code>null</code> returned if none.
 @since 2.6
 */
- (IOSClass *)getFormatWriteFeatureType;

/*!
 @brief Method for getting currently configured input decorator (if any;
  there is no default decorator).
 */
- (ComFasterxmlJacksonCoreIoInputDecorator *)getInputDecorator;

/*!
 @brief Method for getting currently configured output decorator (if any;
  there is no default decorator).
 */
- (ComFasterxmlJacksonCoreIoOutputDecorator *)getOutputDecorator;

/*!
 @since 2.1
 */
- (NSString *)getRootValueSeparator;

/*!
 @brief Convenience method for trying to determine whether input via given accessor
  is of format type supported by this factory.
 */
- (ComFasterxmlJacksonCoreFormatMatchStrength *)hasFormatWithComFasterxmlJacksonCoreFormatInputAccessor:(id<ComFasterxmlJacksonCoreFormatInputAccessor>)acc;

/*!
 @brief Checked whether specified parser feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonFactory_Feature:(ComFasterxmlJacksonCoreJsonFactory_Feature *)f;

/*!
 @brief Checked whether specified parser feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f;

/*!
 @brief Check whether specified generator feature is enabled.
 */
- (jboolean)isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:(ComFasterxmlJacksonCoreJsonGenerator_Feature *)f;

/*!
 @brief Method that can be called to determine if a custom 
 <code>ObjectCodec</code> is needed for binding data parsed
  using <code>JsonParser</code> constructed by this factory
  (which typically also implies the same for serialization
  with <code>JsonGenerator</code>).
 @return True if custom codec is needed with parsers and
    generators created by this factory; false if a general   
 <code>ObjectCodec</code> is enough
 @since 2.1
 */
- (jboolean)requiresCustomCodec;

/*!
 @brief Introspection method that higher-level functionality may call
  to see whether underlying data format requires a stable ordering
  of object properties or not.
 This is usually used for determining
  whether to force a stable ordering (like alphabetic ordering by name)
  if no ordering if explicitly specified.
 <p>
  Default implementation returns <code>false</code> as JSON does NOT
  require stable ordering. Formats that require ordering include positional
  textual formats like <code>CSV</code>, and schema-based binary formats
  like <code>Avro</code>.
 @since 2.3
 */
- (jboolean)requiresPropertyOrdering;

/*!
 @brief Method for defining custom escapes factory uses for <code>JsonGenerator</code>s
  it creates.
 */
- (ComFasterxmlJacksonCoreJsonFactory *)setCharacterEscapesWithComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)esc;

/*!
 @brief Method for associating a <code>ObjectCodec</code> (typically
  a <code>com.fasterxml.jackson.databind.ObjectMapper</code>)
  with this factory (and more importantly, parsers and generators
  it constructs).This is needed to use data-binding methods
  of <code>JsonParser</code> and <code>JsonGenerator</code> instances.
 */
- (ComFasterxmlJacksonCoreJsonFactory *)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)oc;

/*!
 @brief Method for overriding currently configured input decorator
 */
- (ComFasterxmlJacksonCoreJsonFactory *)setInputDecoratorWithComFasterxmlJacksonCoreIoInputDecorator:(ComFasterxmlJacksonCoreIoInputDecorator *)d;

/*!
 @brief Method for overriding currently configured output decorator
 */
- (ComFasterxmlJacksonCoreJsonFactory *)setOutputDecoratorWithComFasterxmlJacksonCoreIoOutputDecorator:(ComFasterxmlJacksonCoreIoOutputDecorator *)d;

/*!
 @brief Method that allows overriding String used for separating root-level
  JSON values (default is single space character)
 @param sep Separator to use, if any; null means that no separator is    automatically added
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonFactory *)setRootValueSeparatorWithNSString:(NSString *)sep;

- (ComFasterxmlJacksonCoreVersion *)version__;

#pragma mark Protected

/*!
 @brief Constructor used when copy()ing a factory instance.
 @since 2.2.1
 */
- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonFactory:(ComFasterxmlJacksonCoreJsonFactory *)src
                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec;

/*!
 @since 2.1
 @param exp
 */
- (void)_checkInvalidCopyWithIOSClass:(IOSClass *)exp;

/*!
 @brief Overridable factory method that actually instantiates desired
  context object.
 */
- (ComFasterxmlJacksonCoreIoIOContext *)_createContextWithId:(id)srcRef
                                                 withBoolean:(jboolean)resourceManaged;

/*!
 @since 2.8
 */
- (JavaIoOutputStream *)_createDataOutputWrapperWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

/*!
 @brief Overridable factory method that actually instantiates generator for
  given <code>Writer</code> and context object.
 <p>
  This method is specifically designed to remain
  compatible between minor versions so that sub-classes can count
  on it being called as expected. That is, it is part of official
  interface from sub-class perspective, although not a public
  method available to users of factory implementations.
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)_createGeneratorWithJavaIoWriter:(JavaIoWriter *)outArg
                                    withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Overridable factory method that actually instantiates parser
  using given <code>Reader</code> object for reading content
  passed as raw byte array.
 <p>
  This method is specifically designed to remain
  compatible between minor versions so that sub-classes can count
  on it being called as expected. That is, it is part of official
  interface from sub-class perspective, although not a public
  method available to users of factory implementations.
 */
- (ComFasterxmlJacksonCoreJsonParser *)_createParserWithByteArray:(IOSByteArray *)data
                                                          withInt:(jint)offset
                                                          withInt:(jint)len
                           withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Overridable factory method that actually instantiates parser
  using given <code>char[]</code> object for accessing content.
 @since 2.4
 */
- (ComFasterxmlJacksonCoreJsonParser *)_createParserWithCharArray:(IOSCharArray *)data
                                                          withInt:(jint)offset
                                                          withInt:(jint)len
                           withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                      withBoolean:(jboolean)recyclable;

/*!
 @brief Optional factory method, expected to be overridden
 @since 2.8
 */
- (ComFasterxmlJacksonCoreJsonParser *)_createParserWithJavaIoDataInput:(id<JavaIoDataInput>)input
                                 withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Overridable factory method that actually instantiates desired parser
  given <code>InputStream</code> and context object.
 <p>
  This method is specifically designed to remain
  compatible between minor versions so that sub-classes can count
  on it being called as expected. That is, it is part of official
  interface from sub-class perspective, although not a public
  method available to users of factory implementations.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)_createParserWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Overridable factory method that actually instantiates parser
  using given <code>Reader</code> object for reading content.
 <p>
  This method is specifically designed to remain
  compatible between minor versions so that sub-classes can count
  on it being called as expected. That is, it is part of official
  interface from sub-class perspective, although not a public
  method available to users of factory implementations.
 @since 2.1
 */
- (ComFasterxmlJacksonCoreJsonParser *)_createParserWithJavaIoReader:(JavaIoReader *)r
                              withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Overridable factory method that actually instantiates generator for
  given <code>OutputStream</code> and context object, using UTF-8 encoding.
 <p>
  This method is specifically designed to remain
  compatible between minor versions so that sub-classes can count
  on it being called as expected. That is, it is part of official
  interface from sub-class perspective, although not a public
  method available to users of factory implementations.
 */
- (ComFasterxmlJacksonCoreJsonGenerator *)_createUTF8GeneratorWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                              withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

- (JavaIoWriter *)_createWriterWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
              withComFasterxmlJacksonCoreJsonEncoding:(ComFasterxmlJacksonCoreJsonEncoding *)enc
               withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @since 2.8
 */
- (id<JavaIoDataInput>)_decorateWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
             withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @since 2.4
 */
- (JavaIoInputStream *)_decorateWithJavaIoInputStream:(JavaIoInputStream *)inArg
               withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @since 2.4
 */
- (JavaIoOutputStream *)_decorateWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                 withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @since 2.4
 */
- (JavaIoReader *)_decorateWithJavaIoReader:(JavaIoReader *)inArg
     withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @since 2.4
 */
- (JavaIoWriter *)_decorateWithJavaIoWriter:(JavaIoWriter *)outArg
     withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt;

/*!
 @brief Helper methods used for constructing an optimal stream for
  parsers to use, when input is to be read from an URL.
 This helps when reading file content via URL.
 */
- (JavaIoInputStream *)_optimizedStreamFromURLWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Helper method that can be called to determine if content accessed
  using given accessor seems to be JSON content.
 */
- (ComFasterxmlJacksonCoreFormatMatchStrength *)hasJSONFormatWithComFasterxmlJacksonCoreFormatInputAccessor:(id<ComFasterxmlJacksonCoreFormatInputAccessor>)acc;

/*!
 @brief Method that we need to override to actually make restoration go
  through constructors etc.
 Also: must be overridden by sub-classes as well.
 */
- (id)readResolve;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonFactory)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _rootCharSymbols_, ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _byteSymbolCanonicalizer_, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _objectCodec_, ComFasterxmlJacksonCoreObjectCodec *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _characterEscapes_, ComFasterxmlJacksonCoreIoCharacterEscapes *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _inputDecorator_, ComFasterxmlJacksonCoreIoInputDecorator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _outputDecorator_, ComFasterxmlJacksonCoreIoOutputDecorator *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonFactory, _rootValueSeparator_, id<ComFasterxmlJacksonCoreSerializableString>)

/*!
 @brief Name used to identify JSON format
  (and returned by <code>getFormatName()</code>
 */
inline NSString *ComFasterxmlJacksonCoreJsonFactory_get_FORMAT_NAME_JSON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonCoreJsonFactory_FORMAT_NAME_JSON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonFactory, FORMAT_NAME_JSON, NSString *)

/*!
 @brief Bitfield (set of flags) of all factory features that are enabled by default.
 */
inline jint ComFasterxmlJacksonCoreJsonFactory_get_DEFAULT_FACTORY_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonFactory_DEFAULT_FACTORY_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreJsonFactory, DEFAULT_FACTORY_FEATURE_FLAGS, jint)

/*!
 @brief Bitfield (set of flags) of all parser features that are enabled
  by default.
 */
inline jint ComFasterxmlJacksonCoreJsonFactory_get_DEFAULT_PARSER_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonFactory_DEFAULT_PARSER_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreJsonFactory, DEFAULT_PARSER_FEATURE_FLAGS, jint)

/*!
 @brief Bitfield (set of flags) of all generator features that are enabled
  by default.
 */
inline jint ComFasterxmlJacksonCoreJsonFactory_get_DEFAULT_GENERATOR_FEATURE_FLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonFactory_DEFAULT_GENERATOR_FEATURE_FLAGS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreJsonFactory, DEFAULT_GENERATOR_FEATURE_FLAGS, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonFactory_init(ComFasterxmlJacksonCoreJsonFactory *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *new_ComFasterxmlJacksonCoreJsonFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *create_ComFasterxmlJacksonCoreJsonFactory_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreJsonFactory *self, ComFasterxmlJacksonCoreObjectCodec *oc);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *new_ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreObjectCodec *oc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *create_ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreObjectCodec *oc);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreJsonFactory *self, ComFasterxmlJacksonCoreJsonFactory *src, ComFasterxmlJacksonCoreObjectCodec *codec);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *new_ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreJsonFactory *src, ComFasterxmlJacksonCoreObjectCodec *codec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory *create_ComFasterxmlJacksonCoreJsonFactory_initWithComFasterxmlJacksonCoreJsonFactory_withComFasterxmlJacksonCoreObjectCodec_(ComFasterxmlJacksonCoreJsonFactory *src, ComFasterxmlJacksonCoreObjectCodec *codec);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonFactory)

#endif

#if !defined (ComFasterxmlJacksonCoreJsonFactory_Feature_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory || defined(INCLUDE_ComFasterxmlJacksonCoreJsonFactory_Feature))
#define ComFasterxmlJacksonCoreJsonFactory_Feature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonCoreJsonFactory_Feature_Enum) {
  ComFasterxmlJacksonCoreJsonFactory_Feature_Enum_INTERN_FIELD_NAMES = 0,
  ComFasterxmlJacksonCoreJsonFactory_Feature_Enum_CANONICALIZE_FIELD_NAMES = 1,
  ComFasterxmlJacksonCoreJsonFactory_Feature_Enum_FAIL_ON_SYMBOL_HASH_OVERFLOW = 2,
  ComFasterxmlJacksonCoreJsonFactory_Feature_Enum_USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING = 3,
};

/*!
 @brief Enumeration that defines all on/off features that can only be
  changed for <code>JsonFactory</code>.
 */
@interface ComFasterxmlJacksonCoreJsonFactory_Feature : JavaLangEnum

#pragma mark Public

/*!
 @brief Method that calculates bit set (flags) of all features that
  are enabled by default.
 */
+ (jint)collectDefaults;

- (jboolean)enabledByDefault;

- (jboolean)enabledInWithInt:(jint)flags;

- (jint)getMask;

+ (ComFasterxmlJacksonCoreJsonFactory_Feature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonFactory_Feature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_values_[];

/*!
 @brief Feature that determines whether JSON object field names are
  to be canonicalized using <code>String.intern</code> or not:
  if enabled, all field names will be intern()ed (and caller
  can count on this being true for all such names); if disabled,
  no intern()ing is done.There may still be basic
  canonicalization (that is, same String will be used to represent
  all identical object property names for a single document).
 <p>
  Note: this setting only has effect if 
 <code>CANONICALIZE_FIELD_NAMES</code> is true -- otherwise no
  canonicalization of any sort is done.
 <p>
  This setting is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_get_INTERN_FIELD_NAMES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonFactory_Feature, INTERN_FIELD_NAMES)

/*!
 @brief Feature that determines whether JSON object field names are
  to be canonicalized (details of how canonicalization is done
  then further specified by 
 <code>INTERN_FIELD_NAMES</code>).
 <p>
  This setting is enabled by default.
 */
inline ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_get_CANONICALIZE_FIELD_NAMES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonFactory_Feature, CANONICALIZE_FIELD_NAMES)

/*!
 @brief Feature that determines what happens if we encounter a case in symbol
  handling where number of hash collisions exceeds a safety threshold
  -- which almost certainly means a denial-of-service attack via generated
  duplicate hash codes.
 If feature is enabled, an <code>IllegalStateException</code> is
  thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but
  canonicalization (and thereby <code>intern()</code>ing) is disabled) as protective
  measure.
 <p>
  This setting is enabled by default.
 @since 2.4
 */
inline ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_get_FAIL_ON_SYMBOL_HASH_OVERFLOW(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonFactory_Feature, FAIL_ON_SYMBOL_HASH_OVERFLOW)

/*!
 @brief Feature that determines whether we will use <code>BufferRecycler</code> with 
 <code>ThreadLocal</code> and <code>SoftReference</code>, for efficient reuse of
  underlying input/output buffers.
 This usually makes sense on normal J2SE/J2EE server-side processing;
  but may not make sense on platforms where <code>SoftReference</code> handling
  is broken (like Android), or if there are retention issues due to 
 <code>ThreadLocal</code> (see 
 <a href="https://github.com/FasterXML/jackson-core/issues/189">Issue #189</a>
  for a possible case)
 <p>
  This setting is enabled by default.
 @since 2.6
 */
inline ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_get_USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonCoreJsonFactory_Feature, USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonFactory_Feature_collectDefaults(void);

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonCoreJsonFactory_Feature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonFactory_Feature *ComFasterxmlJacksonCoreJsonFactory_Feature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonFactory_Feature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonFactory")
