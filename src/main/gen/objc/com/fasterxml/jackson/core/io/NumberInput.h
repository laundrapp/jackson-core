//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoNumberInput")
#ifdef RESTRICT_ComFasterxmlJacksonCoreIoNumberInput
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoNumberInput 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreIoNumberInput 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreIoNumberInput

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreIoNumberInput_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreIoNumberInput || defined(INCLUDE_ComFasterxmlJacksonCoreIoNumberInput))
#define ComFasterxmlJacksonCoreIoNumberInput_

@class IOSCharArray;
@class JavaMathBigDecimal;

@interface ComFasterxmlJacksonCoreIoNumberInput : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Helper method for determining if given String representation of
  an integral number would fit in 64-bit Java long or not.
 Note that input String must NOT contain leading minus sign (even
  if 'negative' is set to true).
 @param negative Whether original number had a minus sign (which is     NOT passed to this method) or not
 */
+ (jboolean)inLongRangeWithCharArray:(IOSCharArray *)ch
                             withInt:(jint)off
                             withInt:(jint)len
                         withBoolean:(jboolean)negative;

/*!
 @brief Similar to <code>inLongRange(char[],int,int,boolean)</code>, but
  with String argument
 @param negative Whether original number had a minus sign (which is     NOT passed to this method) or not
 */
+ (jboolean)inLongRangeWithNSString:(NSString *)s
                        withBoolean:(jboolean)negative;

+ (jdouble)parseAsDoubleWithNSString:(NSString *)s
                          withDouble:(jdouble)def;

+ (jint)parseAsIntWithNSString:(NSString *)s
                       withInt:(jint)def;

+ (jlong)parseAsLongWithNSString:(NSString *)s
                        withLong:(jlong)def;

+ (JavaMathBigDecimal *)parseBigDecimalWithCharArray:(IOSCharArray *)b;

+ (JavaMathBigDecimal *)parseBigDecimalWithCharArray:(IOSCharArray *)b
                                             withInt:(jint)off
                                             withInt:(jint)len;

+ (JavaMathBigDecimal *)parseBigDecimalWithNSString:(NSString *)s;

+ (jdouble)parseDoubleWithNSString:(NSString *)s;

/*!
 @brief Fast method for parsing integers that are known to fit into
  regular 32-bit signed int type.This means that length is
  between 1 and 9 digits (inclusive)
 <p>
  Note: public to let unit tests call it
 */
+ (jint)parseIntWithCharArray:(IOSCharArray *)ch
                      withInt:(jint)off
                      withInt:(jint)len;

/*!
 @brief Helper method to (more) efficiently parse integer numbers from
  String values.
 */
+ (jint)parseIntWithNSString:(NSString *)s;

+ (jlong)parseLongWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)off
                        withInt:(jint)len;

+ (jlong)parseLongWithNSString:(NSString *)s;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreIoNumberInput)

/*!
 @brief Textual representation of a double constant that can cause nasty problems
  with JDK (see http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308).
 */
inline NSString *ComFasterxmlJacksonCoreIoNumberInput_get_NASTY_SMALL_DOUBLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonCoreIoNumberInput_NASTY_SMALL_DOUBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoNumberInput, NASTY_SMALL_DOUBLE, NSString *)

/*!
 @brief Constants needed for parsing longs from basic int parsing methods
 */
inline jlong ComFasterxmlJacksonCoreIoNumberInput_get_L_BILLION(void);
#define ComFasterxmlJacksonCoreIoNumberInput_L_BILLION 1000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreIoNumberInput, L_BILLION, jlong)

inline NSString *ComFasterxmlJacksonCoreIoNumberInput_get_MIN_LONG_STR_NO_SIGN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonCoreIoNumberInput_MIN_LONG_STR_NO_SIGN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoNumberInput, MIN_LONG_STR_NO_SIGN, NSString *)

inline NSString *ComFasterxmlJacksonCoreIoNumberInput_get_MAX_LONG_STR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonCoreIoNumberInput_MAX_LONG_STR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreIoNumberInput, MAX_LONG_STR, NSString *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreIoNumberInput_init(ComFasterxmlJacksonCoreIoNumberInput *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoNumberInput *new_ComFasterxmlJacksonCoreIoNumberInput_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreIoNumberInput *create_ComFasterxmlJacksonCoreIoNumberInput_init(void);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreIoNumberInput_parseIntWithCharArray_withInt_withInt_(IOSCharArray *ch, jint off, jint len);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreIoNumberInput_parseIntWithNSString_(NSString *s);

FOUNDATION_EXPORT jlong ComFasterxmlJacksonCoreIoNumberInput_parseLongWithCharArray_withInt_withInt_(IOSCharArray *ch, jint off, jint len);

FOUNDATION_EXPORT jlong ComFasterxmlJacksonCoreIoNumberInput_parseLongWithNSString_(NSString *s);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonCoreIoNumberInput_inLongRangeWithCharArray_withInt_withInt_withBoolean_(IOSCharArray *ch, jint off, jint len, jboolean negative);

FOUNDATION_EXPORT jboolean ComFasterxmlJacksonCoreIoNumberInput_inLongRangeWithNSString_withBoolean_(NSString *s, jboolean negative);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreIoNumberInput_parseAsIntWithNSString_withInt_(NSString *s, jint def);

FOUNDATION_EXPORT jlong ComFasterxmlJacksonCoreIoNumberInput_parseAsLongWithNSString_withLong_(NSString *s, jlong def);

FOUNDATION_EXPORT jdouble ComFasterxmlJacksonCoreIoNumberInput_parseAsDoubleWithNSString_withDouble_(NSString *s, jdouble def);

FOUNDATION_EXPORT jdouble ComFasterxmlJacksonCoreIoNumberInput_parseDoubleWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaMathBigDecimal *ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaMathBigDecimal *ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_(IOSCharArray *b);

FOUNDATION_EXPORT JavaMathBigDecimal *ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithCharArray_withInt_withInt_(IOSCharArray *b, jint off, jint len);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreIoNumberInput)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreIoNumberInput")
