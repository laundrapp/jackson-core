//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/JsonPointer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonPointer")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonPointer
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonPointer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonPointer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonPointer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonPointer_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonPointer || defined(INCLUDE_ComFasterxmlJacksonCoreJsonPointer))
#define ComFasterxmlJacksonCoreJsonPointer_

@class ComFasterxmlJacksonCoreJsonStreamContext;

/*!
 @brief Implementation of 
 <a href="http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03">JSON Pointer</a>
  specification.
 Pointer instances can be used to locate logical JSON nodes for things like
  tree traversal (see <code>TreeNode.at</code>).
  It may be used in future for filtering of streaming JSON content
  as well (not implemented yet for 2.3).
 <p>
  Instances are fully immutable and can be cached, shared between threads.
 @author Tatu Saloranta
 @since 2.3
 */
@interface ComFasterxmlJacksonCoreJsonPointer : NSObject {
 @public
  /*!
   @brief Reference to rest of the pointer beyond currently matching
  segment (if any); null if this pointer refers to the matching
  segment.
   */
  ComFasterxmlJacksonCoreJsonPointer *_nextSegment_;
  /*!
   @brief Reference from currently matching segment (if any) to node
  before leaf.
   Lazily constructed if/as needed.
 <p>
  NOTE: we'll use `volatile` here assuming that this is unlikely to
  become a performance bottleneck. If it becomes one we can probably
  just drop it and things still should work (despite warnings as per JMM
  regarding visibility (and lack thereof) of unguarded changes).
   @since 2.5
   */
  volatile_id _head_;
  /*!
   @brief We will retain representation of the pointer, as a String,
  so that <code>toString</code> should be as efficient as possible.
   */
  NSString *_asString_;
  NSString *_matchingPropertyName_;
  jint _matchingElementIndex_;
}

#pragma mark Public

/*!
 @brief Mutant factory method that will return
 <ul>
  <li>`tail` if `this` instance is "empty" pointer, OR
   </li>
  <li>`this` instance if `tail` is "empty" pointer, OR
   </li>
  <li>Newly constructed <code>JsonPointer</code> instance that starts with all segments
     of `this`, followed by all segments of `tail`.
 </li>
 </ul>
 @param tail<code>JsonPointer</code>  instance to append to this one, to create a new pointer instance
 @return Either `this` instance, `tail`, or a newly created combination, as per description above.
 */
- (ComFasterxmlJacksonCoreJsonPointer *)appendWithComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)tail;

/*!
 @brief Factory method that parses given input and construct matching pointer
  instance, if it represents a valid JSON Pointer: if not, a 
 <code>IllegalArgumentException</code> is thrown.
 @throw IllegalArgumentExceptionThrown if the input does not present a valid JSON Pointer
    expression: currently the only such expression is one that does NOT start with
    a slash ('/').
 */
+ (ComFasterxmlJacksonCoreJsonPointer *)compileWithNSString:(NSString *)input;

- (jboolean)isEqual:(id)o;

/*!
 @brief Factory method that will construct a pointer instance that describes
  path to location given <code>JsonStreamContext</code> points to.
 @param context Context to build pointer expression fot
 @param includeRoot Whether to include number offset for virtual "root context"     or not.
 @since 2.9
 */
+ (ComFasterxmlJacksonCoreJsonPointer *)forPathWithComFasterxmlJacksonCoreJsonStreamContext:(ComFasterxmlJacksonCoreJsonStreamContext *)context
                                                                                withBoolean:(jboolean)includeRoot;

- (jint)getMatchingIndex;

- (NSString *)getMatchingProperty;

- (NSUInteger)hash;

/*!
 @brief Accessor for getting a pointer instance that is identical to this
  instance except that the last segment has been dropped.
 For example, for JSON Point "/root/branch/leaf", this method would
  return pointer "/root/branch" (compared to <code>tail()</code> that
  would return "/branch/leaf").
  For leaf
 @since 2.5
 */
- (ComFasterxmlJacksonCoreJsonPointer *)head;

/*!
 @brief Returns the leaf of current JSON Pointer expression.
 Leaf is the last non-null segment of current JSON Pointer.
 @since 2.5
 */
- (ComFasterxmlJacksonCoreJsonPointer *)last;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonCoreJsonPointer *)matchElementWithInt:(jint)index;

- (jboolean)matches;

/*!
 @brief Method that may be called to see if the pointer would match
  array element (of a JSON Array) with given index.
 @since 2.5
 */
- (jboolean)matchesElementWithInt:(jint)index;

/*!
 @brief Method that may be called to see if the pointer would match property
  (of a JSON Object) with given name.
 @since 2.5
 */
- (jboolean)matchesPropertyWithNSString:(NSString *)name;

- (ComFasterxmlJacksonCoreJsonPointer *)matchPropertyWithNSString:(NSString *)name;

- (jboolean)mayMatchElement;

- (jboolean)mayMatchProperty;

/*!
 @brief Accessor for getting a "sub-pointer", instance where current segment
  has been removed and pointer includes rest of segments.
 For matching state, will return null.
 */
- (ComFasterxmlJacksonCoreJsonPointer *)tail;

- (NSString *)description;

/*!
 @brief Alias for <code>compile</code>; added to make instances automatically
  deserializable by Jackson databind.
 */
+ (ComFasterxmlJacksonCoreJsonPointer *)valueOfWithNSString:(NSString *)input;

#pragma mark Protected

/*!
 @brief Constructor used for creating "empty" instance, used to represent
  state that matches current node.
 */
- (instancetype __nonnull)init;

/*!
 @since 2.5
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fullString
                              withNSString:(NSString *)segment
                                   withInt:(jint)matchIndex
    withComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)next;

/*!
 @brief Constructor used for creating non-empty Segments
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fullString
                              withNSString:(NSString *)segment
    withComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)next;

- (ComFasterxmlJacksonCoreJsonPointer *)_constructHead;

- (ComFasterxmlJacksonCoreJsonPointer *)_constructHeadWithInt:(jint)suffixLength
                       withComFasterxmlJacksonCoreJsonPointer:(ComFasterxmlJacksonCoreJsonPointer *)last;

/*!
 @brief Method called to parse tail of pointer path, when a potentially
  escaped character has been seen.
 @param input Full input for the tail being parsed
 @param i Offset to character after tilde
 */
+ (ComFasterxmlJacksonCoreJsonPointer *)_parseQuotedTailWithNSString:(NSString *)input
                                                             withInt:(jint)i;

+ (ComFasterxmlJacksonCoreJsonPointer *)_parseTailWithNSString:(NSString *)input;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonPointer)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonPointer, _nextSegment_, ComFasterxmlJacksonCoreJsonPointer *)
J2OBJC_VOLATILE_FIELD_SETTER(ComFasterxmlJacksonCoreJsonPointer, _head_, ComFasterxmlJacksonCoreJsonPointer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonPointer, _asString_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonPointer, _matchingPropertyName_, NSString *)

/*!
 @brief Character used to separate segments.
 @since 2.9
 */
inline jchar ComFasterxmlJacksonCoreJsonPointer_get_SEPARATOR(void);
#define ComFasterxmlJacksonCoreJsonPointer_SEPARATOR '/'
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonPointer, SEPARATOR, jchar)

/*!
 @brief Marker instance used to represent segment that matches current
  node or position (that is, returns true for 
 <code>matches()</code>).
 */
inline ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonPointer, EMPTY, ComFasterxmlJacksonCoreJsonPointer *)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonPointer_init(ComFasterxmlJacksonCoreJsonPointer *self);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *new_ComFasterxmlJacksonCoreJsonPointer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *create_ComFasterxmlJacksonCoreJsonPointer_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonCoreJsonPointer *self, NSString *fullString, NSString *segment, ComFasterxmlJacksonCoreJsonPointer *next);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *new_ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withComFasterxmlJacksonCoreJsonPointer_(NSString *fullString, NSString *segment, ComFasterxmlJacksonCoreJsonPointer *next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *create_ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withComFasterxmlJacksonCoreJsonPointer_(NSString *fullString, NSString *segment, ComFasterxmlJacksonCoreJsonPointer *next);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withInt_withComFasterxmlJacksonCoreJsonPointer_(ComFasterxmlJacksonCoreJsonPointer *self, NSString *fullString, NSString *segment, jint matchIndex, ComFasterxmlJacksonCoreJsonPointer *next);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *new_ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withInt_withComFasterxmlJacksonCoreJsonPointer_(NSString *fullString, NSString *segment, jint matchIndex, ComFasterxmlJacksonCoreJsonPointer *next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *create_ComFasterxmlJacksonCoreJsonPointer_initWithNSString_withNSString_withInt_withComFasterxmlJacksonCoreJsonPointer_(NSString *fullString, NSString *segment, jint matchIndex, ComFasterxmlJacksonCoreJsonPointer *next);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer_compileWithNSString_(NSString *input);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer_valueOfWithNSString_(NSString *input);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer_forPathWithComFasterxmlJacksonCoreJsonStreamContext_withBoolean_(ComFasterxmlJacksonCoreJsonStreamContext *context, jboolean includeRoot);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer__parseTailWithNSString_(NSString *input);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonPointer *ComFasterxmlJacksonCoreJsonPointer__parseQuotedTailWithNSString_withInt_(NSString *input, jint i);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonPointer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonPointer")
