//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer")
#ifdef RESTRICT_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer || defined(INCLUDE_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer))
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_

@class IOSIntArray;

/*!
 @brief Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized
  memory access due to flattening of name quad data.
 Performance improvement modest for simple JSON document data binding (maybe 3%),
  but should help more for larger symbol tables, or for binary formats like Smile.
 @since 2.6
 */
@interface ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer : NSObject

#pragma mark Public

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1;

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1
                          withInt:(jint)q2;

- (NSString *)addNameWithNSString:(NSString *)name
                          withInt:(jint)q1
                          withInt:(jint)q2
                          withInt:(jint)q3;

- (NSString *)addNameWithNSString:(NSString *)name
                     withIntArray:(IOSIntArray *)q
                          withInt:(jint)qlen;

/*!
 @brief Returns number of primary slots table has currently
 */
- (jint)bucketCount;

- (jint)calcHashWithInt:(jint)q1;

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2;

- (jint)calcHashWithInt:(jint)q1
                withInt:(jint)q2
                withInt:(jint)q3;

- (jint)calcHashWithIntArray:(IOSIntArray *)q
                     withInt:(jint)qlen;

/*!
 @brief Factory method to call to create a symbol table instance with a
  randomized seed value.
 */
+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)createRoot;

- (NSString *)findNameWithInt:(jint)q1;

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2;

- (NSString *)findNameWithInt:(jint)q1
                      withInt:(jint)q2
                      withInt:(jint)q3;

- (NSString *)findNameWithIntArray:(IOSIntArray *)q
                           withInt:(jint)qlen;

- (jint)hashSeed;

/*!
 @brief Factory method used to create actual symbol table instance to
  use for parsing.
 */
- (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)makeChildWithInt:(jint)flags;

/*!
 @brief Method called to check to quickly see if a child symbol table
  may have gotten additional entries.Used for checking to see
  if a child table should be merged into shared table.
 */
- (jboolean)maybeDirty;

/*!
 @brief Method mostly needed by unit tests; calculates number of
  entries that are in the primary slot set.These are
  "perfect" entries, accessible with a single lookup
 */
- (jint)primaryCount;

/*!
 @brief Method called by the using code to indicate it is done with this instance.
 This lets instance merge accumulated changes into parent (if need be),
  safely and efficiently, and without calling code having to know about parent
  information.
 */
- (void)release__;

/*!
 @brief Method mostly needed by unit tests; calculates number of entries
  in secondary buckets
 */
- (jint)secondaryCount;

- (jint)size;

/*!
 @brief Method mostly needed by unit tests; calculates number of entries
  in shared spillover area
 */
- (jint)spilloverCount;

/*!
 @brief Method mostly needed by unit tests; calculates number of entries
  in tertiary buckets
 */
- (jint)tertiaryCount;

- (NSString *)description;

- (jint)totalCount;

#pragma mark Protected

- (void)_reportTooManyCollisions;

+ (ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)createRootWithInt:(jint)seed;

#pragma mark Package-Private

+ (jint)_calcTertiaryShiftWithInt:(jint)primarySlots;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer)

/*!
 @brief Let's only share reasonably sized symbol tables.Max size set to 3/4 of 8k;
  this corresponds to 256k main hash index.
 This should allow for enough distinct
  names for almost any case, while preventing ballooning for cases where names
  are unique (or close thereof).
 */
inline jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_get_MAX_ENTRIES_FOR_REUSE(void);
#define ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_MAX_ENTRIES_FOR_REUSE 6000
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer, MAX_ENTRIES_FOR_REUSE, jint)

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRoot(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_createRootWithInt_(jint seed);

FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer__calcTertiaryShiftWithInt_(jint primarySlots);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer")
