//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser || defined(INCLUDE_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser))
#define ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_

#define RESTRICT_ComFasterxmlJacksonCoreBaseParserBase 1
#define INCLUDE_ComFasterxmlJacksonCoreBaseParserBase 1
#include "com/fasterxml/jackson/core/base/ParserBase.h"

@class ComFasterxmlJacksonCoreBase64Variant;
@class ComFasterxmlJacksonCoreIoIOContext;
@class ComFasterxmlJacksonCoreJsonLocation;
@class ComFasterxmlJacksonCoreJsonToken;
@class ComFasterxmlJacksonCoreObjectCodec;
@class ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaLangBoolean;
@protocol ComFasterxmlJacksonCoreSerializableString;

/*!
 @brief This is a concrete implementation of <code>JsonParser</code>, which is
  based on a <code>java.io.InputStream</code> as the input source.
 */
@interface ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser : ComFasterxmlJacksonCoreBaseParserBase {
 @public
  /*!
   @brief Codec used for data binding when (if) requested; typically full 
 <code>ObjectMapper</code>, but that abstract is not part of core
  package.
   */
  ComFasterxmlJacksonCoreObjectCodec *_objectCodec_;
  /*!
   @brief Symbol table that contains field names encountered so far
   */
  ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *_symbols_;
  /*!
   @brief Temporary buffer used for name parsing.
   */
  IOSIntArray *_quadBuffer_;
  /*!
   @brief Flag that indicates that the current token has not yet
  been fully processed, and needs to be finished for
  some access (or skipped to obtain the next token)
   */
  jboolean _tokenIncomplete_;
  /*!
   @brief Value of <code>_inputPtr</code> at the time when the first character of
  name token was read.Used for calculating token location when requested;
  combined with <code>_currInputProcessed</code>, may be updated appropriately
  as needed.
   @since 2.7
   */
  jint _nameStartOffset_;
  /*!
   @since 2.7
   */
  jint _nameStartRow_;
  /*!
   @since 2.7
   */
  jint _nameStartCol_;
  JavaIoInputStream *_inputStream_;
  /*!
   @brief Current buffer from which data is read; generally data is read into
  buffer from input source, but in some cases pre-loaded buffer
  is handed to the parser.
   */
  IOSByteArray *_inputBuffer_;
  /*!
   @brief Flag that indicates whether the input buffer is recycable (and
  needs to be returned to recycler once we are done) or not.
   <p>
  If it is not, it also means that parser can NOT modify underlying
  buffer.
   */
  jboolean _bufferRecyclable_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)features
                                               withJavaIoInputStream:(JavaIoInputStream *)inArg
                              withComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)codec
                withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym
                                                       withByteArray:(IOSByteArray *)inputBuffer
                                                             withInt:(jint)start
                                                             withInt:(jint)end
                                                         withBoolean:(jboolean)bufferRecyclable;

- (void)finishToken;

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

- (ComFasterxmlJacksonCoreObjectCodec *)getCodec;

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation;

- (id)getInputSource;

- (NSString *)getText;

- (jint)getTextWithJavaIoWriter:(JavaIoWriter *)writer;

- (IOSCharArray *)getTextCharacters;

- (jint)getTextLength;

- (jint)getTextOffset;

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation;

- (jint)getValueAsInt;

- (jint)getValueAsIntWithInt:(jint)defValue;

- (NSString *)getValueAsString;

- (NSString *)getValueAsStringWithNSString:(NSString *)defValue;

- (JavaLangBoolean *)nextBooleanValue;

- (NSString *)nextFieldName;

- (jboolean)nextFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)str;

- (jint)nextIntValueWithInt:(jint)defaultValue;

- (jlong)nextLongValueWithLong:(jlong)defaultValue;

- (NSString *)nextTextValue;

/*!
 @return Next token from the stream, if any found, or null
    to indicate end-of-input
 */
- (ComFasterxmlJacksonCoreJsonToken *)nextToken;

- (jint)readBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                         withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (void)setCodecWithComFasterxmlJacksonCoreObjectCodec:(ComFasterxmlJacksonCoreObjectCodec *)c;

#pragma mark Protected

- (void)_closeInput;

/*!
 @brief Efficient handling for incremental parsing of base64-encoded
  textual content.
 */
- (IOSByteArray *)_decodeBase64WithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant;

- (jint)_decodeCharForErrorWithInt:(jint)firstByte;

- (jchar)_decodeEscaped;

/*!
 @since 2.6
 */
- (NSString *)_finishAndReturnString;

- (void)_finishString;

- (NSString *)_getText2WithComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)t;

- (ComFasterxmlJacksonCoreJsonToken *)_handleApos;

/*!
 @brief Method called if expected numeric value (due to leading sign) does not
  look like a number
 */
- (ComFasterxmlJacksonCoreJsonToken *)_handleInvalidNumberStartWithInt:(jint)ch
                                                           withBoolean:(jboolean)neg;

/*!
 @brief Method called when we see non-white space character other
  than double quote, when expecting a field name.
 In standard mode will just throw an exception; but
  in non-standard modes may be able to parse name.
 */
- (NSString *)_handleOddNameWithInt:(jint)ch;

/*!
 @brief Method for handling cases where first non-space character
  of an expected value token is not legal for standard JSON content.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_handleUnexpectedValueWithInt:(jint)c;

- (jboolean)_loadMore;

- (void)_loadMoreGuaranteed;

- (void)_matchFalse;

- (void)_matchNull;

- (void)_matchTokenWithNSString:(NSString *)matchStr
                        withInt:(jint)i;

- (void)_matchTrue;

- (NSString *)_parseAposName;

- (NSString *)_parseNameWithInt:(jint)i;

- (ComFasterxmlJacksonCoreJsonToken *)_parseNegNumber;

/*!
 @brief Initial parsing method for number values.It needs to be able
  to parse enough input to be able to determine whether the
  value is to be considered a simple integer value, or a more
  generic decimal value: latter of which needs to be expressed
  as a floating point number.
 The basic rule is that if the number
  has no fractional or exponential part, it is an integer; otherwise
  a floating point number.
 <p>
  Because much of input has to be processed in any case, no partial
  parsing is done: all input text will be stored for further
  processing. However, actual numeric value conversion will be
  deferred, since it is usually the most complicated and costliest
  part of processing.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_parsePosNumberWithInt:(jint)c;

- (jint)_readBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                              withByteArray:(IOSByteArray *)buffer;

/*!
 @brief Method called to release internal buffers owned by the base
  reader.This may be called along with <code>_closeInput</code> (for
  example, when explicitly closing this reader instance), or
  separately (if need be).
 */
- (void)_releaseBuffers;

- (void)_reportInvalidCharWithInt:(jint)c;

- (void)_reportInvalidInitialWithInt:(jint)mask;

- (void)_reportInvalidOtherWithInt:(jint)mask;

- (void)_reportInvalidOtherWithInt:(jint)mask
                           withInt:(jint)ptr;

- (void)_reportInvalidTokenWithNSString:(NSString *)matchedPart;

- (void)_reportInvalidTokenWithNSString:(NSString *)matchedPart
                                withInt:(jint)ptr;

- (void)_reportInvalidTokenWithNSString:(NSString *)matchedPart
                           withNSString:(NSString *)msg;

/*!
 @brief We actually need to check the character value here
  (to see if we have \n following \r).
 */
- (void)_skipCR;

/*!
 @brief Method called to skim through rest of unparsed String value,
  if it is not needed.This can be done bit faster if contents
  need not be stored for future access.
 */
- (void)_skipString;

/*!
 @brief Slower parsing method which is generally branched to when an escape
  sequence is detected (or alternatively for long names, one crossing
  input buffer boundary).Needs to be able to handle more exceptional
  cases, gets slower, and hence is offlined to a separate method.
 */
- (NSString *)parseEscapedNameWithIntArray:(IOSIntArray *)quads
                                   withInt:(jint)qlen
                                   withInt:(jint)currQuad
                                   withInt:(jint)ch
                                   withInt:(jint)currQuadBytes;

- (NSString *)parseLongNameWithInt:(jint)q
                           withInt:(jint)q2
                           withInt:(jint)q3;

- (NSString *)parseMediumNameWithInt:(jint)q2;

/*!
 @since 2.6
 */
- (NSString *)parseMediumName2WithInt:(jint)q3
                              withInt:(jint)q2;

/*!
 @brief Method called when not even first 8 bytes are guaranteed
  to come consecutively.Happens rarely, so this is offlined;
  plus we'll also do full checks for escaping etc.
 */
- (NSString *)slowParseName;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)arg0
                                                             withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _objectCodec_, ComFasterxmlJacksonCoreObjectCodec *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _symbols_, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _quadBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _inputBuffer_, IOSByteArray *)

inline jbyte ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_get_BYTE_LF(void);
#define ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_BYTE_LF 10
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, BYTE_LF, jbyte)

inline IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_get__icLatin1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser__icLatin1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, _icLatin1, IOSIntArray *)

inline jint ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_get_FEAT_MASK_TRAILING_COMMA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_FEAT_MASK_TRAILING_COMMA;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser, FEAT_MASK_TRAILING_COMMA, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoInputStream_withComFasterxmlJacksonCoreObjectCodec_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoInputStream *inArg, ComFasterxmlJacksonCoreObjectCodec *codec, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, IOSByteArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser *new_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoInputStream_withComFasterxmlJacksonCoreObjectCodec_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoInputStream *inArg, ComFasterxmlJacksonCoreObjectCodec *codec, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, IOSByteArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser *create_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoInputStream_withComFasterxmlJacksonCoreObjectCodec_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withByteArray_withInt_withInt_withBoolean_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features, JavaIoInputStream *inArg, ComFasterxmlJacksonCoreObjectCodec *codec, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym, IOSByteArray *inputBuffer, jint start, jint end, jboolean bufferRecyclable);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser")
