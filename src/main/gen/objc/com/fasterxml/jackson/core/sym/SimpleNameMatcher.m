//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/SimpleNameMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/sym/FieldNameMatcher.h"
#include "com/fasterxml/jackson/core/sym/HashedMatcherBase.h"
#include "com/fasterxml/jackson/core/sym/SimpleNameMatcher.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComFasterxmlJacksonCoreSymSimpleNameMatcher ()

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)names
                                   withIntArray:(IOSIntArray *)offsets
                                        withInt:(jint)mask;

@end

inline jlong ComFasterxmlJacksonCoreSymSimpleNameMatcher_get_serialVersionUID(void);
#define ComFasterxmlJacksonCoreSymSimpleNameMatcher_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreSymSimpleNameMatcher, serialVersionUID, jlong)

__attribute__((unused)) static void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, IOSObjectArray *names, IOSIntArray *offsets, jint mask);

__attribute__((unused)) static ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(IOSObjectArray *names, IOSIntArray *offsets, jint mask) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(IOSObjectArray *names, IOSIntArray *offsets, jint mask);

@implementation ComFasterxmlJacksonCoreSymSimpleNameMatcher

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)names
                                   withIntArray:(IOSIntArray *)offsets
                                        withInt:(jint)mask {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(self, names, offsets, mask);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)base
                                                            withNSStringArray:(IOSObjectArray *)nameLookup {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(self, base, nameLookup);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)primary
                              withComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)secondary {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(self, primary, secondary);
  return self;
}

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructFromWithJavaUtilList:(id<JavaUtilList>)fields
                                                                   withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructFromWithJavaUtilList_withBoolean_(fields, alreadyInterned);
}

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructWithJavaUtilList:(id<JavaUtilList>)fieldNames {
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(fieldNames);
}

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)fields
                                                                              withBoolean:(jboolean)alreadyInterned {
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(fields, alreadyInterned);
}

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)names {
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_(names);
}

- (jint)matchByQuadWithInt:(jint)q1 {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME;
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME;
}

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2
                   withInt:(jint)q3 {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME;
}

- (jint)matchByQuadWithIntArray:(IOSIntArray *)q
                        withInt:(jint)qlen {
  return ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymSimpleNameMatcher;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymSimpleNameMatcher;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymSimpleNameMatcher;", 0x9, 9, 4, -1, 5, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreSymSimpleNameMatcher;", 0x9, 9, 7, -1, 8, -1, -1 },
    { NULL, "I", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:withIntArray:withInt:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:withNSStringArray:);
  methods[2].selector = @selector(initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:withComFasterxmlJacksonCoreSymSimpleNameMatcher:);
  methods[3].selector = @selector(constructFromWithJavaUtilList:withBoolean:);
  methods[4].selector = @selector(constructWithJavaUtilList:);
  methods[5].selector = @selector(constructCaseInsensitiveWithJavaUtilList:withBoolean:);
  methods[6].selector = @selector(constructCaseInsensitiveWithJavaUtilList:);
  methods[7].selector = @selector(matchByQuadWithInt:);
  methods[8].selector = @selector(matchByQuadWithInt:withInt:);
  methods[9].selector = @selector(matchByQuadWithInt:withInt:withInt:);
  methods[10].selector = @selector(matchByQuadWithIntArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComFasterxmlJacksonCoreSymSimpleNameMatcher_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;[II", "LComFasterxmlJacksonCoreSymSimpleNameMatcher;[LNSString;", "LComFasterxmlJacksonCoreSymSimpleNameMatcher;LComFasterxmlJacksonCoreSymSimpleNameMatcher;", "constructFrom", "LJavaUtilList;Z", "(Ljava/util/List<Lcom/fasterxml/jackson/core/util/Named;>;Z)Lcom/fasterxml/jackson/core/sym/SimpleNameMatcher;", "construct", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Lcom/fasterxml/jackson/core/sym/SimpleNameMatcher;", "constructCaseInsensitive", "matchByQuad", "I", "II", "III", "[II" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreSymSimpleNameMatcher = { "SimpleNameMatcher", "com.fasterxml.jackson.core.sym", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreSymSimpleNameMatcher;
}

@end

void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, IOSObjectArray *names, IOSIntArray *offsets, jint mask) {
  ComFasterxmlJacksonCoreSymHashedMatcherBase_initWithNSStringArray_withIntArray_withInt_withComFasterxmlJacksonCoreSymFieldNameMatcher_withNSStringArray_(self, names, offsets, mask, nil, nil);
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(IOSObjectArray *names, IOSIntArray *offsets, jint mask) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithNSStringArray_withIntArray_withInt_, names, offsets, mask)
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(IOSObjectArray *names, IOSIntArray *offsets, jint mask) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithNSStringArray_withIntArray_withInt_, names, offsets, mask)
}

void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup) {
  ComFasterxmlJacksonCoreSymHashedMatcherBase_initWithComFasterxmlJacksonCoreSymHashedMatcherBase_withNSStringArray_(self, base, nameLookup);
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_, base, nameLookup)
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_, base, nameLookup)
}

void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary) {
  ComFasterxmlJacksonCoreSymHashedMatcherBase_initWithComFasterxmlJacksonCoreSymHashedMatcherBase_withComFasterxmlJacksonCoreSymFieldNameMatcher_(self, primary, secondary);
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_, primary, secondary)
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreSymSimpleNameMatcher, initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_, primary, secondary)
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructFromWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initialize();
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(fields, alreadyInterned));
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(id<JavaUtilList> fieldNames) {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initialize();
  jint fieldCount = [((id<JavaUtilList>) nil_chk(fieldNames)) size];
  jint hashSize = ComFasterxmlJacksonCoreSymFieldNameMatcher__findSizeWithInt_(fieldCount);
  jint allocSize = hashSize + (JreRShift32(hashSize, 1));
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:allocSize type:NSString_class_()];
  IOSIntArray *offsets = [IOSIntArray arrayWithLength:allocSize];
  JavaUtilArrays_fillWithIntArray_withInt_(offsets, ComFasterxmlJacksonCoreSymFieldNameMatcher_MATCH_UNKNOWN_NAME);
  jint mask = hashSize - 1;
  jint spillPtr = names->size_;
  for (jint i = 0, fcount = [fieldNames size]; i < fcount; ++i) {
    NSString *name = [fieldNames getWithInt:i];
    if (name == nil) {
      continue;
    }
    jint ix = ComFasterxmlJacksonCoreSymFieldNameMatcher__hashWithInt_withInt_(((jint) [name hash]), mask);
    if (IOSObjectArray_Get(names, ix) == nil) {
      IOSObjectArray_Set(names, ix, name);
      *IOSIntArray_GetRef(offsets, ix) = i;
      continue;
    }
    ix = (mask + 1) + (JreRShift32(ix, 1));
    if (IOSObjectArray_Get(names, ix) == nil) {
      IOSObjectArray_Set(names, ix, name);
      *IOSIntArray_GetRef(offsets, ix) = i;
      continue;
    }
    if (names->size_ == spillPtr) {
      jint newLength = names->size_ + 4;
      names = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(names, newLength);
      offsets = JavaUtilArrays_copyOfWithIntArray_withInt_(offsets, newLength);
    }
    IOSObjectArray_Set(nil_chk(names), spillPtr, name);
    *IOSIntArray_GetRef(nil_chk(offsets), spillPtr) = i;
    ++spillPtr;
  }
  return create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithNSStringArray_withIntArray_withInt_(names, offsets, mask);
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned) {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initialize();
  return ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_(ComFasterxmlJacksonCoreSymFieldNameMatcher_stringsFromNamesWithJavaUtilList_withBoolean_(fields, alreadyInterned));
}

ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_(id<JavaUtilList> names) {
  ComFasterxmlJacksonCoreSymSimpleNameMatcher_initialize();
  return create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(names), ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(ComFasterxmlJacksonCoreSymFieldNameMatcher__lcWithJavaUtilList_(names)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreSymSimpleNameMatcher)
