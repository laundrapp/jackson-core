//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonJsonWriteContext")
#ifdef RESTRICT_ComFasterxmlJacksonCoreJsonJsonWriteContext
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonJsonWriteContext 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreJsonJsonWriteContext 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreJsonJsonWriteContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreJsonJsonWriteContext_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreJsonJsonWriteContext || defined(INCLUDE_ComFasterxmlJacksonCoreJsonJsonWriteContext))
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_

#define RESTRICT_ComFasterxmlJacksonCoreJsonStreamContext 1
#define INCLUDE_ComFasterxmlJacksonCoreJsonStreamContext 1
#include "com/fasterxml/jackson/core/JsonStreamContext.h"

@class ComFasterxmlJacksonCoreJsonDupDetector;

/*!
 @brief Extension of <code>JsonStreamContext</code>, which implements
  core methods needed, and also exposes
  more complete API to generator implementation classes.
 */
@interface ComFasterxmlJacksonCoreJsonJsonWriteContext : ComFasterxmlJacksonCoreJsonStreamContext {
 @public
  /*!
   @brief Parent context for this context; null for root context.
   */
  ComFasterxmlJacksonCoreJsonJsonWriteContext *_parent_;
  ComFasterxmlJacksonCoreJsonDupDetector *_dups_;
  ComFasterxmlJacksonCoreJsonJsonWriteContext *_child_;
  /*!
   @brief Name of the field of which value is to be written; only
  used for OBJECT contexts
   */
  NSString *_currentName_;
  /*!
   @since 2.5
   */
  id _currentValue_;
  /*!
   @brief Marker used to indicate that we just wrote a name, and
  now expect a value to write
   */
  jboolean _gotName_;
}

#pragma mark Public

/*!
 @brief Method that can be used to both clear the accumulated references
  (specifically value set with <code>setCurrentValue(Object)</code>)
  that should not be retained, and returns parent (as would 
 <code>getParent()</code> do).Typically called when closing the active
  context when encountering <code>JsonToken.END_ARRAY</code> or 
 <code>JsonToken.END_OBJECT</code>.
 @since 2.7
 */
- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)clearAndGetParent;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)createChildArrayContext;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)createChildObjectContext;

/*!
 */
+ (ComFasterxmlJacksonCoreJsonJsonWriteContext *)createRootContext;

+ (ComFasterxmlJacksonCoreJsonJsonWriteContext *)createRootContextWithComFasterxmlJacksonCoreJsonDupDetector:(ComFasterxmlJacksonCoreJsonDupDetector *)dd;

- (NSString *)getCurrentName;

- (id)getCurrentValue;

- (ComFasterxmlJacksonCoreJsonDupDetector *)getDupDetector;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)getParent;

- (jboolean)hasCurrentName;

- (void)setCurrentValueWithId:(id)v;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)withDupDetectorWithComFasterxmlJacksonCoreJsonDupDetector:(ComFasterxmlJacksonCoreJsonDupDetector *)dups;

/*!
 @brief Method that writer is to call before it writes a field name.
 @return Index of the field entry (0-based)
 */
- (jint)writeFieldNameWithNSString:(NSString *)name;

- (jint)writeValue;

#pragma mark Protected

- (instancetype __nonnull)initWithInt:(jint)type
withComFasterxmlJacksonCoreJsonJsonWriteContext:(ComFasterxmlJacksonCoreJsonJsonWriteContext *)parent
withComFasterxmlJacksonCoreJsonDupDetector:(ComFasterxmlJacksonCoreJsonDupDetector *)dups;

- (ComFasterxmlJacksonCoreJsonJsonWriteContext *)resetWithInt:(jint)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreJsonStreamContext:(ComFasterxmlJacksonCoreJsonStreamContext *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0
                              withInt:(jint)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreJsonJsonWriteContext)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonJsonWriteContext, _parent_, ComFasterxmlJacksonCoreJsonJsonWriteContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonJsonWriteContext, _dups_, ComFasterxmlJacksonCoreJsonDupDetector *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonJsonWriteContext, _child_, ComFasterxmlJacksonCoreJsonJsonWriteContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonJsonWriteContext, _currentName_, NSString *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonJsonWriteContext, _currentValue_, id)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_OK_AS_IS(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AS_IS 0
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_OK_AS_IS, jint)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_OK_AFTER_COMMA(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA 1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_OK_AFTER_COMMA, jint)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_OK_AFTER_COLON(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COLON 2
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_OK_AFTER_COLON, jint)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_OK_AFTER_SPACE(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_SPACE 3
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_OK_AFTER_SPACE, jint)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_EXPECT_VALUE(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_EXPECT_VALUE, jint)

inline jint ComFasterxmlJacksonCoreJsonJsonWriteContext_get_STATUS_EXPECT_NAME(void);
#define ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_NAME 5
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonCoreJsonJsonWriteContext, STATUS_EXPECT_NAME, jint)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreJsonJsonWriteContext_initWithInt_withComFasterxmlJacksonCoreJsonJsonWriteContext_withComFasterxmlJacksonCoreJsonDupDetector_(ComFasterxmlJacksonCoreJsonJsonWriteContext *self, jint type, ComFasterxmlJacksonCoreJsonJsonWriteContext *parent, ComFasterxmlJacksonCoreJsonDupDetector *dups);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonJsonWriteContext *new_ComFasterxmlJacksonCoreJsonJsonWriteContext_initWithInt_withComFasterxmlJacksonCoreJsonJsonWriteContext_withComFasterxmlJacksonCoreJsonDupDetector_(jint type, ComFasterxmlJacksonCoreJsonJsonWriteContext *parent, ComFasterxmlJacksonCoreJsonDupDetector *dups) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonJsonWriteContext *create_ComFasterxmlJacksonCoreJsonJsonWriteContext_initWithInt_withComFasterxmlJacksonCoreJsonJsonWriteContext_withComFasterxmlJacksonCoreJsonDupDetector_(jint type, ComFasterxmlJacksonCoreJsonJsonWriteContext *parent, ComFasterxmlJacksonCoreJsonDupDetector *dups);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonJsonWriteContext *ComFasterxmlJacksonCoreJsonJsonWriteContext_createRootContext(void);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreJsonJsonWriteContext *ComFasterxmlJacksonCoreJsonJsonWriteContext_createRootContextWithComFasterxmlJacksonCoreJsonDupDetector_(ComFasterxmlJacksonCoreJsonDupDetector *dd);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreJsonJsonWriteContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreJsonJsonWriteContext")
