//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonEncoding.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/ObjectReadContext.h"
#include "com/fasterxml/jackson/core/TokenStreamFactory.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/io/MergedStream.h"
#include "com/fasterxml/jackson/core/io/UTF32Reader.h"
#include "com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.h"
#include "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.h"
#include "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.h"
#include "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.h"
#include "com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/CharConversionException.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"

@interface ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper () {
 @public
  ComFasterxmlJacksonCoreIoIOContext *_context_;
  JavaIoInputStream *_in_;
  IOSByteArray *_inputBuffer_;
  jint _inputPtr_;
  jint _inputEnd_;
  /*!
   @brief Flag that indicates whether buffer above is to be recycled
  after being used or not.
   */
  jboolean _bufferRecyclable_;
  /*!
   @brief Whether input has been detected to be in Big-Endian encoding or not.
   */
  jboolean _bigEndian_;
  jint _bytesPerChar_;
}

/*!
 @return True if a BOM was succesfully found, and encoding
    thereby recognized.
 */
- (jboolean)handleBOMWithInt:(jint)quad;

- (jboolean)checkUTF32WithInt:(jint)quad;

- (jboolean)checkUTF16WithInt:(jint)i16;

- (void)reportWeirdUCS4WithNSString:(NSString *)type;

@end

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, _context_, ComFasterxmlJacksonCoreIoIOContext *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, _in_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, _inputBuffer_, IOSByteArray *)

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_handleBOMWithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint quad);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF32WithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint quad);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF16WithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint i16);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, NSString *type);

@implementation ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                               withJavaIoInputStream:(JavaIoInputStream *)inArg {
  ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_(self, ctxt, inArg);
  return self;
}

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                       withByteArray:(IOSByteArray *)inputBuffer
                                                             withInt:(jint)inputStart
                                                             withInt:(jint)inputLen {
  ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_(self, ctxt, inputBuffer, inputStart, inputLen);
  return self;
}

- (ComFasterxmlJacksonCoreJsonEncoding *)detectEncoding {
  jboolean foundEncoding = false;
  if ([self ensureLoadedWithInt:4]) {
    jint quad = (JreLShift32(IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_), 24)) | (JreLShift32((IOSByteArray_Get(_inputBuffer_, _inputPtr_ + 1) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(_inputBuffer_, _inputPtr_ + 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(_inputBuffer_, _inputPtr_ + 3) & (jint) 0xFF);
    if (ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_handleBOMWithInt_(self, quad)) {
      foundEncoding = true;
    }
    else {
      if (ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF32WithInt_(self, quad)) {
        foundEncoding = true;
      }
      else if (ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF16WithInt_(self, JreURShift32(quad, 16))) {
        foundEncoding = true;
      }
    }
  }
  else if ([self ensureLoadedWithInt:2]) {
    jint i16 = (JreLShift32((IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_) & (jint) 0xFF), 8)) | (IOSByteArray_Get(_inputBuffer_, _inputPtr_ + 1) & (jint) 0xFF);
    if (ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF16WithInt_(self, i16)) {
      foundEncoding = true;
    }
  }
  ComFasterxmlJacksonCoreJsonEncoding *enc;
  if (!foundEncoding) {
    enc = JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF8);
  }
  else {
    switch (_bytesPerChar_) {
      case 1:
      enc = JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF8);
      break;
      case 2:
      enc = _bigEndian_ ? JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_BE) : JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF16_LE);
      break;
      case 4:
      enc = _bigEndian_ ? JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_BE) : JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF32_LE);
      break;
      default:
      @throw create_JavaLangRuntimeException_initWithNSString_(@"Internal error");
    }
  }
  [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_context_)) setEncodingWithComFasterxmlJacksonCoreJsonEncoding:enc];
  return enc;
}

+ (jint)skipUTF8BOMWithJavaIoDataInput:(id<JavaIoDataInput>)input {
  return ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_skipUTF8BOMWithJavaIoDataInput_(input);
}

- (JavaIoReader *)constructReader {
  ComFasterxmlJacksonCoreJsonEncoding *enc = [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_context_)) getEncoding];
  switch ([((ComFasterxmlJacksonCoreJsonEncoding *) nil_chk(enc)) bits]) {
    case 8:
    case 16:
    {
      JavaIoInputStream *in = _in_;
      if (in == nil) {
        in = create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(_inputBuffer_, _inputPtr_, _inputEnd_);
      }
      else {
        if (_inputPtr_ < _inputEnd_) {
          in = create_ComFasterxmlJacksonCoreIoMergedStream_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_(_context_, in, _inputBuffer_, _inputPtr_, _inputEnd_);
        }
      }
      return create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(in, [enc getJavaName]);
    }
    case 32:
    return create_ComFasterxmlJacksonCoreIoUTF32Reader_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_withByteArray_withInt_withInt_withBoolean_(_context_, _in_, _inputBuffer_, _inputPtr_, _inputEnd_, [((ComFasterxmlJacksonCoreJsonEncoding *) nil_chk([_context_ getEncoding])) isBigEndian]);
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Internal error");
}

- (ComFasterxmlJacksonCoreJsonParser *)constructParserWithComFasterxmlJacksonCoreObjectReadContext:(id<ComFasterxmlJacksonCoreObjectReadContext>)readCtxt
                                                                                           withInt:(jint)parserFeatures
                                              withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)rootByteSymbols
                                            withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:(ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *)rootCharSymbols
                                                                                           withInt:(jint)factoryFeatures {
  ComFasterxmlJacksonCoreJsonEncoding *enc = [self detectEncoding];
  if (enc == JreLoadEnum(ComFasterxmlJacksonCoreJsonEncoding, UTF8)) {
    if ([((ComFasterxmlJacksonCoreTokenStreamFactory_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreTokenStreamFactory_Feature, CANONICALIZE_FIELD_NAMES))) enabledInWithInt:factoryFeatures]) {
      ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *can = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(rootByteSymbols)) makeChildWithInt:factoryFeatures];
      return create_ComFasterxmlJacksonCoreJsonUTF8StreamJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoInputStream_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_withByteArray_withInt_withInt_withBoolean_(readCtxt, _context_, parserFeatures, _in_, can, _inputBuffer_, _inputPtr_, _inputEnd_, _bufferRecyclable_);
    }
  }
  return create_ComFasterxmlJacksonCoreJsonReaderBasedJsonParser_initWithComFasterxmlJacksonCoreObjectReadContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoReader_withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer_(readCtxt, _context_, parserFeatures, [self constructReader], [((ComFasterxmlJacksonCoreSymCharsToNameCanonicalizer *) nil_chk(rootCharSymbols)) makeChildWithInt:factoryFeatures]);
}

- (jboolean)handleBOMWithInt:(jint)quad {
  return ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_handleBOMWithInt_(self, quad);
}

- (jboolean)checkUTF32WithInt:(jint)quad {
  return ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF32WithInt_(self, quad);
}

- (jboolean)checkUTF16WithInt:(jint)i16 {
  return ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF16WithInt_(self, i16);
}

- (void)reportWeirdUCS4WithNSString:(NSString *)type {
  ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(self, type);
}

- (jboolean)ensureLoadedWithInt:(jint)minimum {
  jint gotten = (_inputEnd_ - _inputPtr_);
  while (gotten < minimum) {
    jint count;
    if (_in_ == nil) {
      count = -1;
    }
    else {
      count = [_in_ readWithByteArray:_inputBuffer_ withInt:_inputEnd_ withInt:((IOSByteArray *) nil_chk(_inputBuffer_))->size_ - _inputEnd_];
    }
    if (count < 1) {
      return false;
    }
    _inputEnd_ += count;
    gotten += count;
  }
  return true;
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_in_);
  RELEASE_(_inputBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonEncoding;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, 5, 6, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 8, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 2, -1, -1, -1 },
    { NULL, "Z", 0x4, 13, 8, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withJavaIoInputStream:);
  methods[1].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withByteArray:withInt:withInt:);
  methods[2].selector = @selector(detectEncoding);
  methods[3].selector = @selector(skipUTF8BOMWithJavaIoDataInput:);
  methods[4].selector = @selector(constructReader);
  methods[5].selector = @selector(constructParserWithComFasterxmlJacksonCoreObjectReadContext:withInt:withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:withComFasterxmlJacksonCoreSymCharsToNameCanonicalizer:withInt:);
  methods[6].selector = @selector(handleBOMWithInt:);
  methods[7].selector = @selector(checkUTF32WithInt:);
  methods[8].selector = @selector(checkUTF16WithInt:);
  methods[9].selector = @selector(reportWeirdUCS4WithNSString:);
  methods[10].selector = @selector(ensureLoadedWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8_BOM_1", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_UTF8_BOM_1, 0x19, -1, -1, -1, -1 },
    { "UTF8_BOM_2", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_UTF8_BOM_2, 0x19, -1, -1, -1, -1 },
    { "UTF8_BOM_3", "B", .constantValue.asChar = ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_UTF8_BOM_3, 0x19, -1, -1, -1, -1 },
    { "_context_", "LComFasterxmlJacksonCoreIoIOContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inputBuffer_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inputPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inputEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bufferRecyclable_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bigEndian_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bytesPerChar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreIoIOContext;LJavaIoInputStream;", "LComFasterxmlJacksonCoreIoIOContext;[BII", "LJavaIoIOException;", "skipUTF8BOM", "LJavaIoDataInput;", "constructParser", "LComFasterxmlJacksonCoreObjectReadContext;ILComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;LComFasterxmlJacksonCoreSymCharsToNameCanonicalizer;I", "handleBOM", "I", "checkUTF32", "checkUTF16", "reportWeirdUCS4", "LNSString;", "ensureLoaded" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper = { "ByteSourceJsonBootstrapper", "com.fasterxml.jackson.core.json", ptrTable, methods, fields, 7, 0x11, 11, 11, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper;
}

@end

void ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg) {
  NSObject_init(self);
  self->_bigEndian_ = true;
  JreStrongAssign(&self->_context_, ctxt);
  JreStrongAssign(&self->_in_, inArg);
  JreStrongAssign(&self->_inputBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ctxt)) allocReadIOBuffer]);
  self->_inputEnd_ = self->_inputPtr_ = 0;
  self->_bufferRecyclable_ = true;
}

ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *new_ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_, ctxt, inArg)
}

ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *create_ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_(ComFasterxmlJacksonCoreIoIOContext *ctxt, JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, initWithComFasterxmlJacksonCoreIoIOContext_withJavaIoInputStream_, ctxt, inArg)
}

void ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, IOSByteArray *inputBuffer, jint inputStart, jint inputLen) {
  NSObject_init(self);
  self->_bigEndian_ = true;
  JreStrongAssign(&self->_context_, ctxt);
  JreStrongAssign(&self->_in_, nil);
  JreStrongAssign(&self->_inputBuffer_, inputBuffer);
  self->_inputPtr_ = inputStart;
  self->_inputEnd_ = (inputStart + inputLen);
  self->_bufferRecyclable_ = false;
}

ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *new_ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreIoIOContext *ctxt, IOSByteArray *inputBuffer, jint inputStart, jint inputLen) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_, ctxt, inputBuffer, inputStart, inputLen)
}

ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *create_ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreIoIOContext *ctxt, IOSByteArray *inputBuffer, jint inputStart, jint inputLen) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper, initWithComFasterxmlJacksonCoreIoIOContext_withByteArray_withInt_withInt_, ctxt, inputBuffer, inputStart, inputLen)
}

jint ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_skipUTF8BOMWithJavaIoDataInput_(id<JavaIoDataInput> input) {
  ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_initialize();
  jint b = [((id<JavaIoDataInput>) nil_chk(input)) readUnsignedByte];
  if (b != (jint) 0xEF) {
    return b;
  }
  b = [input readUnsignedByte];
  if (b != (jint) 0xBB) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Unexpected byte 0x", JavaLangInteger_toHexStringWithInt_(b), @" following 0xEF; should get 0xBB as part of UTF-8 BOM"));
  }
  b = [input readUnsignedByte];
  if (b != (jint) 0xBF) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Unexpected byte 0x", JavaLangInteger_toHexStringWithInt_(b), @" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM"));
  }
  return [input readUnsignedByte];
}

jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_handleBOMWithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint quad) {
  switch (quad) {
    case (jint) 0x0000FEFF:
    self->_bigEndian_ = true;
    self->_inputPtr_ += 4;
    self->_bytesPerChar_ = 4;
    return true;
    case (jint) 0xFFFE0000:
    self->_inputPtr_ += 4;
    self->_bytesPerChar_ = 4;
    self->_bigEndian_ = false;
    return true;
    case (jint) 0x0000FFFE:
    ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(self, @"2143");
    break;
    case (jint) 0xFEFF0000:
    ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(self, @"3412");
    break;
    default:
    ;
  }
  jint msw = JreURShift32(quad, 16);
  if (msw == (jint) 0xFEFF) {
    self->_inputPtr_ += 2;
    self->_bytesPerChar_ = 2;
    self->_bigEndian_ = true;
    return true;
  }
  if (msw == (jint) 0xFFFE) {
    self->_inputPtr_ += 2;
    self->_bytesPerChar_ = 2;
    self->_bigEndian_ = false;
    return true;
  }
  if ((JreURShift32(quad, 8)) == (jint) 0xEFBBBF) {
    self->_inputPtr_ += 3;
    self->_bytesPerChar_ = 1;
    self->_bigEndian_ = true;
    return true;
  }
  return false;
}

jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF32WithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint quad) {
  if ((JreRShift32(quad, 8)) == 0) {
    self->_bigEndian_ = true;
  }
  else if ((quad & (jint) 0x00FFFFFF) == 0) {
    self->_bigEndian_ = false;
  }
  else if ((quad & ~(jint) 0x00FF0000) == 0) {
    ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(self, @"3412");
  }
  else if ((quad & ~(jint) 0x0000FF00) == 0) {
    ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(self, @"2143");
  }
  else {
    return false;
  }
  self->_bytesPerChar_ = 4;
  return true;
}

jboolean ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_checkUTF16WithInt_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, jint i16) {
  if ((i16 & (jint) 0xFF00) == 0) {
    self->_bigEndian_ = true;
  }
  else if ((i16 & (jint) 0x00FF) == 0) {
    self->_bigEndian_ = false;
  }
  else {
    return false;
  }
  self->_bytesPerChar_ = 2;
  return true;
}

void ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper_reportWeirdUCS4WithNSString_(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper *self, NSString *type) {
  @throw create_JavaIoCharConversionException_initWithNSString_(JreStrcat("$$$", @"Unsupported UCS-4 endianness (", type, @") detected"));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonByteSourceJsonBootstrapper)
