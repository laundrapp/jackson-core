//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/async/ByteArrayFeeder.h"
#include "com/fasterxml/jackson/core/base/ParserBase.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/json/JsonReadContext.h"
#include "com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.h"
#include "com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.h"
#include "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "com/fasterxml/jackson/core/util/VersionUtil.h"
#include "java/io/OutputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

@interface ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser ()

- (ComFasterxmlJacksonCoreJsonToken *)_startDocumentWithInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_finishBOMWithInt:(jint)bytesHandled;

/*!
 @brief Method that handles initial token type recognition for token
  that has to be either FIELD_NAME or END_OBJECT.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_startFieldNameWithInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_startFieldNameAfterCommaWithInt:(jint)ch;

/*!
 @brief Helper method called to detect type of a value token (at any level), and possibly
  decode it if contained in input buffer.
 Value may be preceded by leading white-space, but no separator (comma).
 */
- (ComFasterxmlJacksonCoreJsonToken *)_startValueWithInt:(jint)ch;

/*!
 @brief Helper method called to parse token that is either a value token in array
  or end-array marker
 */
- (ComFasterxmlJacksonCoreJsonToken *)_startValueExpectCommaWithInt:(jint)ch;

/*!
 @brief Helper method called to detect type of a value token (at any level), and possibly
  decode it if contained in input buffer.
 Value MUST be preceded by a semi-colon (which may be surrounded by white-space)
 */
- (ComFasterxmlJacksonCoreJsonToken *)_startValueExpectColonWithInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_startValueAfterCommaWithInt:(jint)ch;

- (jint)_skipWSWithInt:(jint)ch;

- (ComFasterxmlJacksonCoreJsonToken *)_startSlashCommentWithInt:(jint)fromMinorState;

- (ComFasterxmlJacksonCoreJsonToken *)_finishHashCommentWithInt:(jint)fromMinorState;

- (ComFasterxmlJacksonCoreJsonToken *)_finishCppCommentWithInt:(jint)fromMinorState;

- (ComFasterxmlJacksonCoreJsonToken *)_finishCCommentWithInt:(jint)fromMinorState
                                                 withBoolean:(jboolean)gotStar;

- (ComFasterxmlJacksonCoreJsonToken *)_startAfterCommentWithInt:(jint)fromMinorState;

- (NSString *)_fastParseName;

- (NSString *)_parseMediumNameWithInt:(jint)ptr
                              withInt:(jint)q2;

- (NSString *)_parseMediumName2WithInt:(jint)ptr
                               withInt:(jint)q3
                               withInt:(jint)q2;

/*!
 @brief Slower parsing method which is generally branched to when
  an escape sequence is detected (or alternatively for long
  names, one crossing input buffer boundary).
 Needs to be able to handle more exceptional cases, gets slower,
  and hence is offlined to a separate method.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_parseEscapedNameWithInt:(jint)qlen
                                                       withInt:(jint)currQuad
                                                       withInt:(jint)currQuadBytes;

/*!
 @brief Method called when we see non-white space character other
  than double quote, when expecting a field name.
 In standard mode will just throw an exception; but
  in non-standard modes may be able to parse name.
 */
- (ComFasterxmlJacksonCoreJsonToken *)_handleOddNameWithInt:(jint)ch;

/*!
 @brief Parsing of optionally supported non-standard "unquoted" names: names without
  either double-quotes or apostrophes surrounding them.
 Unlike other
 */
- (ComFasterxmlJacksonCoreJsonToken *)_finishUnquotedNameWithInt:(jint)qlen
                                                         withInt:(jint)currQuad
                                                         withInt:(jint)currQuadBytes;

- (ComFasterxmlJacksonCoreJsonToken *)_finishAposNameWithInt:(jint)qlen
                                                     withInt:(jint)currQuad
                                                     withInt:(jint)currQuadBytes;

- (jint)_decodeSplitEscapedWithInt:(jint)value
                           withInt:(jint)bytesRead;

- (ComFasterxmlJacksonCoreJsonToken *)_finishRegularString;

- (ComFasterxmlJacksonCoreJsonToken *)_finishAposString;

- (jboolean)_decodeSplitMultiByteWithInt:(jint)c
                                 withInt:(jint)type
                             withBoolean:(jboolean)gotNext;

- (jboolean)_decodeSplitUTF8_3WithInt:(jint)prev
                              withInt:(jint)prevCount
                              withInt:(jint)next;

- (jboolean)_decodeSplitUTF8_4WithInt:(jint)prev
                              withInt:(jint)prevCount
                              withInt:(jint)next;

- (jint)_decodeCharEscape;

- (jint)_decodeFastCharEscape;

- (jint)_decodeUTF8_2WithInt:(jint)c
                     withInt:(jint)d;

- (jint)_decodeUTF8_3WithInt:(jint)c
                     withInt:(jint)d
                     withInt:(jint)e;

- (jint)_decodeUTF8_4WithInt:(jint)c
                     withInt:(jint)d
                     withInt:(jint)e
                     withInt:(jint)f;

@end

inline IOSIntArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_get__icUTF8(void);
static IOSIntArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser, _icUTF8, IOSIntArray *)

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishToken(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishTokenWithEOF(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startDocumentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishBOMWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint bytesHandled);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueAfterCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCppCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState, jboolean gotStar);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__fastParseName(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumNameWithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ptr, jint q2);

__attribute__((unused)) static NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumName2WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ptr, jint q3, jint q2);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__handleOddNameWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishUnquotedNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishFieldWithEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint value, jint bytesRead);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitMultiByteWithInt_withInt_withBoolean_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint type, jboolean gotNext);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_3WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint prev, jint prevCount, jint next);

__attribute__((unused)) static jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_4WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint prev, jint prevCount, jint next);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeCharEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_3WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d, jint e);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_4WithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d, jint e, jint f);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser)

IOSIntArray *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;

@implementation ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)parserFeatures
                withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:(ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *)sym {
  ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(self, ctxt, parserFeatures, sym);
  return self;
}

- (id<ComFasterxmlJacksonCoreAsyncByteArrayFeeder>)getNonBlockingInputFeeder {
  return self;
}

- (jboolean)needMoreInput {
  return (_inputPtr_ >= _inputEnd_) && !_endOfInput_;
}

- (void)feedInputWithByteArray:(IOSByteArray *)buf
                       withInt:(jint)start
                       withInt:(jint)end {
  if (_inputPtr_ < _inputEnd_) {
    [self _reportErrorWithNSString:@"Still have %d undecoded bytes, should not call 'feedInput'" withId:JavaLangInteger_valueOfWithInt_(_inputEnd_ - _inputPtr_)];
  }
  if (end < start) {
    [self _reportErrorWithNSString:@"Input end (%d) may not be before start (%d)" withId:JavaLangInteger_valueOfWithInt_(end) withId:JavaLangInteger_valueOfWithInt_(start)];
  }
  if (_endOfInput_) {
    [self _reportErrorWithNSString:@"Already closed, can not feed more input"];
  }
  _currInputProcessed_ += _origBufferLen_;
  _currInputRowStart_ = start - (_inputEnd_ - _currInputRowStart_);
  JreStrongAssign(&_inputBuffer_, buf);
  _inputPtr_ = start;
  _inputEnd_ = end;
  _origBufferLen_ = end - start;
}

- (void)endOfInput {
  _endOfInput_ = true;
}

- (jint)releaseBufferedWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  jint avail = _inputEnd_ - _inputPtr_;
  if (avail > 0) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:_inputBuffer_ withInt:_inputPtr_ withInt:avail];
  }
  return avail;
}

- (jchar)_decodeEscaped {
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
  return ' ';
}

- (ComFasterxmlJacksonCoreJsonToken *)nextToken {
  if (_inputPtr_ >= _inputEnd_) {
    if (_closed_) {
      return nil;
    }
    if (_endOfInput_) {
      if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)) {
        return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishTokenWithEOF(self);
      }
      return [self _eofAsNextToken];
    }
    return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishToken(self);
  }
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  _tokenInputTotal_ = _currInputProcessed_ + _inputPtr_;
  JreStrongAssign(&_binaryValue_, nil);
  jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) & (jint) 0xFF;
  switch (_majorState_) {
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_INITIAL:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startDocumentWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ROOT:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_FIRST:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_FIELD_NEXT:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_OBJECT_VALUE:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_FIRST:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MAJOR_ARRAY_ELEMENT_NEXT:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(self, ch);
    default:
    ;
  }
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
  return nil;
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishToken {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishToken(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishTokenWithEOF {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishTokenWithEOF(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startDocumentWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startDocumentWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishBOMWithInt:(jint)bytesHandled {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishBOMWithInt_(self, bytesHandled);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startFieldNameWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startFieldNameAfterCommaWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startValueWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startValueExpectCommaWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startValueExpectColonWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startValueAfterCommaWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueAfterCommaWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startUnexpectedValueWithBoolean:(jboolean)leadingComma
                                                               withInt:(jint)ch {
  switch (ch) {
    case ']':
    if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inArray]) {
      break;
    }
    case ',':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_MISSING_VALUES)]) {
      --_inputPtr_;
      return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)];
    }
    case '}':
    break;
    case '\'':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
      return [self _startAposString];
    }
    break;
    case '+':
    return [self _finishNonStdTokenWithInt:ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_PLUS_INFINITY withInt:1];
    case 'N':
    return [self _finishNonStdTokenWithInt:ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_NAN withInt:1];
    case 'I':
    return [self _finishNonStdTokenWithInt:ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_INFINITY withInt:1];
  }
  [self _reportUnexpectedCharWithInt:ch withNSString:@"expected a valid value (number, String, array, object, 'true', 'false' or 'null')"];
  return nil;
}

- (jint)_skipWSWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startSlashCommentWithInt:(jint)fromMinorState {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, fromMinorState);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishHashCommentWithInt:(jint)fromMinorState {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, fromMinorState);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishCppCommentWithInt:(jint)fromMinorState {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCppCommentWithInt_(self, fromMinorState);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishCCommentWithInt:(jint)fromMinorState
                                                 withBoolean:(jboolean)gotStar {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(self, fromMinorState, gotStar);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startAfterCommentWithInt:(jint)fromMinorState {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(self, fromMinorState);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startFalseToken {
  jint ptr = _inputPtr_;
  if ((ptr + 4) < _inputEnd_) {
    IOSByteArray *buf = _inputBuffer_;
    if ((IOSByteArray_Get(nil_chk(buf), ptr++) == 'a') && (IOSByteArray_Get(buf, ptr++) == 'l') && (IOSByteArray_Get(buf, ptr++) == 's') && (IOSByteArray_Get(buf, ptr++) == 'e')) {
      jint ch = IOSByteArray_Get(buf, ptr) & (jint) 0xFF;
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        _inputPtr_ = ptr;
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)];
      }
    }
  }
  _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_FALSE;
  return [self _finishKeywordTokenWithNSString:@"false" withInt:1 withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_startTrueToken {
  jint ptr = _inputPtr_;
  if ((ptr + 3) < _inputEnd_) {
    IOSByteArray *buf = _inputBuffer_;
    if ((IOSByteArray_Get(nil_chk(buf), ptr++) == 'r') && (IOSByteArray_Get(buf, ptr++) == 'u') && (IOSByteArray_Get(buf, ptr++) == 'e')) {
      jint ch = IOSByteArray_Get(buf, ptr) & (jint) 0xFF;
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        _inputPtr_ = ptr;
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)];
      }
    }
  }
  _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_TRUE;
  return [self _finishKeywordTokenWithNSString:@"true" withInt:1 withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_startNullToken {
  jint ptr = _inputPtr_;
  if ((ptr + 3) < _inputEnd_) {
    IOSByteArray *buf = _inputBuffer_;
    if ((IOSByteArray_Get(nil_chk(buf), ptr++) == 'u') && (IOSByteArray_Get(buf, ptr++) == 'l') && (IOSByteArray_Get(buf, ptr++) == 'l')) {
      jint ch = IOSByteArray_Get(buf, ptr) & (jint) 0xFF;
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        _inputPtr_ = ptr;
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)];
      }
    }
  }
  _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NULL;
  return [self _finishKeywordTokenWithNSString:@"null" withInt:1 withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishKeywordTokenWithNSString:(NSString *)expToken
                                                              withInt:(jint)matched
                                 withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)result {
  jint end = [((NSString *) nil_chk(expToken)) java_length];
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      _pending32_ = matched;
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_);
    if (matched == end) {
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:result];
      }
      break;
    }
    if (ch != [expToken charAtWithInt:matched]) {
      break;
    }
    ++matched;
    ++_inputPtr_;
  }
  _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_ERROR;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithCopyWithNSString:expToken withInt:0 withInt:matched];
  return [self _finishErrorToken];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishKeywordTokenWithEOFWithNSString:(NSString *)expToken
                                                                     withInt:(jint)matched
                                        withComFasterxmlJacksonCoreJsonToken:(ComFasterxmlJacksonCoreJsonToken *)result {
  if (matched == [((NSString *) nil_chk(expToken)) java_length]) {
    return (JreStrongAssign(&_currToken_, result));
  }
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithCopyWithNSString:expToken withInt:0 withInt:matched];
  return [self _finishErrorTokenWithEOF];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNonStdTokenWithInt:(jint)type
                                                        withInt:(jint)matched {
  NSString *expToken = [self _nonStdTokenWithInt:type];
  jint end = [((NSString *) nil_chk(expToken)) java_length];
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      _nonStdTokenType_ = type;
      _pending32_ = matched;
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NON_STD;
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_);
    if (matched == end) {
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) || (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        return [self _valueNonStdNumberCompleteWithInt:type];
      }
      break;
    }
    if (ch != [expToken charAtWithInt:matched]) {
      break;
    }
    ++matched;
    ++_inputPtr_;
  }
  _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_ERROR;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithCopyWithNSString:expToken withInt:0 withInt:matched];
  return [self _finishErrorToken];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNonStdTokenWithEOFWithInt:(jint)type
                                                               withInt:(jint)matched {
  NSString *expToken = [self _nonStdTokenWithInt:type];
  if (matched == [((NSString *) nil_chk(expToken)) java_length]) {
    return [self _valueNonStdNumberCompleteWithInt:type];
  }
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithCopyWithNSString:expToken withInt:0 withInt:matched];
  return [self _finishErrorTokenWithEOF];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishErrorToken {
  while (_inputPtr_ < _inputEnd_) {
    jint i = (jint) IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    jchar ch = (jchar) i;
    if (JavaLangCharacter_isJavaIdentifierPartWithChar_(ch)) {
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) appendWithChar:ch];
      if ([_textBuffer_ size] < ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_ERROR_TOKEN_LENGTH) {
        continue;
      }
    }
    return [self _reportErrorTokenWithNSString:[((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString]];
  }
  return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishErrorTokenWithEOF {
  return [self _reportErrorTokenWithNSString:[((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString]];
}

- (ComFasterxmlJacksonCoreJsonToken *)_reportErrorTokenWithNSString:(NSString *)actualToken {
  [self _reportErrorWithNSString:@"Unrecognized token '%s': was expecting %s" withId:[((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsString] withId:@"'null', 'true' or 'false'"];
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startPositiveNumberWithInt:(jint)ch {
  _numberNegative_ = false;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  *IOSCharArray_GetRef(nil_chk(outBuf), 0) = (jchar) ch;
  if (_inputPtr_ >= _inputEnd_) {
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS;
    [_textBuffer_ setCurrentLengthWithInt:1];
    return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  jint outPtr = 1;
  ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_) & (jint) 0xFF;
  while (true) {
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
        _intLength_ = outPtr;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
        _intLength_ = outPtr;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    if (outPtr >= outBuf->size_) {
      outBuf = [_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
    if (++_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS;
      [_textBuffer_ setCurrentLengthWithInt:outPtr];
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_) & (jint) 0xFF;
  }
  _intLength_ = outPtr;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_startNegativeNumber {
  _numberNegative_ = true;
  if (_inputPtr_ >= _inputEnd_) {
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUS;
    return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) & (jint) 0xFF;
  if (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      return [self _finishNumberLeadingNegZeroes];
    }
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  }
  else if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
    if (ch == 'I') {
      return [self _finishNonStdTokenWithInt:ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_MINUS_INFINITY withInt:2];
    }
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  }
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '-';
  *IOSCharArray_GetRef(outBuf, 1) = (jchar) ch;
  if (_inputPtr_ >= _inputEnd_) {
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS;
    [_textBuffer_ setCurrentLengthWithInt:2];
    _intLength_ = 1;
    return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_);
  jint outPtr = 2;
  while (true) {
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
        _intLength_ = outPtr - 1;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
        _intLength_ = outPtr - 1;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    if (outPtr >= outBuf->size_) {
      outBuf = [_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
    if (++_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS;
      [_textBuffer_ setCurrentLengthWithInt:outPtr];
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_) & (jint) 0xFF;
  }
  _intLength_ = outPtr - 1;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_startNumberLeadingZero {
  jint ptr = _inputPtr_;
  if (ptr >= _inputEnd_) {
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_ZERO;
    return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), ptr++) & (jint) 0xFF;
  if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
      _inputPtr_ = ptr;
      _intLength_ = 1;
      IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
      *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '0';
      return [self _startFloatWithCharArray:outBuf withInt:1 withInt:ch];
    }
  }
  else if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
      _inputPtr_ = ptr;
      _intLength_ = 1;
      IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
      *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '0';
      return [self _startFloatWithCharArray:outBuf withInt:1 withInt:ch];
    }
    if ((ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) && (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
      [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"];
    }
  }
  else {
    return [self _finishNumberLeadingZeroes];
  }
  return [self _valueCompleteIntWithInt:0 withNSString:@"0"];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberMinusWithInt:(jint)ch {
  if (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      return [self _finishNumberLeadingNegZeroes];
    }
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  }
  else if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
    if (ch == 'I') {
      return [self _finishNonStdTokenWithInt:ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_NON_STD_TOKEN_MINUS_INFINITY withInt:2];
    }
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9) to follow minus sign, for valid numeric value"];
  }
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '-';
  *IOSCharArray_GetRef(outBuf, 1) = (jchar) ch;
  _intLength_ = 1;
  return [self _finishNumberIntegralPartWithCharArray:outBuf withInt:2];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberLeadingZeroes {
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_ZERO;
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) & (jint) 0xFF;
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
        IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
        *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '0';
        _intLength_ = 1;
        return [self _startFloatWithCharArray:outBuf withInt:1 withInt:ch];
      }
    }
    else if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
        IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
        *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '0';
        _intLength_ = 1;
        return [self _startFloatWithCharArray:outBuf withInt:1 withInt:ch];
      }
      if ((ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) && (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"];
      }
    }
    else {
      if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NUMERIC_LEADING_ZEROS)]) {
        [self reportInvalidNumberWithNSString:@"Leading zeroes not allowed"];
      }
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
        continue;
      }
      IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
      *IOSCharArray_GetRef(nil_chk(outBuf), 0) = (jchar) ch;
      _intLength_ = 1;
      return [self _finishNumberIntegralPartWithCharArray:outBuf withInt:1];
    }
    --_inputPtr_;
    return [self _valueCompleteIntWithInt:0 withNSString:@"0"];
  }
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberLeadingNegZeroes {
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUSZERO;
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) & (jint) 0xFF;
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
        IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
        *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '-';
        *IOSCharArray_GetRef(outBuf, 1) = '0';
        _intLength_ = 1;
        return [self _startFloatWithCharArray:outBuf withInt:2 withInt:ch];
      }
    }
    else if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
        IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
        *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '-';
        *IOSCharArray_GetRef(outBuf, 1) = '0';
        _intLength_ = 1;
        return [self _startFloatWithCharArray:outBuf withInt:2 withInt:ch];
      }
      if ((ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) && (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY)) {
        [self reportUnexpectedNumberCharWithInt:ch withNSString:@"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"];
      }
    }
    else {
      if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_NUMERIC_LEADING_ZEROS)]) {
        [self reportInvalidNumberWithNSString:@"Leading zeroes not allowed"];
      }
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
        continue;
      }
      IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
      *IOSCharArray_GetRef(nil_chk(outBuf), 0) = '-';
      *IOSCharArray_GetRef(outBuf, 1) = (jchar) ch;
      _intLength_ = 1;
      return [self _finishNumberIntegralPartWithCharArray:outBuf withInt:2];
    }
    --_inputPtr_;
    return [self _valueCompleteIntWithInt:0 withNSString:@"0"];
  }
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishNumberIntegralPartWithCharArray:(IOSCharArray *)outBuf
                                                                     withInt:(jint)outPtr {
  jint negMod = _numberNegative_ ? -1 : 0;
  while (true) {
    if (_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS;
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_) & (jint) 0xFF;
    if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
        _intLength_ = outPtr + negMod;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    if (ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
        _intLength_ = outPtr + negMod;
        ++_inputPtr_;
        return [self _startFloatWithCharArray:outBuf withInt:outPtr withInt:ch];
      }
      break;
    }
    ++_inputPtr_;
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
  }
  _intLength_ = outPtr + negMod;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_startFloatWithCharArray:(IOSCharArray *)outBuf
                                                       withInt:(jint)outPtr
                                                       withInt:(jint)ch {
  jint fractLen = 0;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PERIOD) {
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = '.';
    while (true) {
      if (_inputPtr_ >= _inputEnd_) {
        [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
        _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_FRACTION_DIGITS;
        _fractLength_ = fractLen;
        return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
      }
      ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
      if (ch < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 || ch > ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
        ch &= (jint) 0xFF;
        if (fractLen == 0) {
          [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Decimal point not followed by a digit"];
        }
        break;
      }
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
      ++fractLen;
    }
  }
  _fractLength_ = fractLen;
  jint expLen = 0;
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
    if (_inputPtr_ >= _inputEnd_) {
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_MARKER;
      _expLength_ = 0;
      return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_MINUS || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PLUS) {
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
      if (_inputPtr_ >= _inputEnd_) {
        [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
        _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS;
        _expLength_ = 0;
        return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
      }
      ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    }
    while (ch >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 && ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
      ++expLen;
      if (outPtr >= outBuf->size_) {
        outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) expandCurrentSegment];
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
      if (_inputPtr_ >= _inputEnd_) {
        [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
        _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS;
        _expLength_ = expLen;
        return (JreStrongAssign(&_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
      }
      ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    }
    ch &= (jint) 0xFF;
    if (expLen == 0) {
      [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Exponent indicator not followed by a digit"];
    }
  }
  --_inputPtr_;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) setCurrentLengthWithInt:outPtr];
  _expLength_ = expLen;
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishFloatFraction {
  jint fractLen = _fractLength_;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getBufferWithoutReset];
  jint outPtr = [_textBuffer_ getCurrentSegmentSize];
  jint ch;
  while (((ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++)) >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0) && (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9)) {
    ++fractLen;
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
    if (_inputPtr_ >= _inputEnd_) {
      [_textBuffer_ setCurrentLengthWithInt:outPtr];
      _fractLength_ = fractLen;
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
  }
  if (fractLen == 0) {
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Decimal point not followed by a digit"];
  }
  _fractLength_ = fractLen;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_e || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_E) {
    [_textBuffer_ appendWithChar:(jchar) ch];
    _expLength_ = 0;
    if (_inputPtr_ >= _inputEnd_) {
      _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_MARKER;
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS;
    return [self _finishFloatExponentWithBoolean:true withInt:IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++) & (jint) 0xFF];
  }
  --_inputPtr_;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  _expLength_ = 0;
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishFloatExponentWithBoolean:(jboolean)checkSign
                                                              withInt:(jint)ch {
  if (checkSign) {
    _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS;
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_MINUS || ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_PLUS) {
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) appendWithChar:(jchar) ch];
      if (_inputPtr_ >= _inputEnd_) {
        _minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS;
        _expLength_ = 0;
        return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
      }
      ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
    }
  }
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) getBufferWithoutReset];
  jint outPtr = [_textBuffer_ getCurrentSegmentSize];
  jint expLen = _expLength_;
  while (ch >= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_0 && ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_9) {
    ++expLen;
    if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
      outBuf = [_textBuffer_ expandCurrentSegment];
    }
    *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ch;
    if (_inputPtr_ >= _inputEnd_) {
      [_textBuffer_ setCurrentLengthWithInt:outPtr];
      _expLength_ = expLen;
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
    ch = IOSByteArray_Get(nil_chk(_inputBuffer_), _inputPtr_++);
  }
  ch &= (jint) 0xFF;
  if (expLen == 0) {
    [self reportUnexpectedNumberCharWithInt:ch withNSString:@"Exponent indicator not followed by a digit"];
  }
  --_inputPtr_;
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  _expLength_ = expLen;
  return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
}

- (NSString *)_fastParseName {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__fastParseName(self);
}

- (NSString *)_parseMediumNameWithInt:(jint)ptr
                              withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumNameWithInt_withInt_(self, ptr, q2);
}

- (NSString *)_parseMediumName2WithInt:(jint)ptr
                               withInt:(jint)q3
                               withInt:(jint)q2 {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumName2WithInt_withInt_withInt_(self, ptr, q3, q2);
}

- (ComFasterxmlJacksonCoreJsonToken *)_parseEscapedNameWithInt:(jint)qlen
                                                       withInt:(jint)currQuad
                                                       withInt:(jint)currQuadBytes {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(self, qlen, currQuad, currQuadBytes);
}

- (ComFasterxmlJacksonCoreJsonToken *)_handleOddNameWithInt:(jint)ch {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__handleOddNameWithInt_(self, ch);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishUnquotedNameWithInt:(jint)qlen
                                                         withInt:(jint)currQuad
                                                         withInt:(jint)currQuadBytes {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishUnquotedNameWithInt_withInt_withInt_(self, qlen, currQuad, currQuadBytes);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishAposNameWithInt:(jint)qlen
                                                     withInt:(jint)currQuad
                                                     withInt:(jint)currQuadBytes {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(self, qlen, currQuad, currQuadBytes);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishFieldWithEscape {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishFieldWithEscape(self);
}

- (jint)_decodeSplitEscapedWithInt:(jint)value
                           withInt:(jint)bytesRead {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(self, value, bytesRead);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startString {
  jint ptr = _inputPtr_;
  jint outPtr = 0;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8;
  jint max = JavaLangMath_minWithInt_withInt_(_inputEnd_, (ptr + ((IOSCharArray *) nil_chk(outBuf))->size_));
  IOSByteArray *inputBuffer = _inputBuffer_;
  while (ptr < max) {
    jint c = (jint) IOSByteArray_Get(nil_chk(inputBuffer), ptr) & (jint) 0xFF;
    if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
      if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        _inputPtr_ = ptr + 1;
        [_textBuffer_ setCurrentLengthWithInt:outPtr];
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
      break;
    }
    ++ptr;
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  _inputPtr_ = ptr;
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishRegularString {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_startAposString {
  jint ptr = _inputPtr_;
  jint outPtr = 0;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) emptyAndGetCurrentSegment];
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8;
  jint max = JavaLangMath_minWithInt_withInt_(_inputEnd_, (ptr + ((IOSCharArray *) nil_chk(outBuf))->size_));
  IOSByteArray *inputBuffer = _inputBuffer_;
  while (ptr < max) {
    jint c = (jint) IOSByteArray_Get(nil_chk(inputBuffer), ptr) & (jint) 0xFF;
    if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_APOS) {
      _inputPtr_ = ptr + 1;
      [_textBuffer_ setCurrentLengthWithInt:outPtr];
      return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
    }
    if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
      break;
    }
    ++ptr;
    *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
  }
  [_textBuffer_ setCurrentLengthWithInt:outPtr];
  _inputPtr_ = ptr;
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
}

- (ComFasterxmlJacksonCoreJsonToken *)_finishAposString {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
}

- (jboolean)_decodeSplitMultiByteWithInt:(jint)c
                                 withInt:(jint)type
                             withBoolean:(jboolean)gotNext {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitMultiByteWithInt_withInt_withBoolean_(self, c, type, gotNext);
}

- (jboolean)_decodeSplitUTF8_3WithInt:(jint)prev
                              withInt:(jint)prevCount
                              withInt:(jint)next {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_3WithInt_withInt_withInt_(self, prev, prevCount, next);
}

- (jboolean)_decodeSplitUTF8_4WithInt:(jint)prev
                              withInt:(jint)prevCount
                              withInt:(jint)next {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_4WithInt_withInt_withInt_(self, prev, prevCount, next);
}

- (jint)_decodeCharEscape {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeCharEscape(self);
}

- (jint)_decodeFastCharEscape {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(self);
}

- (jint)_decodeUTF8_2WithInt:(jint)c
                     withInt:(jint)d {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(self, c, d);
}

- (jint)_decodeUTF8_3WithInt:(jint)c
                     withInt:(jint)d
                     withInt:(jint)e {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_3WithInt_withInt_withInt_(self, c, d, e);
}

- (jint)_decodeUTF8_4WithInt:(jint)c
                     withInt:(jint)d
                     withInt:(jint)e
                     withInt:(jint)f {
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_4WithInt_withInt_withInt_withInt_(self, c, d, e, f);
}

- (void)dealloc {
  RELEASE_(_inputBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreAsyncByteArrayFeeder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 6, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 8, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 9, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 10, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 11, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 12, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 13, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 14, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 15, 16, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 17, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 18, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 19, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 20, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 21, 22, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 23, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 24, 25, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 26, 25, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 27, 28, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 29, 28, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 30, 31, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 32, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 33, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 34, 35, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 36, 37, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, 38, 16, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 39, 28, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 40, 41, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, 42, 41, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x2, 43, 7, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x2, 44, 41, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x2, 45, 41, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x2, 46, 28, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x12, 47, 48, 3, -1, -1, -1 },
    { NULL, "Z", 0x12, 49, 41, 3, -1, -1, -1 },
    { NULL, "Z", 0x12, 50, 41, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 51, 28, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 52, 41, 3, -1, -1, -1 },
    { NULL, "I", 0x12, 53, 54, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withInt:withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer:);
  methods[1].selector = @selector(getNonBlockingInputFeeder);
  methods[2].selector = @selector(needMoreInput);
  methods[3].selector = @selector(feedInputWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(endOfInput);
  methods[5].selector = @selector(releaseBufferedWithJavaIoOutputStream:);
  methods[6].selector = @selector(_decodeEscaped);
  methods[7].selector = @selector(nextToken);
  methods[8].selector = @selector(_finishToken);
  methods[9].selector = @selector(_finishTokenWithEOF);
  methods[10].selector = @selector(_startDocumentWithInt:);
  methods[11].selector = @selector(_finishBOMWithInt:);
  methods[12].selector = @selector(_startFieldNameWithInt:);
  methods[13].selector = @selector(_startFieldNameAfterCommaWithInt:);
  methods[14].selector = @selector(_startValueWithInt:);
  methods[15].selector = @selector(_startValueExpectCommaWithInt:);
  methods[16].selector = @selector(_startValueExpectColonWithInt:);
  methods[17].selector = @selector(_startValueAfterCommaWithInt:);
  methods[18].selector = @selector(_startUnexpectedValueWithBoolean:withInt:);
  methods[19].selector = @selector(_skipWSWithInt:);
  methods[20].selector = @selector(_startSlashCommentWithInt:);
  methods[21].selector = @selector(_finishHashCommentWithInt:);
  methods[22].selector = @selector(_finishCppCommentWithInt:);
  methods[23].selector = @selector(_finishCCommentWithInt:withBoolean:);
  methods[24].selector = @selector(_startAfterCommentWithInt:);
  methods[25].selector = @selector(_startFalseToken);
  methods[26].selector = @selector(_startTrueToken);
  methods[27].selector = @selector(_startNullToken);
  methods[28].selector = @selector(_finishKeywordTokenWithNSString:withInt:withComFasterxmlJacksonCoreJsonToken:);
  methods[29].selector = @selector(_finishKeywordTokenWithEOFWithNSString:withInt:withComFasterxmlJacksonCoreJsonToken:);
  methods[30].selector = @selector(_finishNonStdTokenWithInt:withInt:);
  methods[31].selector = @selector(_finishNonStdTokenWithEOFWithInt:withInt:);
  methods[32].selector = @selector(_finishErrorToken);
  methods[33].selector = @selector(_finishErrorTokenWithEOF);
  methods[34].selector = @selector(_reportErrorTokenWithNSString:);
  methods[35].selector = @selector(_startPositiveNumberWithInt:);
  methods[36].selector = @selector(_startNegativeNumber);
  methods[37].selector = @selector(_startNumberLeadingZero);
  methods[38].selector = @selector(_finishNumberMinusWithInt:);
  methods[39].selector = @selector(_finishNumberLeadingZeroes);
  methods[40].selector = @selector(_finishNumberLeadingNegZeroes);
  methods[41].selector = @selector(_finishNumberIntegralPartWithCharArray:withInt:);
  methods[42].selector = @selector(_startFloatWithCharArray:withInt:withInt:);
  methods[43].selector = @selector(_finishFloatFraction);
  methods[44].selector = @selector(_finishFloatExponentWithBoolean:withInt:);
  methods[45].selector = @selector(_fastParseName);
  methods[46].selector = @selector(_parseMediumNameWithInt:withInt:);
  methods[47].selector = @selector(_parseMediumName2WithInt:withInt:withInt:);
  methods[48].selector = @selector(_parseEscapedNameWithInt:withInt:withInt:);
  methods[49].selector = @selector(_handleOddNameWithInt:);
  methods[50].selector = @selector(_finishUnquotedNameWithInt:withInt:withInt:);
  methods[51].selector = @selector(_finishAposNameWithInt:withInt:withInt:);
  methods[52].selector = @selector(_finishFieldWithEscape);
  methods[53].selector = @selector(_decodeSplitEscapedWithInt:withInt:);
  methods[54].selector = @selector(_startString);
  methods[55].selector = @selector(_finishRegularString);
  methods[56].selector = @selector(_startAposString);
  methods[57].selector = @selector(_finishAposString);
  methods[58].selector = @selector(_decodeSplitMultiByteWithInt:withInt:withBoolean:);
  methods[59].selector = @selector(_decodeSplitUTF8_3WithInt:withInt:withInt:);
  methods[60].selector = @selector(_decodeSplitUTF8_4WithInt:withInt:withInt:);
  methods[61].selector = @selector(_decodeCharEscape);
  methods[62].selector = @selector(_decodeFastCharEscape);
  methods[63].selector = @selector(_decodeUTF8_2WithInt:withInt:);
  methods[64].selector = @selector(_decodeUTF8_3WithInt:withInt:withInt:);
  methods[65].selector = @selector(_decodeUTF8_4WithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_icUTF8", "[I", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "_icLatin1", "[I", .constantValue.asLong = 0, 0x1c, -1, 56, -1, -1 },
    { "_inputBuffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_origBufferLen_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreIoIOContext;ILComFasterxmlJacksonCoreSymByteQuadsCanonicalizer;", "feedInput", "[BII", "LJavaIoIOException;", "releaseBuffered", "LJavaIoOutputStream;", "_startDocument", "I", "_finishBOM", "_startFieldName", "_startFieldNameAfterComma", "_startValue", "_startValueExpectComma", "_startValueExpectColon", "_startValueAfterComma", "_startUnexpectedValue", "ZI", "_skipWS", "_startSlashComment", "_finishHashComment", "_finishCppComment", "_finishCComment", "IZ", "_startAfterComment", "_finishKeywordToken", "LNSString;ILComFasterxmlJacksonCoreJsonToken;", "_finishKeywordTokenWithEOF", "_finishNonStdToken", "II", "_finishNonStdTokenWithEOF", "_reportErrorToken", "LNSString;", "_startPositiveNumber", "_finishNumberMinus", "_finishNumberIntegralPart", "[CI", "_startFloat", "[CII", "_finishFloatExponent", "_parseMediumName", "_parseMediumName2", "III", "_parseEscapedName", "_handleOddName", "_finishUnquotedName", "_finishAposName", "_decodeSplitEscaped", "_decodeSplitMultiByte", "IIZ", "_decodeSplitUTF8_3", "_decodeSplitUTF8_4", "_decodeUTF8_2", "_decodeUTF8_3", "_decodeUTF8_4", "IIII", &ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8, &ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser = { "NonBlockingJsonParser", "com.fasterxml.jackson.core.json.async", ptrTable, methods, fields, 7, 0x1, 66, 4, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8, ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8());
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1, ComFasterxmlJacksonCoreIoCharTypes_getInputCodeLatin1());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser)
  }
}

@end

void ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym) {
  ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(self, ctxt, parserFeatures, sym);
  JreStrongAssign(&self->_inputBuffer_, JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, NO_BYTES));
}

ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *new_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_, ctxt, parserFeatures, sym)
}

ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *create_ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser_initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_(ComFasterxmlJacksonCoreIoIOContext *ctxt, jint parserFeatures, ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *sym) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser, initWithComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSymByteQuadsCanonicalizer_, ctxt, parserFeatures, sym)
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishToken(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  switch (self->_minorState_) {
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_BOM:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishBOMWithInt_(self, self->_pending32_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(self, self->_quadLength_, self->_pending32_, self->_pendingBytes_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME_ESCAPE:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishFieldWithEscape(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_APOS_NAME:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(self, self->_quadLength_, self->_pending32_, self->_pendingBytes_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_UNQUOTED_NAME:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishUnquotedNameWithInt_withInt_withInt_(self, self->_quadLength_, self->_pending32_, self->_pendingBytes_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueAfterCommaWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(self, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NULL:
    return [self _finishKeywordTokenWithNSString:@"null" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_TRUE:
    return [self _finishKeywordTokenWithNSString:@"true" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_FALSE:
    return [self _finishKeywordTokenWithNSString:@"false" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NON_STD:
    return [self _finishNonStdTokenWithInt:self->_nonStdTokenType_ withInt:self->_pending32_];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUS:
    return [self _finishNumberMinusWithInt:IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_ZERO:
    return [self _finishNumberLeadingZeroes];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUSZERO:
    return [self _finishNumberLeadingNegZeroes];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS:
    return [self _finishNumberIntegralPartWithCharArray:[((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) getBufferWithoutReset] withInt:[self->_textBuffer_ getCurrentSegmentSize]];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_FRACTION_DIGITS:
    return [self _finishFloatFraction];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_MARKER:
    return [self _finishFloatExponentWithBoolean:true withInt:IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS:
    return [self _finishFloatExponentWithBoolean:false withInt:IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_2:
    [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(self, self->_pending32_, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++))];
    if (self->_minorStateAfterSplit_ == ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_3:
    if (!ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_3WithInt_withInt_withInt_(self, self->_pending32_, self->_pendingBytes_, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++))) {
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
    if (self->_minorStateAfterSplit_ == ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_4:
    if (!ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_4WithInt_withInt_withInt_(self, self->_pending32_, self->_pendingBytes_, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++))) {
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
    if (self->_minorStateAfterSplit_ == ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_ESCAPE:
    {
      jint c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(self, self->_quoted32_, self->_quotedDigits_);
      if (c < 0) {
        return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
      }
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) c];
    }
    if (self->_minorStateAfterSplit_ == ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(self);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_ERROR:
    return [self _finishErrorToken];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_LEADING_SLASH:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, self->_pending32_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CLOSING_ASTERISK:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(self, self->_pending32_, true);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_C:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(self, self->_pending32_, false);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CPP:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCppCommentWithInt_(self, self->_pending32_);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_YAML:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, self->_pending32_);
  }
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
  return nil;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishTokenWithEOF(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  ComFasterxmlJacksonCoreJsonToken *t = self->_currToken_;
  switch (self->_minorState_) {
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_GOT_SEPARATOR:
    return [self _eofAsNextToken];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS:
    return [self _eofAsNextToken];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NULL:
    return [self _finishKeywordTokenWithEOFWithNSString:@"null" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NULL)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_TRUE:
    return [self _finishKeywordTokenWithEOFWithNSString:@"true" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_TRUE)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_FALSE:
    return [self _finishKeywordTokenWithEOFWithNSString:@"false" withInt:self->_pending32_ withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_FALSE)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_NON_STD:
    return [self _finishNonStdTokenWithEOFWithInt:self->_nonStdTokenType_ withInt:self->_pending32_];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_TOKEN_ERROR:
    return [self _finishErrorTokenWithEOF];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_ZERO:
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_MINUSZERO:
    return [self _valueCompleteIntWithInt:0 withNSString:@"0"];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_INTEGER_DIGITS:
    {
      jint len = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) getCurrentSegmentSize];
      if (self->_numberNegative_) {
        --len;
      }
      self->_intLength_ = len;
    }
    return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_FRACTION_DIGITS:
    self->_expLength_ = 0;
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_DIGITS:
    return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_NUMBER_EXPONENT_MARKER:
    [self _reportInvalidEOFWithNSString:@": was expecting fraction after exponent marker" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CLOSING_ASTERISK:
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_C:
    [self _reportInvalidEOFWithNSString:@": was expecting closing '*/' for comment" withComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)];
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CPP:
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_YAML:
    return [self _eofAsNextToken];
    default:
    ;
  }
  [self _reportInvalidEOFWithNSString:JreStrcat("$IC", @": was expecting rest of token (internal state: ", self->_minorState_, ')') withComFasterxmlJacksonCoreJsonToken:self->_currToken_];
  return t;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startDocumentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  ch &= (jint) 0xFF;
  if ((ch == (jint) 0xEF) && (self->_minorState_ != ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_BOM)) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishBOMWithInt_(self, 1);
  }
  while (ch <= (jint) 0x020) {
    if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ++self->_currInputRowAlt_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:ch];
      }
    }
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_GOT_SEPARATOR;
      if (self->_closed_) {
        return nil;
      }
      if (self->_endOfInput_) {
        return [self _eofAsNextToken];
      }
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
    }
    ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, ch);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishBOMWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint bytesHandled) {
  while (self->_inputPtr_ < self->_inputEnd_) {
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    switch (bytesHandled) {
      case 3:
      self->_currInputProcessed_ -= 3;
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startDocumentWithInt_(self, ch);
      case 2:
      if (ch != (jint) 0xBF) {
        [self _reportErrorWithNSString:@"Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM" withId:JavaLangInteger_valueOfWithInt_(ch)];
      }
      break;
      case 1:
      if (ch != (jint) 0xBB) {
        [self _reportErrorWithNSString:@"Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM" withId:JavaLangInteger_valueOfWithInt_(ch)];
      }
      break;
    }
    ++bytesHandled;
  }
  self->_pending32_ = bytesHandled;
  self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_ROOT_BOM;
  return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
      return [self _closeObjectScope];
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__handleOddNameWithInt_(self, ch);
  }
  if ((self->_inputPtr_ + 13) <= self->_inputEnd_) {
    NSString *n = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__fastParseName(self);
    if (n != nil) {
      return [self _fieldCompleteWithNSString:n];
    }
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(self, 0, 0, 0);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA;
      return self->_currToken_;
    }
  }
  if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
      return [self _closeObjectScope];
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA);
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA);
    }
    [self _reportUnexpectedCharWithInt:ch withNSString:JreStrcat("$$$", @"was expecting comma to separate ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) typeDesc], @" entries")];
  }
  jint ptr = self->_inputPtr_;
  if (ptr >= self->_inputEnd_) {
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), ptr);
  self->_inputPtr_ = ptr + 1;
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
      if ([((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA))) enabledInWithInt:self->_features_]) {
        return [self _closeObjectScope];
      }
    }
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__handleOddNameWithInt_(self, ch);
  }
  if ((self->_inputPtr_ + 13) <= self->_inputEnd_) {
    NSString *n = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__fastParseName(self);
    if (n != nil) {
      return [self _fieldCompleteWithNSString:n];
    }
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(self, 0, 0, 0);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return [self _startString];
  }
  switch (ch) {
    case '#':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS);
    case '-':
    return [self _startNegativeNumber];
    case '/':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS);
    case '0':
    return [self _startNumberLeadingZero];
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return [self _startPositiveNumberWithInt:ch];
    case 'f':
    return [self _startFalseToken];
    case 'n':
    return [self _startNullToken];
    case 't':
    return [self _startTrueToken];
    case '[':
    return [self _startArrayScope];
    case ']':
    return [self _closeArrayScope];
    case '{':
    return [self _startObjectScope];
    case '}':
    return [self _closeObjectScope];
    default:
    ;
  }
  return [self _startUnexpectedValueWithBoolean:false withInt:ch];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA;
      return self->_currToken_;
    }
  }
  if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COMMA) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RBRACKET) {
      return [self _closeArrayScope];
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_RCURLY) {
      return [self _closeObjectScope];
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA);
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA);
    }
    [self _reportUnexpectedCharWithInt:ch withNSString:JreStrcat("$$$", @"was expecting comma to separate ", [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(self->_parsingContext_)) typeDesc], @" entries")];
  }
  jint ptr = self->_inputPtr_;
  if (ptr >= self->_inputEnd_) {
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), ptr);
  self->_inputPtr_ = ptr + 1;
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return [self _startString];
  }
  switch (ch) {
    case '#':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA);
    case '-':
    return [self _startNegativeNumber];
    case '/':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA);
    case '0':
    return [self _startNumberLeadingZero];
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return [self _startPositiveNumberWithInt:ch];
    case 'f':
    return [self _startFalseToken];
    case 'n':
    return [self _startNullToken];
    case 't':
    return [self _startTrueToken];
    case '[':
    return [self _startArrayScope];
    case ']':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA)]) {
      return [self _closeArrayScope];
    }
    break;
    case '{':
    return [self _startObjectScope];
    case '}':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA)]) {
      return [self _closeObjectScope];
    }
    break;
    default:
    ;
  }
  return [self _startUnexpectedValueWithBoolean:true withInt:ch];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON;
      return self->_currToken_;
    }
  }
  if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_COLON) {
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON);
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_HASH) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON);
    }
    [self _reportUnexpectedCharWithInt:ch withNSString:@"was expecting a colon to separate field name and value"];
  }
  jint ptr = self->_inputPtr_;
  if (ptr >= self->_inputEnd_) {
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), ptr);
  self->_inputPtr_ = ptr + 1;
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return [self _startString];
  }
  switch (ch) {
    case '#':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS);
    case '-':
    return [self _startNegativeNumber];
    case '/':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS);
    case '0':
    return [self _startNumberLeadingZero];
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return [self _startPositiveNumberWithInt:ch];
    case 'f':
    return [self _startFalseToken];
    case 'n':
    return [self _startNullToken];
    case 't':
    return [self _startTrueToken];
    case '[':
    return [self _startArrayScope];
    case '{':
    return [self _startObjectScope];
    default:
    ;
  }
  return [self _startUnexpectedValueWithBoolean:false withInt:ch];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueAfterCommaWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  if (ch <= (jint) 0x0020) {
    ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(self, ch);
    if (ch <= 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA;
      return self->_currToken_;
    }
  }
  [self _updateTokenLocation];
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    return [self _startString];
  }
  switch (ch) {
    case '#':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA);
    case '-':
    return [self _startNegativeNumber];
    case '/':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA);
    case '0':
    return [self _startNumberLeadingZero];
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    return [self _startPositiveNumberWithInt:ch];
    case 'f':
    return [self _startFalseToken];
    case 'n':
    return [self _startNullToken];
    case 't':
    return [self _startTrueToken];
    case '[':
    return [self _startArrayScope];
    case ']':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA)]) {
      return [self _closeArrayScope];
    }
    break;
    case '{':
    return [self _startObjectScope];
    case '}':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_TRAILING_COMMA)]) {
      return [self _closeObjectScope];
    }
    break;
    default:
    ;
  }
  return [self _startUnexpectedValueWithBoolean:true withInt:ch];
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__skipWSWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  do {
    if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ++self->_currInputRowAlt_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:ch];
      }
    }
    if (self->_inputPtr_ >= self->_inputEnd_) {
      JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE));
      return 0;
    }
    ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
  }
  while (ch <= (jint) 0x0020);
  return ch;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState) {
  if (![((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_COMMENTS))) enabledInWithInt:self->_features_]) {
    [self _reportUnexpectedCharWithInt:'/' withNSString:@"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"];
  }
  if (self->_inputPtr_ >= self->_inputEnd_) {
    self->_pending32_ = fromMinorState;
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_LEADING_SLASH;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_ASTERISK) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(self, fromMinorState, false);
  }
  if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCppCommentWithInt_(self, fromMinorState);
  }
  [self _reportUnexpectedCharWithInt:ch & (jint) 0xFF withNSString:@"was expecting either '*' or '/' for a comment"];
  return nil;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState) {
  if (![((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_YAML_COMMENTS))) enabledInWithInt:self->_features_]) {
    [self _reportUnexpectedCharWithInt:'#' withNSString:@"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_YAML_COMMENTS' not enabled for parser)"];
  }
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_YAML;
      self->_pending32_ = fromMinorState;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    if (ch < (jint) 0x020) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
        break;
      }
      else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ++self->_currInputRowAlt_;
        self->_currInputRowStart_ = self->_inputPtr_;
        break;
      }
      else if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:ch];
      }
    }
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(self, fromMinorState);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCppCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState) {
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CPP;
      self->_pending32_ = fromMinorState;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    if (ch < (jint) 0x020) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
        break;
      }
      else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ++self->_currInputRowAlt_;
        self->_currInputRowStart_ = self->_inputPtr_;
        break;
      }
      else if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:ch];
      }
    }
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(self, fromMinorState);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishCCommentWithInt_withBoolean_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState, jboolean gotStar) {
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = gotStar ? ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_CLOSING_ASTERISK : ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_COMMENT_C;
      self->_pending32_ = fromMinorState;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    if (ch < (jint) 0x020) {
      if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_LF) {
        ++self->_currInputRow_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_CR) {
        ++self->_currInputRowAlt_;
        self->_currInputRowStart_ = self->_inputPtr_;
      }
      else if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_TAB) {
        [self _throwInvalidSpaceWithInt:ch];
      }
    }
    else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_ASTERISK) {
      gotStar = true;
      continue;
    }
    else if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SLASH) {
      if (gotStar) {
        break;
      }
    }
    gotStar = false;
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(self, fromMinorState);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startAfterCommentWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint fromMinorState) {
  if (self->_inputPtr_ >= self->_inputEnd_) {
    self->_minorState_ = fromMinorState;
    return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
  }
  jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
  switch (fromMinorState) {
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startFieldNameAfterCommaWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_LEADING_WS:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectCommaWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_EXPECTING_COLON:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueExpectColonWithInt_(self, ch);
    case ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_WS_AFTER_COMMA:
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startValueAfterCommaWithInt_(self, ch);
    default:
    ;
  }
  ComFasterxmlJacksonCoreUtilVersionUtil_throwInternal();
  return nil;
}

NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__fastParseName(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  IOSByteArray *input = self->_inputBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
  jint ptr = self->_inputPtr_;
  jint q0 = IOSByteArray_Get(nil_chk(input), ptr++) & (jint) 0xFF;
  if (IOSIntArray_Get(nil_chk(codes), q0) == 0) {
    jint i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
    if (IOSIntArray_Get(codes, i) == 0) {
      jint q = (JreLShift32(q0, 8)) | i;
      i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
      if (IOSIntArray_Get(codes, i) == 0) {
        q = (JreLShift32(q, 8)) | i;
        i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
        if (IOSIntArray_Get(codes, i) == 0) {
          q = (JreLShift32(q, 8)) | i;
          i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
          if (IOSIntArray_Get(codes, i) == 0) {
            self->_quad1_ = q;
            return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumNameWithInt_withInt_(self, ptr, i);
          }
          if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
            self->_inputPtr_ = ptr;
            return [self _findNameWithInt:q withInt:4];
          }
          return nil;
        }
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
          self->_inputPtr_ = ptr;
          return [self _findNameWithInt:q withInt:3];
        }
        return nil;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        self->_inputPtr_ = ptr;
        return [self _findNameWithInt:q withInt:2];
      }
      return nil;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      self->_inputPtr_ = ptr;
      return [self _findNameWithInt:q0 withInt:1];
    }
    return nil;
  }
  if (q0 == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    self->_inputPtr_ = ptr;
    return @"";
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumNameWithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ptr, jint q2) {
  IOSByteArray *input = self->_inputBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
  jint i = IOSByteArray_Get(nil_chk(input), ptr++) & (jint) 0xFF;
  if (IOSIntArray_Get(nil_chk(codes), i) == 0) {
    q2 = (JreLShift32(q2, 8)) | i;
    i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
    if (IOSIntArray_Get(codes, i) == 0) {
      q2 = (JreLShift32(q2, 8)) | i;
      i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
      if (IOSIntArray_Get(codes, i) == 0) {
        q2 = (JreLShift32(q2, 8)) | i;
        i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
        if (IOSIntArray_Get(codes, i) == 0) {
          return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumName2WithInt_withInt_withInt_(self, ptr, i, q2);
        }
        if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
          self->_inputPtr_ = ptr;
          return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:4];
        }
        return nil;
      }
      if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        self->_inputPtr_ = ptr;
        return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:3];
      }
      return nil;
    }
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      self->_inputPtr_ = ptr;
      return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:2];
    }
    return nil;
  }
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    self->_inputPtr_ = ptr;
    return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:1];
  }
  return nil;
}

NSString *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseMediumName2WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ptr, jint q3, jint q2) {
  IOSByteArray *input = self->_inputBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
  jint i = IOSByteArray_Get(nil_chk(input), ptr++) & (jint) 0xFF;
  if (IOSIntArray_Get(nil_chk(codes), i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      self->_inputPtr_ = ptr;
      return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:q3 withInt:1];
    }
    return nil;
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      self->_inputPtr_ = ptr;
      return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:q3 withInt:2];
    }
    return nil;
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
  if (IOSIntArray_Get(codes, i) != 0) {
    if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      self->_inputPtr_ = ptr;
      return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:q3 withInt:3];
    }
    return nil;
  }
  q3 = (JreLShift32(q3, 8)) | i;
  i = IOSByteArray_Get(input, ptr++) & (jint) 0xFF;
  if (i == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
    self->_inputPtr_ = ptr;
    return [self _findNameWithInt:self->_quad1_ withInt:q2 withInt:q3 withInt:4];
  }
  return nil;
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes) {
  IOSIntArray *quads = self->_quadBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_quadLength_ = qlen;
      self->_pending32_ = currQuad;
      self->_pendingBytes_ = currQuadBytes;
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    if (IOSIntArray_Get(nil_chk(codes), ch) == 0) {
      if (currQuadBytes < 4) {
        ++currQuadBytes;
        currQuad = (JreLShift32(currQuad, 8)) | ch;
        continue;
      }
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
      continue;
    }
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
      break;
    }
    if (ch != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_BACKSLASH) {
      [self _throwUnquotedSpaceWithInt:ch withNSString:@"name"];
    }
    else {
      ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeCharEscape(self);
      if (ch < 0) {
        self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME_ESCAPE;
        self->_minorStateAfterSplit_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME;
        self->_quadLength_ = qlen;
        self->_pending32_ = currQuad;
        self->_pendingBytes_ = currQuadBytes;
        return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
      }
    }
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    if (ch > 127) {
      if (currQuadBytes >= 4) {
        *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
        currQuad = 0;
        currQuadBytes = 0;
      }
      if (ch < (jint) 0x800) {
        currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xc0 | (JreRShift32(ch, 6)));
        ++currQuadBytes;
      }
      else {
        currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xe0 | (JreRShift32(ch, 12)));
        ++currQuadBytes;
        if (currQuadBytes >= 4) {
          *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
          currQuad = 0;
          currQuadBytes = 0;
        }
        currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
        ++currQuadBytes;
      }
      ch = (jint) 0x80 | (ch & (jint) 0x3f);
    }
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
      continue;
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
    currQuad = ch;
    currQuadBytes = 1;
  }
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(currQuad, currQuadBytes);
  }
  else if (qlen == 0) {
    return [self _fieldCompleteWithNSString:@""];
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = [self _addNameWithIntArray:quads withInt:qlen withInt:currQuadBytes];
  }
  return [self _fieldCompleteWithNSString:name];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__handleOddNameWithInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint ch) {
  switch (ch) {
    case '#':
    if ([((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_YAML_COMMENTS))) enabledInWithInt:self->_features_]) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishHashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS);
    }
    break;
    case '/':
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__startSlashCommentWithInt_(self, ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_LEADING_WS);
    case '\'':
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_SINGLE_QUOTES)]) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(self, 0, 0, 0);
    }
    break;
    case ']':
    return [self _closeArrayScope];
  }
  if (![self isEnabledWithComFasterxmlJacksonCoreJsonParser_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, ALLOW_UNQUOTED_FIELD_NAMES)]) {
    jchar c = (jchar) ch;
    [self _reportUnexpectedCharWithInt:c withNSString:@"was expecting double-quote to start field name"];
  }
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8JsNames();
  if (IOSIntArray_Get(nil_chk(codes), ch) != 0) {
    [self _reportUnexpectedCharWithInt:ch withNSString:@"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"];
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishUnquotedNameWithInt_withInt_withInt_(self, 0, ch, 1);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishUnquotedNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes) {
  IOSIntArray *quads = self->_quadBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreIoCharTypes_getInputCodeUtf8JsNames();
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_quadLength_ = qlen;
      self->_pending32_ = currQuad;
      self->_pendingBytes_ = currQuadBytes;
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_UNQUOTED_NAME;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_) & (jint) 0xFF;
    if (IOSIntArray_Get(nil_chk(codes), ch) != 0) {
      break;
    }
    ++self->_inputPtr_;
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
    }
    else {
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
    }
  }
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = [self _addNameWithIntArray:quads withInt:qlen withInt:currQuadBytes];
  }
  return [self _fieldCompleteWithNSString:name];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint qlen, jint currQuad, jint currQuadBytes) {
  IOSIntArray *quads = self->_quadBuffer_;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icLatin1;
  while (true) {
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_quadLength_ = qlen;
      self->_pending32_ = currQuad;
      self->_pendingBytes_ = currQuadBytes;
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_APOS_NAME;
      return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
    }
    jint ch = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
    if (ch == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_APOS) {
      break;
    }
    if (ch != '"' && IOSIntArray_Get(nil_chk(codes), ch) != 0) {
      if (ch != '\\') {
        [self _throwUnquotedSpaceWithInt:ch withNSString:@"name"];
      }
      else {
        ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeCharEscape(self);
        if (ch < 0) {
          self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME_ESCAPE;
          self->_minorStateAfterSplit_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_APOS_NAME;
          self->_quadLength_ = qlen;
          self->_pending32_ = currQuad;
          self->_pendingBytes_ = currQuadBytes;
          return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
        }
      }
      if (ch > 127) {
        if (currQuadBytes >= 4) {
          if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
            JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
          }
          *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
          currQuad = 0;
          currQuadBytes = 0;
        }
        if (ch < (jint) 0x800) {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xc0 | (JreRShift32(ch, 6)));
          ++currQuadBytes;
        }
        else {
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xe0 | (JreRShift32(ch, 12)));
          ++currQuadBytes;
          if (currQuadBytes >= 4) {
            if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
              JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
            }
            *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
            currQuad = 0;
            currQuadBytes = 0;
          }
          currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
          ++currQuadBytes;
        }
        ch = (jint) 0x80 | (ch & (jint) 0x3f);
      }
    }
    if (currQuadBytes < 4) {
      ++currQuadBytes;
      currQuad = (JreLShift32(currQuad, 8)) | ch;
    }
    else {
      if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
        JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
      }
      *IOSIntArray_GetRef(nil_chk(quads), qlen++) = currQuad;
      currQuad = ch;
      currQuadBytes = 1;
    }
  }
  if (currQuadBytes > 0) {
    if (qlen >= ((IOSIntArray *) nil_chk(quads))->size_) {
      JreStrongAssign(&self->_quadBuffer_, quads = ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(quads, quads->size_));
    }
    *IOSIntArray_GetRef(nil_chk(quads), qlen++) = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase__padLastQuadWithInt_withInt_(currQuad, currQuadBytes);
  }
  else if (qlen == 0) {
    return [self _fieldCompleteWithNSString:@""];
  }
  NSString *name = [((ComFasterxmlJacksonCoreSymByteQuadsCanonicalizer *) nil_chk(self->_symbols_)) findNameWithIntArray:quads withInt:qlen];
  if (name == nil) {
    name = [self _addNameWithIntArray:quads withInt:qlen withInt:currQuadBytes];
  }
  return [self _fieldCompleteWithNSString:name];
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishFieldWithEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  jint ch = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(self, self->_quoted32_, self->_quotedDigits_);
  if (ch < 0) {
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_NAME_ESCAPE;
    return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE);
  }
  if (self->_quadLength_ >= ((IOSIntArray *) nil_chk(self->_quadBuffer_))->size_) {
    JreStrongAssign(&self->_quadBuffer_, ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(self->_quadBuffer_, 32));
  }
  jint currQuad = self->_pending32_;
  jint currQuadBytes = self->_pendingBytes_;
  if (ch > 127) {
    if (currQuadBytes >= 4) {
      *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), self->_quadLength_++) = currQuad;
      currQuad = 0;
      currQuadBytes = 0;
    }
    if (ch < (jint) 0x800) {
      currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xc0 | (JreRShift32(ch, 6)));
      ++currQuadBytes;
    }
    else {
      currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0xe0 | (JreRShift32(ch, 12)));
      if (++currQuadBytes >= 4) {
        *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), self->_quadLength_++) = currQuad;
        currQuad = 0;
        currQuadBytes = 0;
      }
      currQuad = (JreLShift32(currQuad, 8)) | ((jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3f));
      ++currQuadBytes;
    }
    ch = (jint) 0x80 | (ch & (jint) 0x3f);
  }
  if (currQuadBytes < 4) {
    ++currQuadBytes;
    currQuad = (JreLShift32(currQuad, 8)) | ch;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(self->_quadBuffer_), self->_quadLength_++) = currQuad;
    currQuad = ch;
    currQuadBytes = 1;
  }
  if (self->_minorStateAfterSplit_ == ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_FIELD_APOS_NAME) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposNameWithInt_withInt_withInt_(self, self->_quadLength_, currQuad, currQuadBytes);
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__parseEscapedNameWithInt_withInt_withInt_(self, self->_quadLength_, currQuad, currQuadBytes);
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint value, jint bytesRead) {
  if (self->_inputPtr_ >= self->_inputEnd_) {
    self->_quoted32_ = value;
    self->_quotedDigits_ = bytesRead;
    return -1;
  }
  jint c = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  if (bytesRead == -1) {
    switch (c) {
      case 'b':
      return 0x0008;
      case 't':
      return 0x0009;
      case 'n':
      return 0x000a;
      case 'f':
      return 0x000c;
      case 'r':
      return 0x000d;
      case '"':
      case '/':
      case '\\':
      return c;
      case 'u':
      break;
      default:
      {
        jchar ch = (jchar) c;
        return [self _handleUnrecognizedCharacterEscapeWithChar:ch];
      }
    }
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_quotedDigits_ = 0;
      self->_quoted32_ = 0;
      return -1;
    }
    c = IOSByteArray_Get(self->_inputBuffer_, self->_inputPtr_++);
    bytesRead = 0;
  }
  c &= (jint) 0xFF;
  while (true) {
    jint digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(c);
    if (digit < 0) {
      [self _reportUnexpectedCharWithInt:c withNSString:@"expected a hex-digit for character escape sequence"];
    }
    value = (JreLShift32(value, 4)) | digit;
    if (++bytesRead == 4) {
      return value;
    }
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_quotedDigits_ = bytesRead;
      self->_quoted32_ = value;
      return -1;
    }
    c = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++) & (jint) 0xFF;
  }
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishRegularString(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  jint c;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8;
  IOSByteArray *inputBuffer = self->_inputBuffer_;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) getBufferWithoutReset];
  jint outPtr = [self->_textBuffer_ getCurrentSegmentSize];
  jint ptr = self->_inputPtr_;
  jint safeEnd = self->_inputEnd_ - 5;
  while (true) {
    {
      while (true) {
        if (ptr >= self->_inputEnd_) {
          self->_inputPtr_ = ptr;
          self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING;
          [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
          return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
        }
        if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
          outBuf = [self->_textBuffer_ finishCurrentSegment];
          outPtr = 0;
        }
        jint max = JavaLangMath_minWithInt_withInt_(self->_inputEnd_, (ptr + (((IOSCharArray *) nil_chk(outBuf))->size_ - outPtr)));
        while (ptr < max) {
          c = IOSByteArray_Get(nil_chk(inputBuffer), ptr++) & (jint) 0xFF;
          if (IOSIntArray_Get(nil_chk(codes), c) != 0) {
            goto break_ascii_loop;
          }
          *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
        }
      }
      break_ascii_loop: ;
      if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE) {
        self->_inputPtr_ = ptr;
        [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
        return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
      }
      if (ptr >= safeEnd) {
        self->_inputPtr_ = ptr;
        [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
        if (!ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitMultiByteWithInt_withInt_withBoolean_(self, c, IOSIntArray_Get(nil_chk(codes), c), ptr < self->_inputEnd_)) {
          self->_minorStateAfterSplit_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING;
          return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
        }
        outBuf = [self->_textBuffer_ getBufferWithoutReset];
        outPtr = [self->_textBuffer_ getCurrentSegmentSize];
        ptr = self->_inputPtr_;
        goto continue_main_loop;
      }
      switch (IOSIntArray_Get(nil_chk(codes), c)) {
        case 1:
        self->_inputPtr_ = ptr;
        c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(self);
        ptr = self->_inputPtr_;
        break;
        case 2:
        c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), ptr++));
        break;
        case 3:
        {
          jint unseq$1 = ptr++;
          c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_3WithInt_withInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), unseq$1), IOSByteArray_Get(self->_inputBuffer_, ptr++));
        }
        break;
        case 4:
        {
          jint unseq$2 = ptr++;
          jint unseq$3 = ptr++;
          c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_4WithInt_withInt_withInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), unseq$2), IOSByteArray_Get(self->_inputBuffer_, unseq$3), IOSByteArray_Get(self->_inputBuffer_, ptr++));
        }
        *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ((jint) 0xD800 | (JreRShift32(c, 10)));
        if (outPtr >= outBuf->size_) {
          outBuf = [self->_textBuffer_ finishCurrentSegment];
          outPtr = 0;
        }
        c = (jint) 0xDC00 | (c & (jint) 0x3FF);
        break;
        default:
        if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
          [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
        }
        else {
          [self _reportInvalidCharWithInt:c];
        }
      }
      if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
        outBuf = [self->_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    }
    continue_main_loop: ;
  }
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__finishAposString(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  jint c;
  IOSIntArray *codes = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__icUTF8;
  IOSByteArray *inputBuffer = self->_inputBuffer_;
  IOSCharArray *outBuf = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) getBufferWithoutReset];
  jint outPtr = [self->_textBuffer_ getCurrentSegmentSize];
  jint ptr = self->_inputPtr_;
  jint safeEnd = self->_inputEnd_ - 5;
  while (true) {
    {
      while (true) {
        if (ptr >= self->_inputEnd_) {
          self->_inputPtr_ = ptr;
          self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING;
          [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
          return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
        }
        if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
          outBuf = [self->_textBuffer_ finishCurrentSegment];
          outPtr = 0;
        }
        jint max = JavaLangMath_minWithInt_withInt_(self->_inputEnd_, (ptr + (((IOSCharArray *) nil_chk(outBuf))->size_ - outPtr)));
        while (ptr < max) {
          c = IOSByteArray_Get(nil_chk(inputBuffer), ptr++) & (jint) 0xFF;
          if ((IOSIntArray_Get(nil_chk(codes), c) != 0) && (c != ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_QUOTE)) {
            goto break_ascii_loop;
          }
          if (c == ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_APOS) {
            self->_inputPtr_ = ptr;
            [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
            return [self _valueCompleteWithComFasterxmlJacksonCoreJsonToken:JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)];
          }
          *IOSCharArray_GetRef(outBuf, outPtr++) = (jchar) c;
        }
      }
      break_ascii_loop: ;
      if (ptr >= safeEnd) {
        self->_inputPtr_ = ptr;
        [self->_textBuffer_ setCurrentLengthWithInt:outPtr];
        if (!ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitMultiByteWithInt_withInt_withBoolean_(self, c, IOSIntArray_Get(nil_chk(codes), c), ptr < self->_inputEnd_)) {
          self->_minorStateAfterSplit_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_APOS_STRING;
          return (JreStrongAssign(&self->_currToken_, JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, NOT_AVAILABLE)));
        }
        outBuf = [self->_textBuffer_ getBufferWithoutReset];
        outPtr = [self->_textBuffer_ getCurrentSegmentSize];
        ptr = self->_inputPtr_;
        goto continue_main_loop;
      }
      switch (IOSIntArray_Get(nil_chk(codes), c)) {
        case 1:
        self->_inputPtr_ = ptr;
        c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(self);
        ptr = self->_inputPtr_;
        break;
        case 2:
        c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), ptr++));
        break;
        case 3:
        {
          jint unseq$1 = ptr++;
          c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_3WithInt_withInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), unseq$1), IOSByteArray_Get(self->_inputBuffer_, ptr++));
        }
        break;
        case 4:
        {
          jint unseq$2 = ptr++;
          jint unseq$3 = ptr++;
          c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_4WithInt_withInt_withInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), unseq$2), IOSByteArray_Get(self->_inputBuffer_, unseq$3), IOSByteArray_Get(self->_inputBuffer_, ptr++));
        }
        *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) ((jint) 0xD800 | (JreRShift32(c, 10)));
        if (outPtr >= outBuf->size_) {
          outBuf = [self->_textBuffer_ finishCurrentSegment];
          outPtr = 0;
        }
        c = (jint) 0xDC00 | (c & (jint) 0x3FF);
        break;
        default:
        if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
          [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
        }
        else {
          [self _reportInvalidCharWithInt:c];
        }
      }
      if (outPtr >= ((IOSCharArray *) nil_chk(outBuf))->size_) {
        outBuf = [self->_textBuffer_ finishCurrentSegment];
        outPtr = 0;
      }
      *IOSCharArray_GetRef(nil_chk(outBuf), outPtr++) = (jchar) c;
    }
    continue_main_loop: ;
  }
}

jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitMultiByteWithInt_withInt_withBoolean_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint type, jboolean gotNext) {
  switch (type) {
    case 1:
    c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(self, 0, -1);
    if (c < 0) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_ESCAPE;
      return false;
    }
    [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) c];
    return true;
    case 2:
    if (gotNext) {
      c = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(self, c, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++));
      [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) c];
      return true;
    }
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_2;
    self->_pending32_ = c;
    return false;
    case 3:
    c &= (jint) 0x0F;
    if (gotNext) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_3WithInt_withInt_withInt_(self, c, 1, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++));
    }
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_3;
    self->_pending32_ = c;
    self->_pendingBytes_ = 1;
    return false;
    case 4:
    c &= (jint) 0x07;
    if (gotNext) {
      return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_4WithInt_withInt_withInt_(self, c, 1, IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++));
    }
    self->_pending32_ = c;
    self->_pendingBytes_ = 1;
    self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_4;
    return false;
    default:
    if (c < ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
      [self _throwUnquotedSpaceWithInt:c withNSString:@"string value"];
    }
    else {
      [self _reportInvalidCharWithInt:c];
    }
    [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) c];
    return true;
  }
}

jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_3WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint prev, jint prevCount, jint next) {
  if (prevCount == 1) {
    if ((next & (jint) 0xC0) != (jint) 0x080) {
      [self _reportInvalidOtherWithInt:next & (jint) 0xFF withInt:self->_inputPtr_];
    }
    prev = (JreLShift32(prev, 6)) | (next & (jint) 0x3F);
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_3;
      self->_pending32_ = prev;
      self->_pendingBytes_ = 2;
      return false;
    }
    next = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  }
  if ((next & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:next & (jint) 0xFF withInt:self->_inputPtr_];
  }
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) ((JreLShift32(prev, 6)) | (next & (jint) 0x3F))];
  return true;
}

jboolean ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitUTF8_4WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint prev, jint prevCount, jint next) {
  if (prevCount == 1) {
    if ((next & (jint) 0xC0) != (jint) 0x080) {
      [self _reportInvalidOtherWithInt:next & (jint) 0xFF withInt:self->_inputPtr_];
    }
    prev = (JreLShift32(prev, 6)) | (next & (jint) 0x3F);
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_4;
      self->_pending32_ = prev;
      self->_pendingBytes_ = 2;
      return false;
    }
    prevCount = 2;
    next = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  }
  if (prevCount == 2) {
    if ((next & (jint) 0xC0) != (jint) 0x080) {
      [self _reportInvalidOtherWithInt:next & (jint) 0xFF withInt:self->_inputPtr_];
    }
    prev = (JreLShift32(prev, 6)) | (next & (jint) 0x3F);
    if (self->_inputPtr_ >= self->_inputEnd_) {
      self->_minorState_ = ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParserBase_MINOR_VALUE_STRING_UTF8_4;
      self->_pending32_ = prev;
      self->_pendingBytes_ = 3;
      return false;
    }
    next = IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  }
  if ((next & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:next & (jint) 0xFF withInt:self->_inputPtr_];
  }
  jint c = ((JreLShift32(prev, 6)) | (next & (jint) 0x3F)) - (jint) 0x10000;
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) appendWithChar:(jchar) ((jint) 0xD800 | (JreRShift32(c, 10)))];
  c = (jint) 0xDC00 | (c & (jint) 0x3FF);
  [self->_textBuffer_ appendWithChar:(jchar) c];
  return true;
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeCharEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  jint left = self->_inputEnd_ - self->_inputPtr_;
  if (left < 5) {
    return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeSplitEscapedWithInt_withInt_(self, 0, -1);
  }
  return ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(self);
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeFastCharEscape(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self) {
  jint c = (jint) IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
  switch (c) {
    case 'b':
    return 0x0008;
    case 't':
    return 0x0009;
    case 'n':
    return 0x000a;
    case 'f':
    return 0x000c;
    case 'r':
    return 0x000d;
    case '"':
    case '/':
    case '\\':
    return (jchar) c;
    case 'u':
    break;
    default:
    {
      jchar ch = (jchar) c;
      return [self _handleUnrecognizedCharacterEscapeWithChar:ch];
    }
  }
  jint ch = (jint) IOSByteArray_Get(self->_inputBuffer_, self->_inputPtr_++);
  jint digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
  jint result = digit;
  if (digit >= 0) {
    ch = (jint) IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
    digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
    if (digit >= 0) {
      result = (JreLShift32(result, 4)) | digit;
      ch = (jint) IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
      digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
      if (digit >= 0) {
        result = (JreLShift32(result, 4)) | digit;
        ch = (jint) IOSByteArray_Get(nil_chk(self->_inputBuffer_), self->_inputPtr_++);
        digit = ComFasterxmlJacksonCoreIoCharTypes_charToHexWithInt_(ch);
        if (digit >= 0) {
          return (JreLShift32(result, 4)) | digit;
        }
      }
    }
  }
  [self _reportUnexpectedCharWithInt:ch & (jint) 0xFF withNSString:@"expected a hex-digit for character escape sequence"];
  return -1;
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_2WithInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d) {
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:d & (jint) 0xFF withInt:self->_inputPtr_];
  }
  return (JreLShift32((c & (jint) 0x1F), 6)) | (d & (jint) 0x3F);
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_3WithInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d, jint e) {
  c &= (jint) 0x0F;
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:d & (jint) 0xFF withInt:self->_inputPtr_];
  }
  c = (JreLShift32(c, 6)) | (d & (jint) 0x3F);
  if ((e & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:e & (jint) 0xFF withInt:self->_inputPtr_];
  }
  return (JreLShift32(c, 6)) | (e & (jint) 0x3F);
}

jint ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser__decodeUTF8_4WithInt_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser *self, jint c, jint d, jint e, jint f) {
  if ((d & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:d & (jint) 0xFF withInt:self->_inputPtr_];
  }
  c = (JreLShift32((c & (jint) 0x07), 6)) | (d & (jint) 0x3F);
  if ((e & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:e & (jint) 0xFF withInt:self->_inputPtr_];
  }
  c = (JreLShift32(c, 6)) | (e & (jint) 0x3F);
  if ((f & (jint) 0xC0) != (jint) 0x080) {
    [self _reportInvalidOtherWithInt:f & (jint) 0xFF withInt:self->_inputPtr_];
  }
  return ((JreLShift32(c, 6)) | (f & (jint) 0x3F)) - (jint) 0x10000;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonAsyncNonBlockingJsonParser)
