//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/sym/SimpleNameMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymSimpleNameMatcher")
#ifdef RESTRICT_ComFasterxmlJacksonCoreSymSimpleNameMatcher
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymSimpleNameMatcher 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreSymSimpleNameMatcher 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreSymSimpleNameMatcher

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreSymSimpleNameMatcher_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreSymSimpleNameMatcher || defined(INCLUDE_ComFasterxmlJacksonCoreSymSimpleNameMatcher))
#define ComFasterxmlJacksonCoreSymSimpleNameMatcher_

#define RESTRICT_ComFasterxmlJacksonCoreSymHashedMatcherBase 1
#define INCLUDE_ComFasterxmlJacksonCoreSymHashedMatcherBase 1
#include "com/fasterxml/jackson/core/sym/HashedMatcherBase.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonCoreSymFieldNameMatcher;
@class IOSIntArray;
@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief Basic <code>FieldNameMatcher</code> that uses case-sensitive match and does
  not require (or expect) that names passed as arguments have been 
 <code>String.intern</code>ed.
 */
@interface ComFasterxmlJacksonCoreSymSimpleNameMatcher : ComFasterxmlJacksonCoreSymHashedMatcherBase < JavaIoSerializable >

#pragma mark Public

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructWithJavaUtilList:(id<JavaUtilList>)fieldNames;

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)names;

+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructCaseInsensitiveWithJavaUtilList:(id<JavaUtilList>)fields
                                                                              withBoolean:(jboolean)alreadyInterned;

/*!
 @brief Factory method for constructing case-sensitive matcher that only supports
  matching from `String`.
 */
+ (ComFasterxmlJacksonCoreSymSimpleNameMatcher *)constructFromWithJavaUtilList:(id<JavaUtilList>)fields
                                                                   withBoolean:(jboolean)alreadyInterned;

- (jint)matchByQuadWithInt:(jint)q1;

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2;

- (jint)matchByQuadWithInt:(jint)q1
                   withInt:(jint)q2
                   withInt:(jint)q3;

- (jint)matchByQuadWithIntArray:(IOSIntArray *)q
                        withInt:(jint)qlen;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)primary
                              withComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)secondary;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymSimpleNameMatcher:(ComFasterxmlJacksonCoreSymSimpleNameMatcher *)base
                                                            withNSStringArray:(IOSObjectArray *)nameLookup;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymHashedMatcherBase:(ComFasterxmlJacksonCoreSymHashedMatcherBase *)arg0
                               withComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreSymHashedMatcherBase:(ComFasterxmlJacksonCoreSymHashedMatcherBase *)arg0
                                                            withNSStringArray:(IOSObjectArray *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)arg0
                                   withIntArray:(IOSIntArray *)arg1
                                        withInt:(jint)arg2
 withComFasterxmlJacksonCoreSymFieldNameMatcher:(ComFasterxmlJacksonCoreSymFieldNameMatcher *)arg3
                              withNSStringArray:(IOSObjectArray *)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreSymSimpleNameMatcher)

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withNSStringArray_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *base, IOSObjectArray *nameLookup);

FOUNDATION_EXPORT void ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *self, ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *new_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *create_ComFasterxmlJacksonCoreSymSimpleNameMatcher_initWithComFasterxmlJacksonCoreSymSimpleNameMatcher_withComFasterxmlJacksonCoreSymSimpleNameMatcher_(ComFasterxmlJacksonCoreSymSimpleNameMatcher *primary, ComFasterxmlJacksonCoreSymSimpleNameMatcher *secondary);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructFromWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructWithJavaUtilList_(id<JavaUtilList> fieldNames);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_withBoolean_(id<JavaUtilList> fields, jboolean alreadyInterned);

FOUNDATION_EXPORT ComFasterxmlJacksonCoreSymSimpleNameMatcher *ComFasterxmlJacksonCoreSymSimpleNameMatcher_constructCaseInsensitiveWithJavaUtilList_(id<JavaUtilList> names);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreSymSimpleNameMatcher)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreSymSimpleNameMatcher")
