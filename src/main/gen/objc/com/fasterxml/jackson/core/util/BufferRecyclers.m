//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/BufferRecyclers.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/io/JsonStringEncoder.h"
#include "com/fasterxml/jackson/core/util/BufferRecycler.h"
#include "com/fasterxml/jackson/core/util/BufferRecyclers.h"
#include "com/fasterxml/jackson/core/util/ThreadLocalBufferManager.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/ref/SoftReference.h"

/*!
 @brief Flag that indicates whether <code>BufferRecycler</code> instances should be tracked.
 */
inline ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *ComFasterxmlJacksonCoreUtilBufferRecyclers_get__bufferRecyclerTracker(void);
static ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonCoreUtilBufferRecyclers, _bufferRecyclerTracker, ComFasterxmlJacksonCoreUtilThreadLocalBufferManager *)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreUtilBufferRecyclers)

NSString *ComFasterxmlJacksonCoreUtilBufferRecyclers_SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS = @"com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers";
JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef;
JavaLangThreadLocal *ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef;

@implementation ComFasterxmlJacksonCoreUtilBufferRecyclers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonCoreUtilBufferRecycler *)getBufferRecycler {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_getBufferRecycler();
}

+ (jint)releaseBuffers {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_releaseBuffers();
}

+ (ComFasterxmlJacksonCoreIoJsonStringEncoder *)getJsonStringEncoder {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder();
}

+ (IOSByteArray *)encodeAsUTF8WithNSString:(NSString *)text {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_encodeAsUTF8WithNSString_(text);
}

+ (IOSCharArray *)quoteAsJsonTextWithNSString:(NSString *)rawText {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithNSString_(rawText);
}

+ (void)quoteAsJsonTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)output {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithJavaLangCharSequence_withJavaLangStringBuilder_(input, output);
}

+ (IOSByteArray *)quoteAsJsonUTF8WithNSString:(NSString *)rawText {
  return ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonUTF8WithNSString_(rawText);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreUtilBufferRecycler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreIoJsonStringEncoder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBufferRecycler);
  methods[2].selector = @selector(releaseBuffers);
  methods[3].selector = @selector(getJsonStringEncoder);
  methods[4].selector = @selector(encodeAsUTF8WithNSString:);
  methods[5].selector = @selector(quoteAsJsonTextWithNSString:);
  methods[6].selector = @selector(quoteAsJsonTextWithJavaLangCharSequence:withJavaLangStringBuilder:);
  methods[7].selector = @selector(quoteAsJsonUTF8WithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "_bufferRecyclerTracker", "LComFasterxmlJacksonCoreUtilThreadLocalBufferManager;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "_recyclerRef", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1c, -1, 7, 8, -1 },
    { "_encoderRef", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1c, -1, 9, 10, -1 },
  };
  static const void *ptrTable[] = { "encodeAsUTF8", "LNSString;", "quoteAsJsonText", "LJavaLangCharSequence;LJavaLangStringBuilder;", "quoteAsJsonUTF8", &ComFasterxmlJacksonCoreUtilBufferRecyclers_SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS, &ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker, &ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef, "Ljava/lang/ThreadLocal<Ljava/lang/ref/SoftReference<Lcom/fasterxml/jackson/core/util/BufferRecycler;>;>;", &ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef, "Ljava/lang/ThreadLocal<Ljava/lang/ref/SoftReference<Lcom/fasterxml/jackson/core/io/JsonStringEncoder;>;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreUtilBufferRecyclers = { "BufferRecyclers", "com.fasterxml.jackson.core.util", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreUtilBufferRecyclers;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreUtilBufferRecyclers class]) {
    {
      JreStrongAssign(&ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker, [@"true" isEqual:JavaLangSystem_getPropertyWithNSString_(ComFasterxmlJacksonCoreUtilBufferRecyclers_SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS)] ? ComFasterxmlJacksonCoreUtilThreadLocalBufferManager_instance() : nil);
    }
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef, new_JavaLangThreadLocal_init());
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef, new_JavaLangThreadLocal_init());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreUtilBufferRecyclers)
  }
}

@end

void ComFasterxmlJacksonCoreUtilBufferRecyclers_init(ComFasterxmlJacksonCoreUtilBufferRecyclers *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreUtilBufferRecyclers *new_ComFasterxmlJacksonCoreUtilBufferRecyclers_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreUtilBufferRecyclers, init)
}

ComFasterxmlJacksonCoreUtilBufferRecyclers *create_ComFasterxmlJacksonCoreUtilBufferRecyclers_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreUtilBufferRecyclers, init)
}

ComFasterxmlJacksonCoreUtilBufferRecycler *ComFasterxmlJacksonCoreUtilBufferRecyclers_getBufferRecycler() {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  JavaLangRefSoftReference *ref = [((JavaLangThreadLocal *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef)) get];
  ComFasterxmlJacksonCoreUtilBufferRecycler *br = (ref == nil) ? nil : [((JavaLangRefSoftReference *) nil_chk(ref)) get];
  if (br == nil) {
    br = create_ComFasterxmlJacksonCoreUtilBufferRecycler_init();
    if (ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker != nil) {
      ref = [ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker wrapAndTrackWithComFasterxmlJacksonCoreUtilBufferRecycler:br];
    }
    else {
      ref = create_JavaLangRefSoftReference_initWithId_(br);
    }
    [ComFasterxmlJacksonCoreUtilBufferRecyclers__recyclerRef setWithId:ref];
  }
  return br;
}

jint ComFasterxmlJacksonCoreUtilBufferRecyclers_releaseBuffers() {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  if (ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker != nil) {
    return [ComFasterxmlJacksonCoreUtilBufferRecyclers__bufferRecyclerTracker releaseBuffers];
  }
  return -1;
}

ComFasterxmlJacksonCoreIoJsonStringEncoder *ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder() {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  JavaLangRefSoftReference *ref = [((JavaLangThreadLocal *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef)) get];
  ComFasterxmlJacksonCoreIoJsonStringEncoder *enc = (ref == nil) ? nil : [((JavaLangRefSoftReference *) nil_chk(ref)) get];
  if (enc == nil) {
    enc = create_ComFasterxmlJacksonCoreIoJsonStringEncoder_init();
    [ComFasterxmlJacksonCoreUtilBufferRecyclers__encoderRef setWithId:create_JavaLangRefSoftReference_initWithId_(enc)];
  }
  return enc;
}

IOSByteArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_encodeAsUTF8WithNSString_(NSString *text) {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  return [((ComFasterxmlJacksonCoreIoJsonStringEncoder *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder())) encodeAsUTF8WithNSString:text];
}

IOSCharArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithNSString_(NSString *rawText) {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  return [((ComFasterxmlJacksonCoreIoJsonStringEncoder *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder())) quoteAsStringWithNSString:rawText];
}

void ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonTextWithJavaLangCharSequence_withJavaLangStringBuilder_(id<JavaLangCharSequence> input, JavaLangStringBuilder *output) {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  [((ComFasterxmlJacksonCoreIoJsonStringEncoder *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder())) quoteAsStringWithJavaLangCharSequence:input withJavaLangStringBuilder:output];
}

IOSByteArray *ComFasterxmlJacksonCoreUtilBufferRecyclers_quoteAsJsonUTF8WithNSString_(NSString *rawText) {
  ComFasterxmlJacksonCoreUtilBufferRecyclers_initialize();
  return [((ComFasterxmlJacksonCoreIoJsonStringEncoder *) nil_chk(ComFasterxmlJacksonCoreUtilBufferRecyclers_getJsonStringEncoder())) quoteAsUTF8WithNSString:rawText];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreUtilBufferRecyclers)
