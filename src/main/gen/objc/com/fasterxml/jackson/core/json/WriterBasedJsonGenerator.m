//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonGenerator.h"
#include "com/fasterxml/jackson/core/ObjectWriteContext.h"
#include "com/fasterxml/jackson/core/PrettyPrinter.h"
#include "com/fasterxml/jackson/core/SerializableString.h"
#include "com/fasterxml/jackson/core/TokenStreamContext.h"
#include "com/fasterxml/jackson/core/base/GeneratorBase.h"
#include "com/fasterxml/jackson/core/io/CharTypes.h"
#include "com/fasterxml/jackson/core/io/CharacterEscapes.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/io/NumberOutput.h"
#include "com/fasterxml/jackson/core/json/JsonGeneratorImpl.h"
#include "com/fasterxml/jackson/core/json/JsonWriteContext.h"
#include "com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@interface ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator ()

- (void)writeRawLongWithNSString:(NSString *)text;

- (void)_writeQuotedShortWithShort:(jshort)s;

- (void)_writeQuotedIntWithInt:(jint)i;

- (void)_writeQuotedLongWithLong:(jlong)l;

- (void)_writeQuotedRawWithNSString:(NSString *)value;

- (void)_writeStringWithNSString:(NSString *)text;

- (void)_writeString2WithInt:(jint)len;

/*!
 @brief Method called to write "long strings", strings whose length exceeds
  output buffer length.
 */
- (void)_writeLongStringWithNSString:(NSString *)text;

/*!
 @brief Method called to output textual context which has been copied
  to the output buffer prior to call.If any escaping is needed,
  it will also be handled by the method.
 <p>
  Note: when called, textual content to write is within output
  buffer, right after buffered content (if any). That's why only
  length of that text is passed, as buffer and offset are implied.
 */
- (void)_writeSegmentWithInt:(jint)end;

/*!
 @brief This method called when the string content is already in
  a char buffer, and need not be copied for processing.
 */
- (void)_writeStringWithCharArray:(IOSCharArray *)text
                          withInt:(jint)offset
                          withInt:(jint)len;

- (void)_writeStringASCIIWithInt:(jint)len
                         withInt:(jint)maxNonEscaped;

- (void)_writeSegmentASCIIWithInt:(jint)end
                          withInt:(jint)maxNonEscaped;

- (void)_writeStringASCIIWithCharArray:(IOSCharArray *)text
                               withInt:(jint)offset
                               withInt:(jint)len
                               withInt:(jint)maxNonEscaped;

- (void)_writeStringCustomWithInt:(jint)len;

- (void)_writeSegmentCustomWithInt:(jint)end;

- (void)_writeStringCustomWithCharArray:(IOSCharArray *)text
                                withInt:(jint)offset
                                withInt:(jint)len;

- (jint)_readMoreWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)readBuffer
                               withInt:(jint)inputPtr
                               withInt:(jint)inputEnd
                               withInt:(jint)maxRead;

- (void)_writeNull;

/*!
 @brief Method called to try to either prepend character escape at front of
  given buffer; or if not possible, to write it out directly.
 Uses head and tail pointers (and updates as necessary)
 */
- (void)_prependOrWriteCharacterEscapeWithChar:(jchar)ch
                                       withInt:(jint)escCode;

/*!
 @brief Method called to try to either prepend character escape at front of
  given buffer; or if not possible, to write it out directly.
 @return Pointer to start of prepended entity (if prepended); or 'ptr'
    if not.
 */
- (jint)_prependOrWriteCharacterEscapeWithCharArray:(IOSCharArray *)buffer
                                            withInt:(jint)ptr
                                            withInt:(jint)end
                                           withChar:(jchar)ch
                                            withInt:(jint)escCode;

/*!
 @brief Method called to append escape sequence for given character, at the
  end of standard output buffer; or if not possible, write out directly.
 */
- (void)_appendCharacterEscapeWithChar:(jchar)ch
                               withInt:(jint)escCode;

- (IOSCharArray *)_allocateEntityBuffer OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.9
 */
- (IOSCharArray *)_allocateCopyBuffer OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *name, jboolean commaBefore);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name, jboolean commaBefore);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *name, jboolean commaBefore);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name, jboolean commaBefore);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_writeRawLongWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedShortWithShort_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jshort s);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedIntWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint i);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedLongWithLong_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jlong l);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *value);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *typeMsg);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeString2WithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeLongStringWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len, jint maxNonEscaped);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentASCIIWithInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end, jint maxNonEscaped);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithCharArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len, jint maxNonEscaped);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentCustomWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, IOSByteArray *input, jint inputPtr, jint inputEnd);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer, jint bytesLeft);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, JavaIoInputStream *inArg, IOSByteArray *readBuffer, jint inputPtr, jint inputEnd, jint maxRead);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jchar ch, jint escCode);

__attribute__((unused)) static jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *buffer, jint ptr, jint end, jchar ch, jint escCode);

__attribute__((unused)) static void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jchar ch, jint escCode);

__attribute__((unused)) static IOSCharArray *ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self);

__attribute__((unused)) static IOSCharArray *ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateCopyBuffer(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self);

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator)

IOSCharArray *ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS;

@implementation ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreObjectWriteContext:(id<ComFasterxmlJacksonCoreObjectWriteContext>)writeCtxt
                                     withComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ioCtxt
                                                                    withInt:(jint)features
                                                           withJavaIoWriter:(JavaIoWriter *)w
                              withComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)rootValueSep
                              withComFasterxmlJacksonCoreIoCharacterEscapes:(ComFasterxmlJacksonCoreIoCharacterEscapes *)charEsc
                                   withComFasterxmlJacksonCorePrettyPrinter:(id<ComFasterxmlJacksonCorePrettyPrinter>)pp {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_(self, writeCtxt, ioCtxt, features, w, rootValueSep, charEsc, pp);
  return self;
}

- (id)getOutputTarget {
  return _writer_;
}

- (jint)getOutputBuffered {
  jint len = _outputTail_ - _outputHead_;
  return JavaLangMath_maxWithInt_withInt_(0, len);
}

- (jboolean)canWriteFormattedNumbers {
  return true;
}

- (void)writeFieldNameWithNSString:(NSString *)name {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) writeFieldNameWithNSString:name];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithNSString_withBoolean_(self, name, (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA));
}

- (void)writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) writeFieldNameWithNSString:[((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) getValue]];
  if (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_VALUE) {
    [self _reportErrorWithNSString:@"Can not write a field name, expecting a value"];
  }
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(self, name, (status == ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA));
}

- (void)_writeFieldNameWithNSString:(NSString *)name
                        withBoolean:(jboolean)commaBefore {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithNSString_withBoolean_(self, name, commaBefore);
}

- (void)_writeFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name
                                                         withBoolean:(jboolean)commaBefore {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(self, name, commaBefore);
}

- (void)writeStartArray {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, @"start an array");
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) createChildArrayContext]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '[';
  }
}

- (void)writeStartArrayWithInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, @"start an array");
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) createChildArrayContext]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '[';
  }
}

- (void)writeStartArrayWithId:(id)forValue
                      withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, @"start an array");
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) createChildArrayContextWithId:forValue]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartArrayWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '[';
  }
}

- (void)writeEndArray {
  if (![((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) inArray]) {
    [self _reportErrorWithNSString:JreStrcat("$$", @"Current context not Array but ", [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) typeDesc])];
  }
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeEndArrayWithComFasterxmlJacksonCoreJsonGenerator:self withInt:[((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) getEntryCount]];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = ']';
  }
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) clearAndGetParent]);
}

- (void)writeStartObjectWithId:(id)forValue {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, @"start an object");
  ComFasterxmlJacksonCoreJsonJsonWriteContext *ctxt = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) createChildObjectContextWithId:forValue];
  JreStrongAssign(&_outputContext_, ctxt);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '{';
  }
}

- (void)writeStartObject {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, @"start an object");
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) createChildObjectContext]);
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeStartObjectWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '{';
  }
}

- (void)writeEndObject {
  if (![((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) inObject]) {
    [self _reportErrorWithNSString:JreStrcat("$$", @"Current context not Object but ", [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) typeDesc])];
  }
  if (_cfgPrettyPrinter_ != nil) {
    [_cfgPrettyPrinter_ writeEndObjectWithComFasterxmlJacksonCoreJsonGenerator:self withInt:[((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) getEntryCount]];
  }
  else {
    if (_outputTail_ >= _outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = '}';
  }
  JreStrongAssign(&_outputContext_, [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(_outputContext_)) clearAndGetParent]);
}

- (void)_writePPFieldNameWithNSString:(NSString *)name
                          withBoolean:(jboolean)commaBefore {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithNSString_withBoolean_(self, name, commaBefore);
}

- (void)_writePPFieldNameWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)name
                                                           withBoolean:(jboolean)commaBefore {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(self, name, commaBefore);
}

- (void)writeStringWithNSString:(NSString *)text {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (text == nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(self);
    return;
  }
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, text);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeStringWithJavaIoReader:(JavaIoReader *)reader
                            withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (reader == nil) {
    [self _reportErrorWithNSString:@"null reader"];
  }
  jint toRead = (len >= 0) ? len : JavaLangInteger_MAX_VALUE;
  IOSCharArray *buf = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateCopyBuffer(self);
  if ((_outputTail_ + len) >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  while (toRead > 0) {
    jint toReadNow = JavaLangMath_minWithInt_withInt_(toRead, ((IOSCharArray *) nil_chk(buf))->size_);
    jint numRead = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buf withInt:0 withInt:toReadNow];
    if (numRead <= 0) {
      break;
    }
    if ((_outputTail_ + len) >= _outputEnd_) {
      [self _flushBuffer];
    }
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithCharArray_withInt_withInt_(self, buf, 0, numRead);
    toRead -= numRead;
  }
  if ((_outputTail_ + len) >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  if (toRead > 0 && len >= 0) {
    [self _reportErrorWithNSString:@"Didn't read enough from reader"];
  }
}

- (void)writeStringWithCharArray:(IOSCharArray *)text
                         withInt:(jint)offset
                         withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithCharArray_withInt_withInt_(self, text, offset, len);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeStringWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)sstr {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_STRING);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  IOSCharArray *text = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(sstr)) asQuotedChars];
  jint len = ((IOSCharArray *) nil_chk(text))->size_;
  if (len < ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE) {
    jint room = _outputEnd_ - _outputTail_;
    if (len > room) {
      [self _flushBuffer];
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text, 0, _outputBuffer_, _outputTail_, len);
    _outputTail_ += len;
  }
  else {
    [self _flushBuffer];
    [((JavaIoWriter *) nil_chk(_writer_)) writeWithCharArray:text withInt:0 withInt:len];
  }
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (void)writeRawUTF8StringWithByteArray:(IOSByteArray *)text
                                withInt:(jint)offset
                                withInt:(jint)length {
  [self _reportUnsupportedOperation];
}

- (void)writeUTF8StringWithByteArray:(IOSByteArray *)text
                             withInt:(jint)offset
                             withInt:(jint)length {
  [self _reportUnsupportedOperation];
}

- (void)writeRawWithNSString:(NSString *)text {
  jint len = [((NSString *) nil_chk(text)) java_length];
  jint room = _outputEnd_ - _outputTail_;
  if (room == 0) {
    [self _flushBuffer];
    room = _outputEnd_ - _outputTail_;
  }
  if (room >= len) {
    [text java_getChars:0 sourceEnd:len destination:_outputBuffer_ destinationBegin:_outputTail_];
    _outputTail_ += len;
  }
  else {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_writeRawLongWithNSString_(self, text);
  }
}

- (void)writeRawWithNSString:(NSString *)text
                     withInt:(jint)start
                     withInt:(jint)len {
  jint room = _outputEnd_ - _outputTail_;
  if (room < len) {
    [self _flushBuffer];
    room = _outputEnd_ - _outputTail_;
  }
  if (room >= len) {
    [((NSString *) nil_chk(text)) java_getChars:start sourceEnd:start + len destination:_outputBuffer_ destinationBegin:_outputTail_];
    _outputTail_ += len;
  }
  else {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_writeRawLongWithNSString_(self, [((NSString *) nil_chk(text)) java_substring:start endIndex:start + len]);
  }
}

- (void)writeRawWithComFasterxmlJacksonCoreSerializableString:(id<ComFasterxmlJacksonCoreSerializableString>)text {
  [self writeRawWithNSString:[((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(text)) getValue]];
}

- (void)writeRawWithCharArray:(IOSCharArray *)text
                      withInt:(jint)offset
                      withInt:(jint)len {
  if (len < ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE) {
    jint room = _outputEnd_ - _outputTail_;
    if (len > room) {
      [self _flushBuffer];
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text, offset, _outputBuffer_, _outputTail_, len);
    _outputTail_ += len;
    return;
  }
  [self _flushBuffer];
  [((JavaIoWriter *) nil_chk(_writer_)) writeWithCharArray:text withInt:offset withInt:len];
}

- (void)writeRawWithChar:(jchar)c {
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = c;
}

- (void)writeRawLongWithNSString:(NSString *)text {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_writeRawLongWithNSString_(self, text);
}

- (void)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                              withByteArray:(IOSByteArray *)data
                                                    withInt:(jint)offset
                                                    withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BINARY);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(self, b64variant, data, offset, offset + len);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
}

- (jint)writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                      withJavaIoInputStream:(JavaIoInputStream *)data
                                                    withInt:(jint)dataLength {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BINARY);
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  IOSByteArray *encodingBuffer = [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) allocBase64Buffer];
  jint bytes;
  @try {
    if (dataLength < 0) {
      bytes = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(self, b64variant, data, encodingBuffer);
    }
    else {
      jint missing = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(self, b64variant, data, encodingBuffer, dataLength);
      if (missing > 0) {
        [self _reportErrorWithNSString:JreStrcat("$I$IC", @"Too few bytes available: missing ", missing, @" bytes (out of ", dataLength, ')')];
      }
      bytes = dataLength;
    }
  }
  @finally {
    [_ioContext_ releaseBase64BufferWithByteArray:encodingBuffer];
  }
  if (_outputTail_ >= _outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(_outputBuffer_), _outputTail_++) = _quoteChar_;
  return bytes;
}

- (void)writeNumberWithShort:(jshort)s {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedShortWithShort_(self, s);
    return;
  }
  if ((_outputTail_ + 6) >= _outputEnd_) {
    [self _flushBuffer];
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withCharArray_withInt_(s, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedShortWithShort:(jshort)s {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedShortWithShort_(self, s);
}

- (void)writeNumberWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedIntWithInt_(self, i);
    return;
  }
  if ((_outputTail_ + 11) >= _outputEnd_) {
    [self _flushBuffer];
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withCharArray_withInt_(i, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedIntWithInt:(jint)i {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedIntWithInt_(self, i);
}

- (void)writeNumberWithLong:(jlong)l {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedLongWithLong_(self, l);
    return;
  }
  if ((_outputTail_ + 21) >= _outputEnd_) {
    [self _flushBuffer];
  }
  _outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputLongWithLong_withCharArray_withInt_(l, _outputBuffer_, _outputTail_);
}

- (void)_writeQuotedLongWithLong:(jlong)l {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedLongWithLong_(self, l);
}

- (void)writeNumberWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (value == nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(self);
  }
  else if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(self, [value description]);
  }
  else {
    [self writeRawWithNSString:[value description]];
  }
}

- (void)writeNumberWithDouble:(jdouble)d {
  if (_cfgNumbersAsStrings_ || ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_NON_NUMERIC_NUMBERS)] && ((JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isInfiniteWithDouble_(d))))) {
    [self writeStringWithNSString:NSString_java_valueOfDouble_(d)];
    return;
  }
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  [self writeRawWithNSString:NSString_java_valueOfDouble_(d)];
}

- (void)writeNumberWithFloat:(jfloat)f {
  if (_cfgNumbersAsStrings_ || ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, QUOTE_NON_NUMERIC_NUMBERS)] && ((JavaLangFloat_isNaNWithFloat_(f) || JavaLangFloat_isInfiniteWithFloat_(f))))) {
    [self writeStringWithNSString:NSString_java_valueOfFloat_(f)];
    return;
  }
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  [self writeRawWithNSString:NSString_java_valueOfFloat_(f)];
}

- (void)writeNumberWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (value == nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(self);
  }
  else if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(self, [self _asStringWithJavaMathBigDecimal:value]);
  }
  else {
    [self writeRawWithNSString:[self _asStringWithJavaMathBigDecimal:value]];
  }
}

- (void)writeNumberWithNSString:(NSString *)encodedValue {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NUMBER);
  if (_cfgNumbersAsStrings_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(self, encodedValue);
  }
  else {
    [self writeRawWithNSString:encodedValue];
  }
}

- (void)_writeQuotedRawWithNSString:(NSString *)value {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(self, value);
}

- (void)writeBooleanWithBoolean:(jboolean)state {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_BOOLEAN);
  if ((_outputTail_ + 5) >= _outputEnd_) {
    [self _flushBuffer];
  }
  jint ptr = _outputTail_;
  IOSCharArray *buf = _outputBuffer_;
  if (state) {
    *IOSCharArray_GetRef(nil_chk(buf), ptr) = 't';
    *IOSCharArray_GetRef(buf, ++ptr) = 'r';
    *IOSCharArray_GetRef(buf, ++ptr) = 'u';
    *IOSCharArray_GetRef(buf, ++ptr) = 'e';
  }
  else {
    *IOSCharArray_GetRef(nil_chk(buf), ptr) = 'f';
    *IOSCharArray_GetRef(buf, ++ptr) = 'a';
    *IOSCharArray_GetRef(buf, ++ptr) = 'l';
    *IOSCharArray_GetRef(buf, ++ptr) = 's';
    *IOSCharArray_GetRef(buf, ++ptr) = 'e';
  }
  _outputTail_ = ptr + 1;
}

- (void)writeNull {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, ComFasterxmlJacksonCoreBaseGeneratorBase_WRITE_NULL);
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(self);
}

- (void)_verifyValueWriteWithNSString:(NSString *)typeMsg {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(self, typeMsg);
}

- (void)flush {
  [self _flushBuffer];
  if (_writer_ != nil) {
    if ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, FLUSH_PASSED_TO_STREAM)]) {
      [_writer_ flush];
    }
  }
}

- (void)close {
  [super close];
  if (_outputBuffer_ != nil && [self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_CONTENT)]) {
    while (true) {
      ComFasterxmlJacksonCoreTokenStreamContext *ctxt = [self getOutputContext];
      if ([((ComFasterxmlJacksonCoreTokenStreamContext *) nil_chk(ctxt)) inArray]) {
        [self writeEndArray];
      }
      else if ([ctxt inObject]) {
        [self writeEndObject];
      }
      else {
        break;
      }
    }
  }
  [self _flushBuffer];
  _outputHead_ = 0;
  _outputTail_ = 0;
  if (_writer_ != nil) {
    if ([((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) isResourceManaged] || [self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, AUTO_CLOSE_TARGET)]) {
      [_writer_ close];
    }
    else if ([self isEnabledWithComFasterxmlJacksonCoreJsonGenerator_Feature:JreLoadEnum(ComFasterxmlJacksonCoreJsonGenerator_Feature, FLUSH_PASSED_TO_STREAM)]) {
      [_writer_ flush];
    }
  }
  [self _releaseBuffers];
}

- (void)_releaseBuffers {
  IOSCharArray *buf = _outputBuffer_;
  if (buf != nil) {
    JreStrongAssign(&_outputBuffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseConcatBufferWithCharArray:buf];
  }
  buf = _charBuffer_;
  if (buf != nil) {
    JreStrongAssign(&_charBuffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseNameCopyBufferWithCharArray:buf];
  }
}

- (void)_writeStringWithNSString:(NSString *)text {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, text);
}

- (void)_writeString2WithInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeString2WithInt_(self, len);
}

- (void)_writeLongStringWithNSString:(NSString *)text {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeLongStringWithNSString_(self, text);
}

- (void)_writeSegmentWithInt:(jint)end {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentWithInt_(self, end);
}

- (void)_writeStringWithCharArray:(IOSCharArray *)text
                          withInt:(jint)offset
                          withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithCharArray_withInt_withInt_(self, text, offset, len);
}

- (void)_writeStringASCIIWithInt:(jint)len
                         withInt:(jint)maxNonEscaped {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithInt_withInt_(self, len, maxNonEscaped);
}

- (void)_writeSegmentASCIIWithInt:(jint)end
                          withInt:(jint)maxNonEscaped {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentASCIIWithInt_withInt_(self, end, maxNonEscaped);
}

- (void)_writeStringASCIIWithCharArray:(IOSCharArray *)text
                               withInt:(jint)offset
                               withInt:(jint)len
                               withInt:(jint)maxNonEscaped {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithCharArray_withInt_withInt_withInt_(self, text, offset, len, maxNonEscaped);
}

- (void)_writeStringCustomWithInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithInt_(self, len);
}

- (void)_writeSegmentCustomWithInt:(jint)end {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentCustomWithInt_(self, end);
}

- (void)_writeStringCustomWithCharArray:(IOSCharArray *)text
                                withInt:(jint)offset
                                withInt:(jint)len {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithCharArray_withInt_withInt_(self, text, offset, len);
}

- (void)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                               withByteArray:(IOSByteArray *)input
                                                     withInt:(jint)inputPtr
                                                     withInt:(jint)inputEnd {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(self, b64variant, input, inputPtr, inputEnd);
}

- (jint)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                       withJavaIoInputStream:(JavaIoInputStream *)data
                                               withByteArray:(IOSByteArray *)readBuffer
                                                     withInt:(jint)bytesLeft {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(self, b64variant, data, readBuffer, bytesLeft);
}

- (jint)_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                       withJavaIoInputStream:(JavaIoInputStream *)data
                                               withByteArray:(IOSByteArray *)readBuffer {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(self, b64variant, data, readBuffer);
}

- (jint)_readMoreWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withByteArray:(IOSByteArray *)readBuffer
                               withInt:(jint)inputPtr
                               withInt:(jint)inputEnd
                               withInt:(jint)maxRead {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, inArg, readBuffer, inputPtr, inputEnd, maxRead);
}

- (void)_writeNull {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(self);
}

- (void)_prependOrWriteCharacterEscapeWithChar:(jchar)ch
                                       withInt:(jint)escCode {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(self, ch, escCode);
}

- (jint)_prependOrWriteCharacterEscapeWithCharArray:(IOSCharArray *)buffer
                                            withInt:(jint)ptr
                                            withInt:(jint)end
                                           withChar:(jchar)ch
                                            withInt:(jint)escCode {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(self, buffer, ptr, end, ch, escCode);
}

- (void)_appendCharacterEscapeWithChar:(jchar)ch
                               withInt:(jint)escCode {
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(self, ch, escCode);
}

- (IOSCharArray *)_allocateEntityBuffer {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(self);
}

- (IOSCharArray *)_allocateCopyBuffer {
  return ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateCopyBuffer(self);
}

- (void)_flushBuffer {
  jint len = _outputTail_ - _outputHead_;
  if (len > 0) {
    jint offset = _outputHead_;
    _outputTail_ = _outputHead_ = 0;
    [((JavaIoWriter *) nil_chk(_writer_)) writeWithCharArray:_outputBuffer_ withInt:offset withInt:len];
  }
}

- (void)dealloc {
  RELEASE_(_writer_);
  RELEASE_(_outputBuffer_);
  RELEASE_(_entityBuffer_);
  RELEASE_(_currentEscape_);
  RELEASE_(_charBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 13, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 13, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 22, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, 26, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 27, 26, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 29, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 32, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 32, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 34, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 35, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 36, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 37, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x14, 41, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 47, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 49, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 9, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 9, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 16, 26, -1, -1, -1 },
    { NULL, "V", 0x14, 52, 25, 26, -1, -1, -1 },
    { NULL, "I", 0x14, 52, 53, 26, -1, -1, -1 },
    { NULL, "I", 0x14, 52, 54, 26, -1, -1, -1 },
    { NULL, "I", 0x2, 55, 56, 3, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 58, 26, -1, -1, -1 },
    { NULL, "I", 0x2, 57, 59, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 58, 26, -1, -1, -1 },
    { NULL, "[C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreObjectWriteContext:withComFasterxmlJacksonCoreIoIOContext:withInt:withJavaIoWriter:withComFasterxmlJacksonCoreSerializableString:withComFasterxmlJacksonCoreIoCharacterEscapes:withComFasterxmlJacksonCorePrettyPrinter:);
  methods[1].selector = @selector(getOutputTarget);
  methods[2].selector = @selector(getOutputBuffered);
  methods[3].selector = @selector(canWriteFormattedNumbers);
  methods[4].selector = @selector(writeFieldNameWithNSString:);
  methods[5].selector = @selector(writeFieldNameWithComFasterxmlJacksonCoreSerializableString:);
  methods[6].selector = @selector(_writeFieldNameWithNSString:withBoolean:);
  methods[7].selector = @selector(_writeFieldNameWithComFasterxmlJacksonCoreSerializableString:withBoolean:);
  methods[8].selector = @selector(writeStartArray);
  methods[9].selector = @selector(writeStartArrayWithInt:);
  methods[10].selector = @selector(writeStartArrayWithId:withInt:);
  methods[11].selector = @selector(writeEndArray);
  methods[12].selector = @selector(writeStartObjectWithId:);
  methods[13].selector = @selector(writeStartObject);
  methods[14].selector = @selector(writeEndObject);
  methods[15].selector = @selector(_writePPFieldNameWithNSString:withBoolean:);
  methods[16].selector = @selector(_writePPFieldNameWithComFasterxmlJacksonCoreSerializableString:withBoolean:);
  methods[17].selector = @selector(writeStringWithNSString:);
  methods[18].selector = @selector(writeStringWithJavaIoReader:withInt:);
  methods[19].selector = @selector(writeStringWithCharArray:withInt:withInt:);
  methods[20].selector = @selector(writeStringWithComFasterxmlJacksonCoreSerializableString:);
  methods[21].selector = @selector(writeRawUTF8StringWithByteArray:withInt:withInt:);
  methods[22].selector = @selector(writeUTF8StringWithByteArray:withInt:withInt:);
  methods[23].selector = @selector(writeRawWithNSString:);
  methods[24].selector = @selector(writeRawWithNSString:withInt:withInt:);
  methods[25].selector = @selector(writeRawWithComFasterxmlJacksonCoreSerializableString:);
  methods[26].selector = @selector(writeRawWithCharArray:withInt:withInt:);
  methods[27].selector = @selector(writeRawWithChar:);
  methods[28].selector = @selector(writeRawLongWithNSString:);
  methods[29].selector = @selector(writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withByteArray:withInt:withInt:);
  methods[30].selector = @selector(writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withInt:);
  methods[31].selector = @selector(writeNumberWithShort:);
  methods[32].selector = @selector(_writeQuotedShortWithShort:);
  methods[33].selector = @selector(writeNumberWithInt:);
  methods[34].selector = @selector(_writeQuotedIntWithInt:);
  methods[35].selector = @selector(writeNumberWithLong:);
  methods[36].selector = @selector(_writeQuotedLongWithLong:);
  methods[37].selector = @selector(writeNumberWithJavaMathBigInteger:);
  methods[38].selector = @selector(writeNumberWithDouble:);
  methods[39].selector = @selector(writeNumberWithFloat:);
  methods[40].selector = @selector(writeNumberWithJavaMathBigDecimal:);
  methods[41].selector = @selector(writeNumberWithNSString:);
  methods[42].selector = @selector(_writeQuotedRawWithNSString:);
  methods[43].selector = @selector(writeBooleanWithBoolean:);
  methods[44].selector = @selector(writeNull);
  methods[45].selector = @selector(_verifyValueWriteWithNSString:);
  methods[46].selector = @selector(flush);
  methods[47].selector = @selector(close);
  methods[48].selector = @selector(_releaseBuffers);
  methods[49].selector = @selector(_writeStringWithNSString:);
  methods[50].selector = @selector(_writeString2WithInt:);
  methods[51].selector = @selector(_writeLongStringWithNSString:);
  methods[52].selector = @selector(_writeSegmentWithInt:);
  methods[53].selector = @selector(_writeStringWithCharArray:withInt:withInt:);
  methods[54].selector = @selector(_writeStringASCIIWithInt:withInt:);
  methods[55].selector = @selector(_writeSegmentASCIIWithInt:withInt:);
  methods[56].selector = @selector(_writeStringASCIIWithCharArray:withInt:withInt:withInt:);
  methods[57].selector = @selector(_writeStringCustomWithInt:);
  methods[58].selector = @selector(_writeSegmentCustomWithInt:);
  methods[59].selector = @selector(_writeStringCustomWithCharArray:withInt:withInt:);
  methods[60].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withByteArray:withInt:withInt:);
  methods[61].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withByteArray:withInt:);
  methods[62].selector = @selector(_writeBinaryWithComFasterxmlJacksonCoreBase64Variant:withJavaIoInputStream:withByteArray:);
  methods[63].selector = @selector(_readMoreWithJavaIoInputStream:withByteArray:withInt:withInt:withInt:);
  methods[64].selector = @selector(_writeNull);
  methods[65].selector = @selector(_prependOrWriteCharacterEscapeWithChar:withInt:);
  methods[66].selector = @selector(_prependOrWriteCharacterEscapeWithCharArray:withInt:withInt:withChar:withInt:);
  methods[67].selector = @selector(_appendCharacterEscapeWithChar:withInt:);
  methods[68].selector = @selector(_allocateEntityBuffer);
  methods[69].selector = @selector(_allocateCopyBuffer);
  methods[70].selector = @selector(_flushBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SHORT_WRITE", "I", .constantValue.asInt = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE, 0x1c, -1, -1, -1, -1 },
    { "HEX_CHARS", "[C", .constantValue.asLong = 0, 0x1c, -1, 61, -1, -1 },
    { "_writer_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_quoteChar_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputHead_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputTail_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_outputEnd_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_entityBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currentEscape_", "LComFasterxmlJacksonCoreSerializableString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_charBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreObjectWriteContext;LComFasterxmlJacksonCoreIoIOContext;ILJavaIoWriter;LComFasterxmlJacksonCoreSerializableString;LComFasterxmlJacksonCoreIoCharacterEscapes;LComFasterxmlJacksonCorePrettyPrinter;", "writeFieldName", "LNSString;", "LJavaIoIOException;", "LComFasterxmlJacksonCoreSerializableString;", "_writeFieldName", "LNSString;Z", "LComFasterxmlJacksonCoreSerializableString;Z", "writeStartArray", "I", "LNSObject;I", "writeStartObject", "LNSObject;", "_writePPFieldName", "writeString", "LJavaIoReader;I", "[CII", "writeRawUTF8String", "[BII", "writeUTF8String", "writeRaw", "LNSString;II", "C", "writeRawLong", "writeBinary", "LComFasterxmlJacksonCoreBase64Variant;[BII", "LJavaIoIOException;LComFasterxmlJacksonCoreJsonGenerationException;", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;I", "writeNumber", "S", "_writeQuotedShort", "_writeQuotedInt", "J", "_writeQuotedLong", "LJavaMathBigInteger;", "D", "F", "LJavaMathBigDecimal;", "_writeQuotedRaw", "writeBoolean", "Z", "_verifyValueWrite", "_writeString", "_writeString2", "_writeLongString", "_writeSegment", "_writeStringASCII", "II", "_writeSegmentASCII", "[CIII", "_writeStringCustom", "_writeSegmentCustom", "_writeBinary", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;[BI", "LComFasterxmlJacksonCoreBase64Variant;LJavaIoInputStream;[B", "_readMore", "LJavaIoInputStream;[BIII", "_prependOrWriteCharacterEscape", "CI", "[CIICI", "_appendCharacterEscape", &ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator = { "WriterBasedJsonGenerator", "com.fasterxml.jackson.core.json", ptrTable, methods, fields, 7, 0x1, 71, 11, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator class]) {
    JreStrongAssign(&ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ComFasterxmlJacksonCoreIoCharTypes_copyHexChars());
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator)
  }
}

@end

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, id<ComFasterxmlJacksonCoreObjectWriteContext> writeCtxt, ComFasterxmlJacksonCoreIoIOContext *ioCtxt, jint features, JavaIoWriter *w, id<ComFasterxmlJacksonCoreSerializableString> rootValueSep, ComFasterxmlJacksonCoreIoCharacterEscapes *charEsc, id<ComFasterxmlJacksonCorePrettyPrinter> pp) {
  ComFasterxmlJacksonCoreJsonJsonGeneratorImpl_initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_(self, writeCtxt, ioCtxt, features, rootValueSep, charEsc, pp);
  self->_quoteChar_ = '"';
  JreStrongAssign(&self->_writer_, w);
  JreStrongAssign(&self->_outputBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ioCtxt)) allocConcatBuffer]);
  self->_outputEnd_ = ((IOSCharArray *) nil_chk(self->_outputBuffer_))->size_;
}

ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *new_ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_(id<ComFasterxmlJacksonCoreObjectWriteContext> writeCtxt, ComFasterxmlJacksonCoreIoIOContext *ioCtxt, jint features, JavaIoWriter *w, id<ComFasterxmlJacksonCoreSerializableString> rootValueSep, ComFasterxmlJacksonCoreIoCharacterEscapes *charEsc, id<ComFasterxmlJacksonCorePrettyPrinter> pp) {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator, initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_, writeCtxt, ioCtxt, features, w, rootValueSep, charEsc, pp)
}

ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *create_ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_(id<ComFasterxmlJacksonCoreObjectWriteContext> writeCtxt, ComFasterxmlJacksonCoreIoIOContext *ioCtxt, jint features, JavaIoWriter *w, id<ComFasterxmlJacksonCoreSerializableString> rootValueSep, ComFasterxmlJacksonCoreIoCharacterEscapes *charEsc, id<ComFasterxmlJacksonCorePrettyPrinter> pp) {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator, initWithComFasterxmlJacksonCoreObjectWriteContext_withComFasterxmlJacksonCoreIoIOContext_withInt_withJavaIoWriter_withComFasterxmlJacksonCoreSerializableString_withComFasterxmlJacksonCoreIoCharacterEscapes_withComFasterxmlJacksonCorePrettyPrinter_, writeCtxt, ioCtxt, features, w, rootValueSep, charEsc, pp)
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *name, jboolean commaBefore) {
  if (self->_cfgPrettyPrinter_ != nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithNSString_withBoolean_(self, name, commaBefore);
    return;
  }
  if ((self->_outputTail_ + 1) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  if (commaBefore) {
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = ',';
  }
  if (self->_cfgUnqNames_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, name);
    return;
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, name);
  if (self->_outputTail_ >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name, jboolean commaBefore) {
  if (self->_cfgPrettyPrinter_ != nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(self, name, commaBefore);
    return;
  }
  if ((self->_outputTail_ + 1) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  if (commaBefore) {
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = ',';
  }
  IOSCharArray *quoted = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) asQuotedChars];
  if (self->_cfgUnqNames_) {
    [self writeRawWithCharArray:quoted withInt:0 withInt:((IOSCharArray *) nil_chk(quoted))->size_];
    return;
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  jint qlen = ((IOSCharArray *) nil_chk(quoted))->size_;
  if ((self->_outputTail_ + qlen + 1) >= self->_outputEnd_) {
    [self writeRawWithCharArray:quoted withInt:0 withInt:qlen];
    if (self->_outputTail_ >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(quoted, 0, self->_outputBuffer_, self->_outputTail_, qlen);
    self->_outputTail_ += qlen;
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithNSString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *name, jboolean commaBefore) {
  if (commaBefore) {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  if (self->_cfgUnqNames_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, name);
  }
  else {
    if (self->_outputTail_ >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(self, name);
    if (self->_outputTail_ >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writePPFieldNameWithComFasterxmlJacksonCoreSerializableString_withBoolean_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, id<ComFasterxmlJacksonCoreSerializableString> name, jboolean commaBefore) {
  if (commaBefore) {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) writeObjectEntrySeparatorWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  else {
    [((id<ComFasterxmlJacksonCorePrettyPrinter>) nil_chk(self->_cfgPrettyPrinter_)) beforeObjectEntriesWithComFasterxmlJacksonCoreJsonGenerator:self];
  }
  IOSCharArray *quoted = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk(name)) asQuotedChars];
  if (self->_cfgUnqNames_) {
    [self writeRawWithCharArray:quoted withInt:0 withInt:((IOSCharArray *) nil_chk(quoted))->size_];
  }
  else {
    if (self->_outputTail_ >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
    [self writeRawWithCharArray:quoted withInt:0 withInt:((IOSCharArray *) nil_chk(quoted))->size_];
    if (self->_outputTail_ >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_writeRawLongWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text) {
  jint room = self->_outputEnd_ - self->_outputTail_;
  [((NSString *) nil_chk(text)) java_getChars:0 sourceEnd:room destination:self->_outputBuffer_ destinationBegin:self->_outputTail_];
  self->_outputTail_ += room;
  [self _flushBuffer];
  jint offset = room;
  jint len = [text java_length] - room;
  while (len > self->_outputEnd_) {
    jint amount = self->_outputEnd_;
    [text java_getChars:offset sourceEnd:offset + amount destination:self->_outputBuffer_ destinationBegin:0];
    self->_outputHead_ = 0;
    self->_outputTail_ = amount;
    [self _flushBuffer];
    offset += amount;
    len -= amount;
  }
  [text java_getChars:offset sourceEnd:offset + len destination:self->_outputBuffer_ destinationBegin:0];
  self->_outputHead_ = 0;
  self->_outputTail_ = len;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedShortWithShort_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jshort s) {
  if ((self->_outputTail_ + 8) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withCharArray_withInt_(s, self->_outputBuffer_, self->_outputTail_);
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedIntWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint i) {
  if ((self->_outputTail_ + 13) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputIntWithInt_withCharArray_withInt_(i, self->_outputBuffer_, self->_outputTail_);
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedLongWithLong_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jlong l) {
  if ((self->_outputTail_ + 23) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  self->_outputTail_ = ComFasterxmlJacksonCoreIoNumberOutput_outputLongWithLong_withCharArray_withInt_(l, self->_outputBuffer_, self->_outputTail_);
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeQuotedRawWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *value) {
  if (self->_outputTail_ >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
  [self writeRawWithNSString:value];
  if (self->_outputTail_ >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = self->_quoteChar_;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__verifyValueWriteWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *typeMsg) {
  jint status = [((ComFasterxmlJacksonCoreJsonJsonWriteContext *) nil_chk(self->_outputContext_)) writeValue];
  if (self->_cfgPrettyPrinter_ != nil) {
    [self _verifyPrettyValueWriteWithNSString:typeMsg withInt:status];
    return;
  }
  jchar c;
  switch (status) {
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AS_IS:
    default:
    return;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COMMA:
    c = ',';
    break;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_COLON:
    c = ':';
    break;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_OK_AFTER_SPACE:
    if (self->_rootValueSeparator_ != nil) {
      [self writeRawWithNSString:[self->_rootValueSeparator_ getValue]];
    }
    return;
    case ComFasterxmlJacksonCoreJsonJsonWriteContext_STATUS_EXPECT_NAME:
    [self _reportCantWriteValueExpectNameWithNSString:typeMsg];
    return;
  }
  if (self->_outputTail_ >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = c;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text) {
  jint len = [((NSString *) nil_chk(text)) java_length];
  if (len > self->_outputEnd_) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeLongStringWithNSString_(self, text);
    return;
  }
  if ((self->_outputTail_ + len) > self->_outputEnd_) {
    [self _flushBuffer];
  }
  [text java_getChars:0 sourceEnd:len destination:self->_outputBuffer_ destinationBegin:self->_outputTail_];
  if (self->_characterEscapes_ != nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithInt_(self, len);
  }
  else if (self->_maximumNonEscapedChar_ != 0) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithInt_withInt_(self, len, self->_maximumNonEscapedChar_);
  }
  else {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeString2WithInt_(self, len);
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeString2WithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len) {
  jint end = self->_outputTail_ + len;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLen = ((IOSIntArray *) nil_chk(escCodes))->size_;
  while (self->_outputTail_ < end) {
    while (true) {
      jchar c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), self->_outputTail_);
      if (c < escLen && IOSIntArray_Get(escCodes, c) != 0) {
        goto break_escape_loop;
      }
      if (++self->_outputTail_ >= end) {
        goto break_output_loop;
      }
    }
    break_escape_loop: ;
    jint flushLen = (self->_outputTail_ - self->_outputHead_);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:self->_outputHead_ withInt:flushLen];
    }
    jchar c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), self->_outputTail_++);
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(self, c, IOSIntArray_Get(escCodes, c));
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeLongStringWithNSString_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, NSString *text) {
  [self _flushBuffer];
  jint textLen = [((NSString *) nil_chk(text)) java_length];
  jint offset = 0;
  do {
    jint max = self->_outputEnd_;
    jint segmentLen = ((offset + max) > textLen) ? (textLen - offset) : max;
    [text java_getChars:offset sourceEnd:offset + segmentLen destination:self->_outputBuffer_ destinationBegin:0];
    if (self->_characterEscapes_ != nil) {
      ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentCustomWithInt_(self, segmentLen);
    }
    else if (self->_maximumNonEscapedChar_ != 0) {
      ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentASCIIWithInt_withInt_(self, segmentLen, self->_maximumNonEscapedChar_);
    }
    else {
      ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentWithInt_(self, segmentLen);
    }
    offset += segmentLen;
  }
  while (offset < textLen);
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end) {
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLen = ((IOSIntArray *) nil_chk(escCodes))->size_;
  jint ptr = 0;
  jint start = ptr;
  while (ptr < end) {
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), ptr);
      if (c < escLen && IOSIntArray_Get(escCodes, c) != 0) {
        break;
      }
      if (++ptr >= end) {
        break;
      }
    }
    jint flushLen = (ptr - start);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:start withInt:flushLen];
      if (ptr >= end) {
        goto break_output_loop;
      }
    }
    ++ptr;
    start = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(self, self->_outputBuffer_, ptr, end, c, IOSIntArray_Get(escCodes, c));
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len) {
  if (self->_characterEscapes_ != nil) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithCharArray_withInt_withInt_(self, text, offset, len);
    return;
  }
  if (self->_maximumNonEscapedChar_ != 0) {
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithCharArray_withInt_withInt_withInt_(self, text, offset, len, self->_maximumNonEscapedChar_);
    return;
  }
  len += offset;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLen = ((IOSIntArray *) nil_chk(escCodes))->size_;
  while (offset < len) {
    jint start = offset;
    while (true) {
      jchar c = IOSCharArray_Get(nil_chk(text), offset);
      if (c < escLen && IOSIntArray_Get(escCodes, c) != 0) {
        break;
      }
      if (++offset >= len) {
        break;
      }
    }
    jint newAmount = offset - start;
    if (newAmount < ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE) {
      if ((self->_outputTail_ + newAmount) > self->_outputEnd_) {
        [self _flushBuffer];
      }
      if (newAmount > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text, start, self->_outputBuffer_, self->_outputTail_, newAmount);
        self->_outputTail_ += newAmount;
      }
    }
    else {
      [self _flushBuffer];
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:text withInt:start withInt:newAmount];
    }
    if (offset >= len) {
      break;
    }
    jchar c = IOSCharArray_Get(nil_chk(text), offset++);
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(self, c, IOSIntArray_Get(escCodes, c));
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len, jint maxNonEscaped) {
  jint end = self->_outputTail_ + len;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  jint escCode = 0;
  while (self->_outputTail_ < end) {
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), self->_outputTail_);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          goto break_escape_loop;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        goto break_escape_loop;
      }
      if (++self->_outputTail_ >= end) {
        goto break_output_loop;
      }
    }
    break_escape_loop: ;
    jint flushLen = (self->_outputTail_ - self->_outputHead_);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:self->_outputHead_ withInt:flushLen];
    }
    ++self->_outputTail_;
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(self, c, escCode);
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentASCIIWithInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end, jint maxNonEscaped) {
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  jint ptr = 0;
  jint escCode = 0;
  jint start = ptr;
  while (ptr < end) {
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), ptr);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          break;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        break;
      }
      if (++ptr >= end) {
        break;
      }
    }
    jint flushLen = (ptr - start);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:start withInt:flushLen];
      if (ptr >= end) {
        goto break_output_loop;
      }
    }
    ++ptr;
    start = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(self, self->_outputBuffer_, ptr, end, c, escCode);
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringASCIIWithCharArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len, jint maxNonEscaped) {
  len += offset;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  jint escCode = 0;
  while (offset < len) {
    jint start = offset;
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(text), offset);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          break;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        break;
      }
      if (++offset >= len) {
        break;
      }
    }
    jint newAmount = offset - start;
    if (newAmount < ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE) {
      if ((self->_outputTail_ + newAmount) > self->_outputEnd_) {
        [self _flushBuffer];
      }
      if (newAmount > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text, start, self->_outputBuffer_, self->_outputTail_, newAmount);
        self->_outputTail_ += newAmount;
      }
    }
    else {
      [self _flushBuffer];
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:text withInt:start withInt:newAmount];
    }
    if (offset >= len) {
      break;
    }
    ++offset;
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(self, c, escCode);
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint len) {
  jint end = self->_outputTail_ + len;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxNonEscaped = (self->_maximumNonEscapedChar_ < 1) ? (jint) 0xFFFF : self->_maximumNonEscapedChar_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  jint escCode = 0;
  ComFasterxmlJacksonCoreIoCharacterEscapes *customEscapes = self->_characterEscapes_;
  while (self->_outputTail_ < end) {
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), self->_outputTail_);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          goto break_escape_loop;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        goto break_escape_loop;
      }
      else {
        if ((JreStrongAssign(&self->_currentEscape_, [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:c])) != nil) {
          escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM;
          goto break_escape_loop;
        }
      }
      if (++self->_outputTail_ >= end) {
        goto break_output_loop;
      }
    }
    break_escape_loop: ;
    jint flushLen = (self->_outputTail_ - self->_outputHead_);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:self->_outputHead_ withInt:flushLen];
    }
    ++self->_outputTail_;
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(self, c, escCode);
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeSegmentCustomWithInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jint end) {
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxNonEscaped = (self->_maximumNonEscapedChar_ < 1) ? (jint) 0xFFFF : self->_maximumNonEscapedChar_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  ComFasterxmlJacksonCoreIoCharacterEscapes *customEscapes = self->_characterEscapes_;
  jint ptr = 0;
  jint escCode = 0;
  jint start = ptr;
  while (ptr < end) {
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(self->_outputBuffer_), ptr);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          break;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        break;
      }
      else {
        if ((JreStrongAssign(&self->_currentEscape_, [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:c])) != nil) {
          escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM;
          break;
        }
      }
      if (++ptr >= end) {
        break;
      }
    }
    jint flushLen = (ptr - start);
    if (flushLen > 0) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:self->_outputBuffer_ withInt:start withInt:flushLen];
      if (ptr >= end) {
        goto break_output_loop;
      }
    }
    ++ptr;
    start = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(self, self->_outputBuffer_, ptr, end, c, escCode);
  }
  break_output_loop: ;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeStringCustomWithCharArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *text, jint offset, jint len) {
  len += offset;
  IOSIntArray *escCodes = self->_outputEscapes_;
  jint maxNonEscaped = (self->_maximumNonEscapedChar_ < 1) ? (jint) 0xFFFF : self->_maximumNonEscapedChar_;
  jint escLimit = JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(escCodes))->size_, maxNonEscaped + 1);
  ComFasterxmlJacksonCoreIoCharacterEscapes *customEscapes = self->_characterEscapes_;
  jint escCode = 0;
  while (offset < len) {
    jint start = offset;
    jchar c;
    while (true) {
      c = IOSCharArray_Get(nil_chk(text), offset);
      if (c < escLimit) {
        escCode = IOSIntArray_Get(escCodes, c);
        if (escCode != 0) {
          break;
        }
      }
      else if (c > maxNonEscaped) {
        escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_STANDARD;
        break;
      }
      else {
        if ((JreStrongAssign(&self->_currentEscape_, [((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(customEscapes)) getEscapeSequenceWithInt:c])) != nil) {
          escCode = ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM;
          break;
        }
      }
      if (++offset >= len) {
        break;
      }
    }
    jint newAmount = offset - start;
    if (newAmount < ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_SHORT_WRITE) {
      if ((self->_outputTail_ + newAmount) > self->_outputEnd_) {
        [self _flushBuffer];
      }
      if (newAmount > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text, start, self->_outputBuffer_, self->_outputTail_, newAmount);
        self->_outputTail_ += newAmount;
      }
    }
    else {
      [self _flushBuffer];
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:text withInt:start withInt:newAmount];
    }
    if (offset >= len) {
      break;
    }
    ++offset;
    ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(self, c, escCode);
  }
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withByteArray_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, IOSByteArray *input, jint inputPtr, jint inputEnd) {
  jint safeInputEnd = inputEnd - 3;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (inputPtr <= safeInputEnd) {
    if (self->_outputTail_ > safeOutputEnd) {
      [self _flushBuffer];
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(input), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF);
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSCharArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  jint inputLeft = inputEnd - inputPtr;
  if (inputLeft > 0) {
    if (self->_outputTail_ > safeOutputEnd) {
      [self _flushBuffer];
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(input), inputPtr++)), 16);
    if (inputLeft == 2) {
      b24 |= JreLShift32((((jint) IOSByteArray_Get(input, inputPtr++)) & (jint) 0xFF), 8);
    }
    self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:inputLeft withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
  }
}

jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer, jint bytesLeft) {
  jint inputPtr = 0;
  jint inputEnd = 0;
  jint lastFullOffset = -3;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (bytesLeft > 2) {
    if (inputPtr > lastFullOffset) {
      inputEnd = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, bytesLeft);
      inputPtr = 0;
      if (inputEnd < 3) {
        break;
      }
      lastFullOffset = inputEnd - 3;
    }
    if (self->_outputTail_ > safeOutputEnd) {
      [self _flushBuffer];
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF);
    bytesLeft -= 3;
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSCharArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  if (bytesLeft > 0) {
    inputEnd = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, bytesLeft);
    inputPtr = 0;
    if (inputEnd > 0) {
      if (self->_outputTail_ > safeOutputEnd) {
        [self _flushBuffer];
      }
      jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 16);
      jint amount;
      if (inputPtr < inputEnd) {
        b24 |= JreLShift32((((jint) IOSByteArray_Get(readBuffer, inputPtr)) & (jint) 0xFF), 8);
        amount = 2;
      }
      else {
        amount = 1;
      }
      self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:amount withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
      bytesLeft -= amount;
    }
  }
  return bytesLeft;
}

jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeBinaryWithComFasterxmlJacksonCoreBase64Variant_withJavaIoInputStream_withByteArray_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, ComFasterxmlJacksonCoreBase64Variant *b64variant, JavaIoInputStream *data, IOSByteArray *readBuffer) {
  jint inputPtr = 0;
  jint inputEnd = 0;
  jint lastFullOffset = -3;
  jint bytesDone = 0;
  jint safeOutputEnd = self->_outputEnd_ - 6;
  jint chunksBeforeLF = JreRShift32([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) getMaxLineLength], 2);
  while (true) {
    if (inputPtr > lastFullOffset) {
      inputEnd = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(self, data, readBuffer, inputPtr, inputEnd, ((IOSByteArray *) nil_chk(readBuffer))->size_);
      inputPtr = 0;
      if (inputEnd < 3) {
        break;
      }
      lastFullOffset = inputEnd - 3;
    }
    if (self->_outputTail_ > safeOutputEnd) {
      [self _flushBuffer];
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 8);
    b24 |= ((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF;
    b24 = (JreLShift32(b24, 8)) | (((jint) IOSByteArray_Get(readBuffer, inputPtr++)) & (jint) 0xFF);
    bytesDone += 3;
    self->_outputTail_ = [b64variant encodeBase64ChunkWithInt:b24 withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
    if (--chunksBeforeLF <= 0) {
      *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
      *IOSCharArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = 'n';
      chunksBeforeLF = JreRShift32([b64variant getMaxLineLength], 2);
    }
  }
  if (inputPtr < inputEnd) {
    if (self->_outputTail_ > safeOutputEnd) {
      [self _flushBuffer];
    }
    jint b24 = JreLShift32(((jint) IOSByteArray_Get(nil_chk(readBuffer), inputPtr++)), 16);
    jint amount = 1;
    if (inputPtr < inputEnd) {
      b24 |= JreLShift32((((jint) IOSByteArray_Get(readBuffer, inputPtr)) & (jint) 0xFF), 8);
      amount = 2;
    }
    bytesDone += amount;
    self->_outputTail_ = [b64variant encodeBase64PartialWithInt:b24 withInt:amount withCharArray:self->_outputBuffer_ withInt:self->_outputTail_];
  }
  return bytesDone;
}

jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__readMoreWithJavaIoInputStream_withByteArray_withInt_withInt_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, JavaIoInputStream *inArg, IOSByteArray *readBuffer, jint inputPtr, jint inputEnd, jint maxRead) {
  jint i = 0;
  while (inputPtr < inputEnd) {
    *IOSByteArray_GetRef(nil_chk(readBuffer), i++) = IOSByteArray_Get(readBuffer, inputPtr++);
  }
  inputPtr = 0;
  inputEnd = i;
  maxRead = JavaLangMath_minWithInt_withInt_(maxRead, ((IOSByteArray *) nil_chk(readBuffer))->size_);
  do {
    jint length = maxRead - inputEnd;
    if (length == 0) {
      break;
    }
    jint count = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:readBuffer withInt:inputEnd withInt:length];
    if (count < 0) {
      return inputEnd;
    }
    inputEnd += count;
  }
  while (inputEnd < 3);
  return inputEnd;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__writeNull(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self) {
  if ((self->_outputTail_ + 4) >= self->_outputEnd_) {
    [self _flushBuffer];
  }
  jint ptr = self->_outputTail_;
  IOSCharArray *buf = self->_outputBuffer_;
  *IOSCharArray_GetRef(nil_chk(buf), ptr) = 'n';
  *IOSCharArray_GetRef(buf, ++ptr) = 'u';
  *IOSCharArray_GetRef(buf, ++ptr) = 'l';
  *IOSCharArray_GetRef(buf, ++ptr) = 'l';
  self->_outputTail_ = ptr + 1;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jchar ch, jint escCode) {
  if (escCode >= 0) {
    if (self->_outputTail_ >= 2) {
      jint ptr = self->_outputTail_ - 2;
      self->_outputHead_ = ptr;
      *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), ptr++) = '\\';
      *IOSCharArray_GetRef(self->_outputBuffer_, ptr) = (jchar) escCode;
      return;
    }
    IOSCharArray *buf = self->_entityBuffer_;
    if (buf == nil) {
      buf = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(self);
    }
    self->_outputHead_ = self->_outputTail_;
    *IOSCharArray_GetRef(nil_chk(buf), 1) = (jchar) escCode;
    [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:buf withInt:0 withInt:2];
    return;
  }
  if (escCode != ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM) {
    if (self->_outputTail_ >= 6) {
      IOSCharArray *buf = self->_outputBuffer_;
      jint ptr = self->_outputTail_ - 6;
      self->_outputHead_ = ptr;
      *IOSCharArray_GetRef(nil_chk(buf), ptr) = '\\';
      *IOSCharArray_GetRef(buf, ++ptr) = 'u';
      if (ch > (jint) 0xFF) {
        jint hi = (JreRShift32(ch, 8)) & (jint) 0xFF;
        *IOSCharArray_GetRef(buf, ++ptr) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
        *IOSCharArray_GetRef(buf, ++ptr) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, hi & (jint) 0xF);
        ch &= (jint) 0xFF;
      }
      else {
        *IOSCharArray_GetRef(buf, ++ptr) = '0';
        *IOSCharArray_GetRef(buf, ++ptr) = '0';
      }
      *IOSCharArray_GetRef(buf, ++ptr) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(ch, 4));
      *IOSCharArray_GetRef(buf, ++ptr) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ch & (jint) 0xF);
      return;
    }
    IOSCharArray *buf = self->_entityBuffer_;
    if (buf == nil) {
      buf = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(self);
    }
    self->_outputHead_ = self->_outputTail_;
    if (ch > (jint) 0xFF) {
      jint hi = (JreRShift32(ch, 8)) & (jint) 0xFF;
      jint lo = ch & (jint) 0xFF;
      *IOSCharArray_GetRef(nil_chk(buf), 10) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
      *IOSCharArray_GetRef(buf, 11) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, hi & (jint) 0xF);
      *IOSCharArray_GetRef(buf, 12) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, JreRShift32(lo, 4));
      *IOSCharArray_GetRef(buf, 13) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, lo & (jint) 0xF);
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:buf withInt:8 withInt:6];
    }
    else {
      *IOSCharArray_GetRef(nil_chk(buf), 6) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(ch, 4));
      *IOSCharArray_GetRef(buf, 7) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ch & (jint) 0xF);
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:buf withInt:2 withInt:6];
    }
    return;
  }
  NSString *escape;
  if (self->_currentEscape_ == nil) {
    escape = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk([((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(self->_characterEscapes_)) getEscapeSequenceWithInt:ch])) getValue];
  }
  else {
    escape = [self->_currentEscape_ getValue];
    JreStrongAssign(&self->_currentEscape_, nil);
  }
  jint len = [((NSString *) nil_chk(escape)) java_length];
  if (self->_outputTail_ >= len) {
    jint ptr = self->_outputTail_ - len;
    self->_outputHead_ = ptr;
    [escape java_getChars:0 sourceEnd:len destination:self->_outputBuffer_ destinationBegin:ptr];
    return;
  }
  self->_outputHead_ = self->_outputTail_;
  [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithNSString:escape];
}

jint ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__prependOrWriteCharacterEscapeWithCharArray_withInt_withInt_withChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, IOSCharArray *buffer, jint ptr, jint end, jchar ch, jint escCode) {
  if (escCode >= 0) {
    if (ptr > 1 && ptr < end) {
      ptr -= 2;
      *IOSCharArray_GetRef(nil_chk(buffer), ptr) = '\\';
      *IOSCharArray_GetRef(buffer, ptr + 1) = (jchar) escCode;
    }
    else {
      IOSCharArray *ent = self->_entityBuffer_;
      if (ent == nil) {
        ent = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(self);
      }
      *IOSCharArray_GetRef(nil_chk(ent), 1) = (jchar) escCode;
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:ent withInt:0 withInt:2];
    }
    return ptr;
  }
  if (escCode != ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM) {
    if (ptr > 5 && ptr < end) {
      ptr -= 6;
      *IOSCharArray_GetRef(nil_chk(buffer), ptr++) = '\\';
      *IOSCharArray_GetRef(buffer, ptr++) = 'u';
      if (ch > (jint) 0xFF) {
        jint hi = (JreRShift32(ch, 8)) & (jint) 0xFF;
        *IOSCharArray_GetRef(buffer, ptr++) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
        *IOSCharArray_GetRef(buffer, ptr++) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, hi & (jint) 0xF);
        ch &= (jint) 0xFF;
      }
      else {
        *IOSCharArray_GetRef(buffer, ptr++) = '0';
        *IOSCharArray_GetRef(buffer, ptr++) = '0';
      }
      *IOSCharArray_GetRef(buffer, ptr++) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(ch, 4));
      *IOSCharArray_GetRef(buffer, ptr) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ch & (jint) 0xF);
      ptr -= 5;
    }
    else {
      IOSCharArray *ent = self->_entityBuffer_;
      if (ent == nil) {
        ent = ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(self);
      }
      self->_outputHead_ = self->_outputTail_;
      if (ch > (jint) 0xFF) {
        jint hi = (JreRShift32(ch, 8)) & (jint) 0xFF;
        jint lo = ch & (jint) 0xFF;
        *IOSCharArray_GetRef(nil_chk(ent), 10) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
        *IOSCharArray_GetRef(ent, 11) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, hi & (jint) 0xF);
        *IOSCharArray_GetRef(ent, 12) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, JreRShift32(lo, 4));
        *IOSCharArray_GetRef(ent, 13) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, lo & (jint) 0xF);
        [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:ent withInt:8 withInt:6];
      }
      else {
        *IOSCharArray_GetRef(nil_chk(ent), 6) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(ch, 4));
        *IOSCharArray_GetRef(ent, 7) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ch & (jint) 0xF);
        [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithCharArray:ent withInt:2 withInt:6];
      }
    }
    return ptr;
  }
  NSString *escape;
  if (self->_currentEscape_ == nil) {
    escape = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk([((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(self->_characterEscapes_)) getEscapeSequenceWithInt:ch])) getValue];
  }
  else {
    escape = [self->_currentEscape_ getValue];
    JreStrongAssign(&self->_currentEscape_, nil);
  }
  jint len = [((NSString *) nil_chk(escape)) java_length];
  if (ptr >= len && ptr < end) {
    ptr -= len;
    [escape java_getChars:0 sourceEnd:len destination:buffer destinationBegin:ptr];
  }
  else {
    [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithNSString:escape];
  }
  return ptr;
}

void ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__appendCharacterEscapeWithChar_withInt_(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self, jchar ch, jint escCode) {
  if (escCode >= 0) {
    if ((self->_outputTail_ + 2) > self->_outputEnd_) {
      [self _flushBuffer];
    }
    *IOSCharArray_GetRef(nil_chk(self->_outputBuffer_), self->_outputTail_++) = '\\';
    *IOSCharArray_GetRef(self->_outputBuffer_, self->_outputTail_++) = (jchar) escCode;
    return;
  }
  if (escCode != ComFasterxmlJacksonCoreIoCharacterEscapes_ESCAPE_CUSTOM) {
    if ((self->_outputTail_ + 5) >= self->_outputEnd_) {
      [self _flushBuffer];
    }
    jint ptr = self->_outputTail_;
    IOSCharArray *buf = self->_outputBuffer_;
    *IOSCharArray_GetRef(nil_chk(buf), ptr++) = '\\';
    *IOSCharArray_GetRef(buf, ptr++) = 'u';
    if (ch > (jint) 0xFF) {
      jint hi = (JreRShift32(ch, 8)) & (jint) 0xFF;
      *IOSCharArray_GetRef(buf, ptr++) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(hi, 4));
      *IOSCharArray_GetRef(buf, ptr++) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, hi & (jint) 0xF);
      ch &= (jint) 0xFF;
    }
    else {
      *IOSCharArray_GetRef(buf, ptr++) = '0';
      *IOSCharArray_GetRef(buf, ptr++) = '0';
    }
    *IOSCharArray_GetRef(buf, ptr++) = IOSCharArray_Get(nil_chk(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS), JreRShift32(ch, 4));
    *IOSCharArray_GetRef(buf, ptr++) = IOSCharArray_Get(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator_HEX_CHARS, ch & (jint) 0xF);
    self->_outputTail_ = ptr;
    return;
  }
  NSString *escape;
  if (self->_currentEscape_ == nil) {
    escape = [((id<ComFasterxmlJacksonCoreSerializableString>) nil_chk([((ComFasterxmlJacksonCoreIoCharacterEscapes *) nil_chk(self->_characterEscapes_)) getEscapeSequenceWithInt:ch])) getValue];
  }
  else {
    escape = [self->_currentEscape_ getValue];
    JreStrongAssign(&self->_currentEscape_, nil);
  }
  jint len = [((NSString *) nil_chk(escape)) java_length];
  if ((self->_outputTail_ + len) > self->_outputEnd_) {
    [self _flushBuffer];
    if (len > self->_outputEnd_) {
      [((JavaIoWriter *) nil_chk(self->_writer_)) writeWithNSString:escape];
      return;
    }
  }
  [escape java_getChars:0 sourceEnd:len destination:self->_outputBuffer_ destinationBegin:self->_outputTail_];
  self->_outputTail_ += len;
}

IOSCharArray *ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateEntityBuffer(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self) {
  IOSCharArray *buf = [IOSCharArray arrayWithLength:14];
  *IOSCharArray_GetRef(buf, 0) = '\\';
  *IOSCharArray_GetRef(buf, 2) = '\\';
  *IOSCharArray_GetRef(buf, 3) = 'u';
  *IOSCharArray_GetRef(buf, 4) = '0';
  *IOSCharArray_GetRef(buf, 5) = '0';
  *IOSCharArray_GetRef(buf, 8) = '\\';
  *IOSCharArray_GetRef(buf, 9) = 'u';
  JreStrongAssign(&self->_entityBuffer_, buf);
  return buf;
}

IOSCharArray *ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator__allocateCopyBuffer(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator *self) {
  if (self->_charBuffer_ == nil) {
    JreStrongAssign(&self->_charBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(self->_ioContext_)) allocNameCopyBufferWithInt:2000]);
  }
  return self->_charBuffer_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreJsonWriterBasedJsonGenerator)
