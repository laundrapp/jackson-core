//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/JsonLocation.h"
#include "com/fasterxml/jackson/core/JsonParser.h"
#include "com/fasterxml/jackson/core/JsonToken.h"
#include "com/fasterxml/jackson/core/Version.h"
#include "com/fasterxml/jackson/core/base/ParserBase.h"
#include "com/fasterxml/jackson/core/base/ParserMinimalBase.h"
#include "com/fasterxml/jackson/core/io/IOContext.h"
#include "com/fasterxml/jackson/core/io/NumberInput.h"
#include "com/fasterxml/jackson/core/json/DupDetector.h"
#include "com/fasterxml/jackson/core/json/JsonReadContext.h"
#include "com/fasterxml/jackson/core/json/PackageVersion.h"
#include "com/fasterxml/jackson/core/util/ByteArrayBuilder.h"
#include "com/fasterxml/jackson/core/util/TextBuffer.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Arrays.h"

@interface ComFasterxmlJacksonCoreBaseParserBase ()

- (void)_parseSlowFloatWithInt:(jint)expType;

- (void)_parseSlowIntWithInt:(jint)expType;

@end

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreBaseParserBase_resetIntWithBoolean_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jboolean negative, jint intLen);

__attribute__((unused)) static ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreBaseParserBase_resetFloatWithBoolean_withInt_withInt_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jboolean negative, jint intLen, jint fractLen, jint expLen);

__attribute__((unused)) static void ComFasterxmlJacksonCoreBaseParserBase__parseSlowFloatWithInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jint expType);

__attribute__((unused)) static void ComFasterxmlJacksonCoreBaseParserBase__parseSlowIntWithInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jint expType);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$2(void);

@implementation ComFasterxmlJacksonCoreBaseParserBase

- (instancetype __nonnull)initWithComFasterxmlJacksonCoreIoIOContext:(ComFasterxmlJacksonCoreIoIOContext *)ctxt
                                                             withInt:(jint)features {
  ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreIoIOContext_withInt_(self, ctxt, features);
  return self;
}

- (ComFasterxmlJacksonCoreVersion *)version__ {
  return JreLoadStatic(ComFasterxmlJacksonCoreJsonPackageVersion, VERSION);
}

- (id)getCurrentValue {
  return [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getCurrentValue];
}

- (void)setCurrentValueWithId:(id)v {
  [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) setCurrentValueWithId:v];
}

- (ComFasterxmlJacksonCoreJsonParser *)enableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f {
  _features_ |= [((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(f)) getMask];
  if (f == JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, STRICT_DUPLICATE_DETECTION)) {
    if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getDupDetector] == nil) {
      JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) withDupDetectorWithComFasterxmlJacksonCoreJsonDupDetector:ComFasterxmlJacksonCoreJsonDupDetector_rootDetectorWithComFasterxmlJacksonCoreJsonParser_(self)]);
    }
  }
  return self;
}

- (ComFasterxmlJacksonCoreJsonParser *)disableWithComFasterxmlJacksonCoreJsonParser_Feature:(ComFasterxmlJacksonCoreJsonParser_Feature *)f {
  _features_ &= ~[((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(f)) getMask];
  if (f == JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, STRICT_DUPLICATE_DETECTION)) {
    JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) withDupDetectorWithComFasterxmlJacksonCoreJsonDupDetector:nil]);
  }
  return self;
}

- (ComFasterxmlJacksonCoreJsonParser *)setFeatureMaskWithInt:(jint)newMask {
  jint changes = (_features_ ^ newMask);
  if (changes != 0) {
    _features_ = newMask;
    [self _checkStdFeatureChangesWithInt:newMask withInt:changes];
  }
  return self;
}

- (ComFasterxmlJacksonCoreJsonParser *)overrideStdFeaturesWithInt:(jint)values
                                                          withInt:(jint)mask {
  jint oldState = _features_;
  jint newState = (oldState & ~mask) | (values & mask);
  jint changed = oldState ^ newState;
  if (changed != 0) {
    _features_ = newState;
    [self _checkStdFeatureChangesWithInt:newState withInt:changed];
  }
  return self;
}

- (void)_checkStdFeatureChangesWithInt:(jint)newFeatureFlags
                               withInt:(jint)changedFeatures {
  jint f = [((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, STRICT_DUPLICATE_DETECTION))) getMask];
  if ((changedFeatures & f) != 0) {
    if ((newFeatureFlags & f) != 0) {
      if ([((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getDupDetector] == nil) {
        JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) withDupDetectorWithComFasterxmlJacksonCoreJsonDupDetector:ComFasterxmlJacksonCoreJsonDupDetector_rootDetectorWithComFasterxmlJacksonCoreJsonParser_(self)]);
      }
      else {
        JreStrongAssign(&_parsingContext_, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) withDupDetectorWithComFasterxmlJacksonCoreJsonDupDetector:nil]);
      }
    }
  }
}

- (NSString *)getCurrentName {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT) || _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    ComFasterxmlJacksonCoreJsonJsonReadContext *parent = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getParent];
    if (parent != nil) {
      return [parent getCurrentName];
    }
  }
  return [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getCurrentName];
}

- (void)overrideCurrentNameWithNSString:(NSString *)name {
  ComFasterxmlJacksonCoreJsonJsonReadContext *ctxt = _parsingContext_;
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_OBJECT) || _currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, START_ARRAY)) {
    ctxt = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(ctxt)) getParent];
  }
  @try {
    [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(ctxt)) setCurrentNameWithNSString:name];
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(e);
  }
}

- (void)close {
  if (!_closed_) {
    _closed_ = true;
    @try {
      [self _closeInput];
    }
    @finally {
      [self _releaseBuffers];
    }
  }
}

- (jboolean)isClosed {
  return _closed_;
}

- (ComFasterxmlJacksonCoreJsonJsonReadContext *)getParsingContext {
  return _parsingContext_;
}

- (ComFasterxmlJacksonCoreJsonLocation *)getTokenLocation {
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, [self getTokenCharacterOffset], [self getTokenLineNr], [self getTokenColumnNr]);
}

- (ComFasterxmlJacksonCoreJsonLocation *)getCurrentLocation {
  jint col = _inputPtr_ - _currInputRowStart_ + 1;
  return create_ComFasterxmlJacksonCoreJsonLocation_initWithId_withLong_withLong_withInt_withInt_([self _getSourceReference], -1LL, _currInputProcessed_ + _inputPtr_, _currInputRow_, col);
}

- (jboolean)hasTextCharacters {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
    return true;
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, FIELD_NAME)) {
    return _nameCopied_;
  }
  return false;
}

- (IOSByteArray *)getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)variant {
  if (_binaryValue_ == nil) {
    if (_currToken_ != JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_STRING)) {
      [self _reportErrorWithNSString:JreStrcat("$@$", @"Current token (", _currToken_, @") not VALUE_STRING, can not access as binary")];
    }
    ComFasterxmlJacksonCoreUtilByteArrayBuilder *builder = [self _getByteArrayBuilder];
    [self _decodeBase64WithNSString:[self getText] withComFasterxmlJacksonCoreUtilByteArrayBuilder:builder withComFasterxmlJacksonCoreBase64Variant:variant];
    JreStrongAssign(&_binaryValue_, [((ComFasterxmlJacksonCoreUtilByteArrayBuilder *) nil_chk(builder)) toByteArray]);
  }
  return _binaryValue_;
}

- (jlong)getTokenCharacterOffset {
  return _tokenInputTotal_;
}

- (jint)getTokenLineNr {
  return _tokenInputRow_;
}

- (jint)getTokenColumnNr {
  jint col = _tokenInputCol_;
  return (col < 0) ? col : (col + 1);
}

- (void)_closeInput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)_releaseBuffers {
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) releaseBuffers];
  IOSCharArray *buf = _nameCopyBuffer_;
  if (buf != nil) {
    JreStrongAssign(&_nameCopyBuffer_, nil);
    [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) releaseNameCopyBufferWithCharArray:buf];
  }
}

- (void)_handleEOF {
  if (![((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inRoot]) {
    NSString *marker = [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) inArray] ? @"Array" : @"Object";
    [self _reportInvalidEOFWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@": expected close marker for %s (start marker at %s)", [IOSObjectArray arrayWithObjects:(id[]){ marker, [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(_parsingContext_)) getStartLocationWithId:[self _getSourceReference]] } count:2 type:NSObject_class_()]) withComFasterxmlJacksonCoreJsonToken:nil];
  }
}

- (jint)_eofAsNextChar {
  [self _handleEOF];
  return -1;
}

- (ComFasterxmlJacksonCoreUtilByteArrayBuilder *)_getByteArrayBuilder {
  if (_byteArrayBuilder_ == nil) {
    JreStrongAssignAndConsume(&_byteArrayBuilder_, new_ComFasterxmlJacksonCoreUtilByteArrayBuilder_init());
  }
  else {
    [_byteArrayBuilder_ reset];
  }
  return _byteArrayBuilder_;
}

- (ComFasterxmlJacksonCoreJsonToken *)resetWithBoolean:(jboolean)negative
                                               withInt:(jint)intLen
                                               withInt:(jint)fractLen
                                               withInt:(jint)expLen {
  if (fractLen < 1 && expLen < 1) {
    return ComFasterxmlJacksonCoreBaseParserBase_resetIntWithBoolean_withInt_(self, negative, intLen);
  }
  return ComFasterxmlJacksonCoreBaseParserBase_resetFloatWithBoolean_withInt_withInt_withInt_(self, negative, intLen, fractLen, expLen);
}

- (ComFasterxmlJacksonCoreJsonToken *)resetIntWithBoolean:(jboolean)negative
                                                  withInt:(jint)intLen {
  return ComFasterxmlJacksonCoreBaseParserBase_resetIntWithBoolean_withInt_(self, negative, intLen);
}

- (ComFasterxmlJacksonCoreJsonToken *)resetFloatWithBoolean:(jboolean)negative
                                                    withInt:(jint)intLen
                                                    withInt:(jint)fractLen
                                                    withInt:(jint)expLen {
  return ComFasterxmlJacksonCoreBaseParserBase_resetFloatWithBoolean_withInt_withInt_withInt_(self, negative, intLen, fractLen, expLen);
}

- (ComFasterxmlJacksonCoreJsonToken *)resetAsNaNWithNSString:(NSString *)valueStr
                                                  withDouble:(jdouble)value {
  [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) resetWithStringWithNSString:valueStr];
  _numberDouble_ = value;
  _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE;
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT);
}

- (jboolean)isNaN {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)) {
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) != 0) {
      jdouble d = _numberDouble_;
      return JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isInfiniteWithDouble_(d);
    }
  }
  return false;
}

- (NSNumber *)getNumberValue {
  if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
    [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
      return JavaLangInteger_valueOfWithInt_(_numberInt_);
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
      return JavaLangLong_valueOfWithLong_(_numberLong_);
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) != 0) {
      return _numberBigInt_;
    }
    return _numberBigDecimal_;
  }
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    return _numberBigDecimal_;
  }
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) == 0) {
    [self _throwInternal];
  }
  return JavaLangDouble_valueOfWithDouble_(_numberDouble_);
}

- (ComFasterxmlJacksonCoreJsonParser_NumberType *)getNumberType {
  if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
    [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN];
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, INT);
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
      return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, LONG);
    }
    return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, BIG_INTEGER);
  }
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, BIG_DECIMAL);
  }
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_NumberType, DOUBLE);
}

- (jint)getIntValue {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
    if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
      return [self _parseIntValue];
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
      [self convertNumberToInt];
    }
  }
  return _numberInt_;
}

- (jlong)getLongValue {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) == 0) {
    if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
      [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG];
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) == 0) {
      [self convertNumberToLong];
    }
  }
  return _numberLong_;
}

- (JavaMathBigInteger *)getBigIntegerValue {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) == 0) {
    if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
      [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT];
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) == 0) {
      [self convertNumberToBigInteger];
    }
  }
  return _numberBigInt_;
}

- (jfloat)getFloatValue {
  jdouble value = [self getDoubleValue];
  return (jfloat) value;
}

- (jdouble)getDoubleValue {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) == 0) {
    if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
      [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE];
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) == 0) {
      [self convertNumberToDouble];
    }
  }
  return _numberDouble_;
}

- (JavaMathBigDecimal *)getDecimalValue {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) == 0) {
    if (_numTypesValid_ == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN) {
      [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL];
    }
    if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) == 0) {
      [self convertNumberToBigDecimal];
    }
  }
  return _numberBigDecimal_;
}

- (void)_parseNumericValueWithInt:(jint)expType {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
    jint len = _intLength_;
    if (len <= 9) {
      jint i = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsIntWithBoolean:_numberNegative_];
      _numberInt_ = i;
      _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
      return;
    }
    if (len <= 18) {
      jlong l = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsLongWithBoolean:_numberNegative_];
      if (len == 10) {
        if (_numberNegative_) {
          if (l >= ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_INT_L) {
            _numberInt_ = (jint) l;
            _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
            return;
          }
        }
        else {
          if (l <= ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_INT_L) {
            _numberInt_ = (jint) l;
            _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
            return;
          }
        }
      }
      _numberLong_ = l;
      _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG;
      return;
    }
    ComFasterxmlJacksonCoreBaseParserBase__parseSlowIntWithInt_(self, expType);
    return;
  }
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT)) {
    ComFasterxmlJacksonCoreBaseParserBase__parseSlowFloatWithInt_(self, expType);
    return;
  }
  [self _reportErrorWithNSString:@"Current token (%s) not numeric, can not use numeric value accessors" withId:_currToken_];
}

- (jint)_parseIntValue {
  if (_currToken_ == JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT)) {
    if (_intLength_ <= 9) {
      jint i = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(_textBuffer_)) contentsAsIntWithBoolean:_numberNegative_];
      _numberInt_ = i;
      _numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
      return i;
    }
  }
  [self _parseNumericValueWithInt:ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT];
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) == 0) {
    [self convertNumberToInt];
  }
  return _numberInt_;
}

- (void)_parseSlowFloatWithInt:(jint)expType {
  ComFasterxmlJacksonCoreBaseParserBase__parseSlowFloatWithInt_(self, expType);
}

- (void)_parseSlowIntWithInt:(jint)expType {
  ComFasterxmlJacksonCoreBaseParserBase__parseSlowIntWithInt_(self, expType);
}

- (void)convertNumberToInt {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
    jint result = (jint) _numberLong_;
    if (((jlong) result) != _numberLong_) {
      [self _reportErrorWithNSString:JreStrcat("$$$", @"Numeric value (", [self getText], @") out of range of int")];
    }
    _numberInt_ = result;
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) != 0) {
    if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BI_MIN_INT))) compareToWithId:_numberBigInt_] > 0 || [((JavaMathBigInteger *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BI_MAX_INT))) compareToWithId:_numberBigInt_] < 0) {
      [self reportOverflowInt];
    }
    _numberInt_ = [((JavaMathBigInteger *) nil_chk(_numberBigInt_)) intValue];
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) != 0) {
    if (_numberDouble_ < ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_INT_D || _numberDouble_ > ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_INT_D) {
      [self reportOverflowInt];
    }
    _numberInt_ = JreFpToInt(_numberDouble_);
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    if ([((JavaMathBigDecimal *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BD_MIN_INT))) compareToWithId:_numberBigDecimal_] > 0 || [((JavaMathBigDecimal *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BD_MAX_INT))) compareToWithId:_numberBigDecimal_] < 0) {
      [self reportOverflowInt];
    }
    _numberInt_ = [((JavaMathBigDecimal *) nil_chk(_numberBigDecimal_)) intValue];
  }
  else {
    [self _throwInternal];
  }
  _numTypesValid_ |= ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT;
}

- (void)convertNumberToLong {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
    _numberLong_ = (jlong) _numberInt_;
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) != 0) {
    if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BI_MIN_LONG))) compareToWithId:_numberBigInt_] > 0 || [((JavaMathBigInteger *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BI_MAX_LONG))) compareToWithId:_numberBigInt_] < 0) {
      [self reportOverflowLong];
    }
    _numberLong_ = [((JavaMathBigInteger *) nil_chk(_numberBigInt_)) longLongValue];
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) != 0) {
    if (_numberDouble_ < ComFasterxmlJacksonCoreBaseParserMinimalBase_MIN_LONG_D || _numberDouble_ > ComFasterxmlJacksonCoreBaseParserMinimalBase_MAX_LONG_D) {
      [self reportOverflowLong];
    }
    _numberLong_ = JreFpToLong(_numberDouble_);
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    if ([((JavaMathBigDecimal *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BD_MIN_LONG))) compareToWithId:_numberBigDecimal_] > 0 || [((JavaMathBigDecimal *) nil_chk(JreLoadStatic(ComFasterxmlJacksonCoreBaseParserMinimalBase, BD_MAX_LONG))) compareToWithId:_numberBigDecimal_] < 0) {
      [self reportOverflowLong];
    }
    _numberLong_ = [((JavaMathBigDecimal *) nil_chk(_numberBigDecimal_)) longLongValue];
  }
  else {
    [self _throwInternal];
  }
  _numTypesValid_ |= ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG;
}

- (void)convertNumberToBigInteger {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    JreStrongAssign(&_numberBigInt_, [((JavaMathBigDecimal *) nil_chk(_numberBigDecimal_)) toBigInteger]);
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
    JreStrongAssign(&_numberBigInt_, JavaMathBigInteger_valueOfWithLong_(_numberLong_));
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
    JreStrongAssign(&_numberBigInt_, JavaMathBigInteger_valueOfWithLong_(_numberInt_));
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) != 0) {
    JreStrongAssign(&_numberBigInt_, [((JavaMathBigDecimal *) nil_chk(JavaMathBigDecimal_valueOfWithDouble_(_numberDouble_))) toBigInteger]);
  }
  else {
    [self _throwInternal];
  }
  _numTypesValid_ |= ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT;
}

- (void)convertNumberToDouble {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) != 0) {
    _numberDouble_ = [((JavaMathBigDecimal *) nil_chk(_numberBigDecimal_)) doubleValue];
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) != 0) {
    _numberDouble_ = [((JavaMathBigInteger *) nil_chk(_numberBigInt_)) doubleValue];
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
    _numberDouble_ = (jdouble) _numberLong_;
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
    _numberDouble_ = (jdouble) _numberInt_;
  }
  else {
    [self _throwInternal];
  }
  _numTypesValid_ |= ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE;
}

- (void)convertNumberToBigDecimal {
  if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE) != 0) {
    JreStrongAssign(&_numberBigDecimal_, ComFasterxmlJacksonCoreIoNumberInput_parseBigDecimalWithNSString_([self getText]));
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT) != 0) {
    JreStrongAssignAndConsume(&_numberBigDecimal_, new_JavaMathBigDecimal_initWithJavaMathBigInteger_(_numberBigInt_));
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG) != 0) {
    JreStrongAssign(&_numberBigDecimal_, JavaMathBigDecimal_valueOfWithLong_(_numberLong_));
  }
  else if ((_numTypesValid_ & ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_INT) != 0) {
    JreStrongAssign(&_numberBigDecimal_, JavaMathBigDecimal_valueOfWithLong_(_numberInt_));
  }
  else {
    [self _throwInternal];
  }
  _numTypesValid_ |= ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL;
}

- (void)_reportMismatchedEndMarkerWithInt:(jint)actCh
                                 withChar:(jchar)expCh {
  ComFasterxmlJacksonCoreJsonJsonReadContext *ctxt = [self getParsingContext];
  [self _reportErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Unexpected close marker '%s': expected '%c' (for %s starting at %s)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharacter_valueOfWithChar_((jchar) actCh), JavaLangCharacter_valueOfWithChar_(expCh), [((ComFasterxmlJacksonCoreJsonJsonReadContext *) nil_chk(ctxt)) typeDesc], [ctxt getStartLocationWithId:[self _getSourceReference]] } count:4 type:NSObject_class_()])];
}

- (jchar)_decodeEscaped {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                            withInt:(jint)ch
                                                            withInt:(jint)index {
  if (ch != '\\') {
    @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:index]);
  }
  jint unescaped = [self _decodeEscaped];
  if (unescaped <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    if (index == 0) {
      return -1;
    }
  }
  jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithInt:unescaped];
  if (bits < 0) {
    @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:unescaped withInt:index]);
  }
  return bits;
}

- (jint)_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                           withChar:(jchar)ch
                                                            withInt:(jint)index {
  if (ch != '\\') {
    @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:index]);
  }
  jchar unescaped = [self _decodeEscaped];
  if (unescaped <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    if (index == 0) {
      return -1;
    }
  }
  jint bits = [((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) decodeBase64CharWithChar:unescaped];
  if (bits < 0) {
    @throw nil_chk([self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:unescaped withInt:index]);
  }
  return bits;
}

- (JavaLangIllegalArgumentException *)reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                                                              withInt:(jint)ch
                                                                                              withInt:(jint)bindex {
  return [self reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:b64variant withInt:ch withInt:bindex withNSString:nil];
}

- (JavaLangIllegalArgumentException *)reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:(ComFasterxmlJacksonCoreBase64Variant *)b64variant
                                                                                              withInt:(jint)ch
                                                                                              withInt:(jint)bindex
                                                                                         withNSString:(NSString *)msg {
  NSString *base;
  if (ch <= ComFasterxmlJacksonCoreBaseParserMinimalBase_INT_SPACE) {
    base = NSString_java_formatWithNSString_withNSObjectArray_(@"Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_toHexStringWithInt_(ch), JavaLangInteger_valueOfWithInt_((bindex + 1)) } count:2 type:NSObject_class_()]);
  }
  else if ([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(b64variant)) usesPaddingCharWithInt:ch]) {
    base = JreStrcat("$C$I$", @"Unexpected padding character ('", [b64variant getPaddingChar], @"') as character #", (bindex + 1), @" of 4-char base64 unit: padding only legal as 3rd or 4th character");
  }
  else if (!JavaLangCharacter_isDefinedWithInt_(ch) || JavaLangCharacter_isISOControlWithInt_(ch)) {
    base = JreStrcat("$$$", @"Illegal character (code 0x", JavaLangInteger_toHexStringWithInt_(ch), @") in base64 content");
  }
  else {
    base = JreStrcat("$C$$$", @"Illegal character '", ((jchar) ch), @"' (code 0x", JavaLangInteger_toHexStringWithInt_(ch), @") in base64 content");
  }
  if (msg != nil) {
    base = JreStrcat("$$$", base, @": ", msg);
  }
  return create_JavaLangIllegalArgumentException_initWithNSString_(base);
}

- (id)_getSourceReference {
  if ([((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, INCLUDE_SOURCE_IN_LOCATION))) enabledInWithInt:_features_]) {
    return [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(_ioContext_)) getSourceReference];
  }
  return nil;
}

+ (IOSIntArray *)growArrayByWithIntArray:(IOSIntArray *)arr
                                 withInt:(jint)more {
  return ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(arr, more);
}

- (void)loadMoreGuaranteed {
  if (![self loadMore]) {
    [self _reportInvalidEOF];
  }
}

- (jboolean)loadMore {
  return false;
}

- (void)_finishString {
}

- (void)dealloc {
  RELEASE_(_ioContext_);
  RELEASE_(_parsingContext_);
  RELEASE_(_nextToken_);
  RELEASE_(_textBuffer_);
  RELEASE_(_nameCopyBuffer_);
  RELEASE_(_byteArrayBuilder_);
  RELEASE_(_binaryValue_);
  RELEASE_(_numberBigInt_);
  RELEASE_(_numberBigDecimal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreVersion;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, 7, 8, -1, -1, 9, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonJsonReadContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 17, 13, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 18, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, 18, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreUtilByteArrayBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 19, 20, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 21, 22, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 23, 20, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonToken;", 0x14, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreJsonParser_NumberType;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 8, 13, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 8, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 8, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 30, 18, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "I", 0x14, 31, 32, 13, -1, -1, -1 },
    { NULL, "I", 0x14, 31, 33, 13, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x4, 34, 32, 35, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x4, 34, 36, 35, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0xc, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, 39, -1 },
    { NULL, "Z", 0x4, -1, -1, 13, -1, 40, -1 },
    { NULL, "V", 0x4, -1, -1, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComFasterxmlJacksonCoreIoIOContext:withInt:);
  methods[1].selector = @selector(version__);
  methods[2].selector = @selector(getCurrentValue);
  methods[3].selector = @selector(setCurrentValueWithId:);
  methods[4].selector = @selector(enableWithComFasterxmlJacksonCoreJsonParser_Feature:);
  methods[5].selector = @selector(disableWithComFasterxmlJacksonCoreJsonParser_Feature:);
  methods[6].selector = @selector(setFeatureMaskWithInt:);
  methods[7].selector = @selector(overrideStdFeaturesWithInt:withInt:);
  methods[8].selector = @selector(_checkStdFeatureChangesWithInt:withInt:);
  methods[9].selector = @selector(getCurrentName);
  methods[10].selector = @selector(overrideCurrentNameWithNSString:);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(isClosed);
  methods[13].selector = @selector(getParsingContext);
  methods[14].selector = @selector(getTokenLocation);
  methods[15].selector = @selector(getCurrentLocation);
  methods[16].selector = @selector(hasTextCharacters);
  methods[17].selector = @selector(getBinaryValueWithComFasterxmlJacksonCoreBase64Variant:);
  methods[18].selector = @selector(getTokenCharacterOffset);
  methods[19].selector = @selector(getTokenLineNr);
  methods[20].selector = @selector(getTokenColumnNr);
  methods[21].selector = @selector(_closeInput);
  methods[22].selector = @selector(_releaseBuffers);
  methods[23].selector = @selector(_handleEOF);
  methods[24].selector = @selector(_eofAsNextChar);
  methods[25].selector = @selector(_getByteArrayBuilder);
  methods[26].selector = @selector(resetWithBoolean:withInt:withInt:withInt:);
  methods[27].selector = @selector(resetIntWithBoolean:withInt:);
  methods[28].selector = @selector(resetFloatWithBoolean:withInt:withInt:withInt:);
  methods[29].selector = @selector(resetAsNaNWithNSString:withDouble:);
  methods[30].selector = @selector(isNaN);
  methods[31].selector = @selector(getNumberValue);
  methods[32].selector = @selector(getNumberType);
  methods[33].selector = @selector(getIntValue);
  methods[34].selector = @selector(getLongValue);
  methods[35].selector = @selector(getBigIntegerValue);
  methods[36].selector = @selector(getFloatValue);
  methods[37].selector = @selector(getDoubleValue);
  methods[38].selector = @selector(getDecimalValue);
  methods[39].selector = @selector(_parseNumericValueWithInt:);
  methods[40].selector = @selector(_parseIntValue);
  methods[41].selector = @selector(_parseSlowFloatWithInt:);
  methods[42].selector = @selector(_parseSlowIntWithInt:);
  methods[43].selector = @selector(convertNumberToInt);
  methods[44].selector = @selector(convertNumberToLong);
  methods[45].selector = @selector(convertNumberToBigInteger);
  methods[46].selector = @selector(convertNumberToDouble);
  methods[47].selector = @selector(convertNumberToBigDecimal);
  methods[48].selector = @selector(_reportMismatchedEndMarkerWithInt:withChar:);
  methods[49].selector = @selector(_decodeEscaped);
  methods[50].selector = @selector(_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:withInt:withInt:);
  methods[51].selector = @selector(_decodeBase64EscapeWithComFasterxmlJacksonCoreBase64Variant:withChar:withInt:);
  methods[52].selector = @selector(reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:withInt:withInt:);
  methods[53].selector = @selector(reportInvalidBase64CharWithComFasterxmlJacksonCoreBase64Variant:withInt:withInt:withNSString:);
  methods[54].selector = @selector(_getSourceReference);
  methods[55].selector = @selector(growArrayByWithIntArray:withInt:);
  methods[56].selector = @selector(loadMoreGuaranteed);
  methods[57].selector = @selector(loadMore);
  methods[58].selector = @selector(_finishString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ioContext_", "LComFasterxmlJacksonCoreIoIOContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_closed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_inputPtr_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_inputEnd_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currInputProcessed_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currInputRow_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currInputRowStart_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_tokenInputTotal_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_tokenInputRow_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_tokenInputCol_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_parsingContext_", "LComFasterxmlJacksonCoreJsonJsonReadContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nextToken_", "LComFasterxmlJacksonCoreJsonToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_textBuffer_", "LComFasterxmlJacksonCoreUtilTextBuffer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_nameCopyBuffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nameCopied_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_byteArrayBuilder_", "LComFasterxmlJacksonCoreUtilByteArrayBuilder;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_binaryValue_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numTypesValid_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberInt_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberLong_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberDouble_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberBigInt_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberBigDecimal_", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_numberNegative_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_intLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_fractLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_expLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComFasterxmlJacksonCoreIoIOContext;I", "version", "setCurrentValue", "LNSObject;", "enable", "LComFasterxmlJacksonCoreJsonParser_Feature;", "disable", "setFeatureMask", "I", (void *)&ComFasterxmlJacksonCoreBaseParserBase__Annotations$0, "overrideStdFeatures", "II", "_checkStdFeatureChanges", "LJavaIoIOException;", "overrideCurrentName", "LNSString;", "getBinaryValue", "LComFasterxmlJacksonCoreBase64Variant;", "LComFasterxmlJacksonCoreJsonParseException;", "reset", "ZIII", "resetInt", "ZI", "resetFloat", "resetAsNaN", "LNSString;D", "_parseNumericValue", "_parseSlowFloat", "_parseSlowInt", "_reportMismatchedEndMarker", "IC", "_decodeBase64Escape", "LComFasterxmlJacksonCoreBase64Variant;II", "LComFasterxmlJacksonCoreBase64Variant;CI", "reportInvalidBase64Char", "LJavaLangIllegalArgumentException;", "LComFasterxmlJacksonCoreBase64Variant;IILNSString;", "growArrayBy", "[II", (void *)&ComFasterxmlJacksonCoreBaseParserBase__Annotations$1, (void *)&ComFasterxmlJacksonCoreBaseParserBase__Annotations$2 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreBaseParserBase = { "ParserBase", "com.fasterxml.jackson.core.base", ptrTable, methods, fields, 7, 0x401, 59, 27, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreBaseParserBase;
}

@end

void ComFasterxmlJacksonCoreBaseParserBase_initWithComFasterxmlJacksonCoreIoIOContext_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, ComFasterxmlJacksonCoreIoIOContext *ctxt, jint features) {
  ComFasterxmlJacksonCoreBaseParserMinimalBase_initWithInt_(self, features);
  self->_currInputRow_ = 1;
  self->_tokenInputRow_ = 1;
  self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  JreStrongAssign(&self->_ioContext_, ctxt);
  JreStrongAssign(&self->_textBuffer_, [((ComFasterxmlJacksonCoreIoIOContext *) nil_chk(ctxt)) constructTextBuffer]);
  ComFasterxmlJacksonCoreJsonDupDetector *dups = [((ComFasterxmlJacksonCoreJsonParser_Feature *) nil_chk(JreLoadEnum(ComFasterxmlJacksonCoreJsonParser_Feature, STRICT_DUPLICATE_DETECTION))) enabledInWithInt:features] ? ComFasterxmlJacksonCoreJsonDupDetector_rootDetectorWithComFasterxmlJacksonCoreJsonParser_(self) : nil;
  JreStrongAssign(&self->_parsingContext_, ComFasterxmlJacksonCoreJsonJsonReadContext_createRootContextWithComFasterxmlJacksonCoreJsonDupDetector_(dups));
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreBaseParserBase_resetIntWithBoolean_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jboolean negative, jint intLen) {
  self->_numberNegative_ = negative;
  self->_intLength_ = intLen;
  self->_fractLength_ = 0;
  self->_expLength_ = 0;
  self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_INT);
}

ComFasterxmlJacksonCoreJsonToken *ComFasterxmlJacksonCoreBaseParserBase_resetFloatWithBoolean_withInt_withInt_withInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jboolean negative, jint intLen, jint fractLen, jint expLen) {
  self->_numberNegative_ = negative;
  self->_intLength_ = intLen;
  self->_fractLength_ = fractLen;
  self->_expLength_ = expLen;
  self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_UNKNOWN;
  return JreLoadEnum(ComFasterxmlJacksonCoreJsonToken, VALUE_NUMBER_FLOAT);
}

void ComFasterxmlJacksonCoreBaseParserBase__parseSlowFloatWithInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jint expType) {
  @try {
    if (expType == ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL) {
      JreStrongAssign(&self->_numberBigDecimal_, [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsDecimal]);
      self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGDECIMAL;
    }
    else {
      self->_numberDouble_ = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsDouble];
      self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_DOUBLE;
    }
  }
  @catch (JavaLangNumberFormatException *nex) {
    [self _wrapErrorWithNSString:JreStrcat("$$C", @"Malformed numeric value '", [self->_textBuffer_ contentsAsString], '\'') withJavaLangThrowable:nex];
  }
}

void ComFasterxmlJacksonCoreBaseParserBase__parseSlowIntWithInt_(ComFasterxmlJacksonCoreBaseParserBase *self, jint expType) {
  NSString *numStr = [((ComFasterxmlJacksonCoreUtilTextBuffer *) nil_chk(self->_textBuffer_)) contentsAsString];
  @try {
    jint len = self->_intLength_;
    IOSCharArray *buf = [self->_textBuffer_ getTextBuffer];
    jint offset = [self->_textBuffer_ getTextOffset];
    if (self->_numberNegative_) {
      ++offset;
    }
    if (ComFasterxmlJacksonCoreIoNumberInput_inLongRangeWithCharArray_withInt_withInt_withBoolean_(buf, offset, len, self->_numberNegative_)) {
      self->_numberLong_ = JavaLangLong_parseLongWithNSString_(numStr);
      self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_LONG;
    }
    else {
      JreStrongAssignAndConsume(&self->_numberBigInt_, new_JavaMathBigInteger_initWithNSString_(numStr));
      self->_numTypesValid_ = ComFasterxmlJacksonCoreBaseParserMinimalBase_NR_BIGINT;
    }
  }
  @catch (JavaLangNumberFormatException *nex) {
    [self _wrapErrorWithNSString:JreStrcat("$$C", @"Malformed numeric value '", numStr, '\'') withJavaLangThrowable:nex];
  }
}

IOSIntArray *ComFasterxmlJacksonCoreBaseParserBase_growArrayByWithIntArray_withInt_(IOSIntArray *arr, jint more) {
  ComFasterxmlJacksonCoreBaseParserBase_initialize();
  if (arr == nil) {
    return [IOSIntArray arrayWithLength:more];
  }
  return JavaUtilArrays_copyOfWithIntArray_withInt_(arr, arr->size_ + more);
}

IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComFasterxmlJacksonCoreBaseParserBase__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreBaseParserBase)
