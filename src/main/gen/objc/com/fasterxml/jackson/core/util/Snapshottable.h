//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/util/Snapshottable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilSnapshottable")
#ifdef RESTRICT_ComFasterxmlJacksonCoreUtilSnapshottable
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilSnapshottable 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonCoreUtilSnapshottable 1
#endif
#undef RESTRICT_ComFasterxmlJacksonCoreUtilSnapshottable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonCoreUtilSnapshottable_) && (INCLUDE_ALL_ComFasterxmlJacksonCoreUtilSnapshottable || defined(INCLUDE_ComFasterxmlJacksonCoreUtilSnapshottable))
#define ComFasterxmlJacksonCoreUtilSnapshottable_

/*!
 @brief Interface that defines one method (see <code>snapshot</code>) for ensuring that we get
  an instance that does not allow modifying state of `this` instance.Instance returned
  may be `this` if (and only if) it is immutable through its API (or, for some limited
  circumstances, if usage is guaranteed not to modify it after this point -- such usage
  is discouraged however); or, if that can not be guaranteed, a newly created copy
  with same configuration and state as `this`.
 <p>
  Interface is intended to be used for persisting state for serialization, or to support
  "re-build" of otherwise immutable objects like factories. Some of the helper objects
  factories use and rely on have mutable state which can not be shared: instead, to support
  re-building, a state object may be created to contain copies (snapshots).
  Intent, therefore, is that caller does not need to know about immutability (or lack thereof)
  of an entity but can simply call <code>snapshot</code>.
 @since 3.0
 */
@protocol ComFasterxmlJacksonCoreUtilSnapshottable < JavaObject >

/*!
 @brief Method to call to get an instance that may not be modified through any other object,
  including `this`.That instance may be `this` if (and only if) this instance is effectively
  immutable (unmodifiable) through its API: if this is not the case, a new copy with same
  configuration must be created and returned.
 */
- (id)snapshot;

@end

@interface ComFasterxmlJacksonCoreUtilSnapshottable : NSObject

+ (id)takeSnapshotWithComFasterxmlJacksonCoreUtilSnapshottable:(id<ComFasterxmlJacksonCoreUtilSnapshottable>)src;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonCoreUtilSnapshottable)

FOUNDATION_EXPORT id ComFasterxmlJacksonCoreUtilSnapshottable_takeSnapshotWithComFasterxmlJacksonCoreUtilSnapshottable_(id<ComFasterxmlJacksonCoreUtilSnapshottable> src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonCoreUtilSnapshottable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonCoreUtilSnapshottable")
