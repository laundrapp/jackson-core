//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-core/src/main/java/com/fasterxml/jackson/core/Base64Variants.java
//

#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/core/Base64Variant.h"
#include "com/fasterxml/jackson/core/Base64Variants.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonCoreBase64Variants)

NSString *ComFasterxmlJacksonCoreBase64Variants_STD_BASE64_ALPHABET = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_MIME;
ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS;
ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_PEM;
ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_MODIFIED_FOR_URL;

@implementation ComFasterxmlJacksonCoreBase64Variants

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComFasterxmlJacksonCoreBase64Variants_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonCoreBase64Variant *)getDefaultVariant {
  return ComFasterxmlJacksonCoreBase64Variants_getDefaultVariant();
}

+ (ComFasterxmlJacksonCoreBase64Variant *)valueOfWithNSString:(NSString *)name {
  return ComFasterxmlJacksonCoreBase64Variants_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreBase64Variant;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonCoreBase64Variant;", 0x9, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDefaultVariant);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STD_BASE64_ALPHABET", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "MIME", "LComFasterxmlJacksonCoreBase64Variant;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "MIME_NO_LINEFEEDS", "LComFasterxmlJacksonCoreBase64Variant;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "PEM", "LComFasterxmlJacksonCoreBase64Variant;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "MODIFIED_FOR_URL", "LComFasterxmlJacksonCoreBase64Variant;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", "LJavaLangIllegalArgumentException;", &ComFasterxmlJacksonCoreBase64Variants_STD_BASE64_ALPHABET, &ComFasterxmlJacksonCoreBase64Variants_MIME, &ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS, &ComFasterxmlJacksonCoreBase64Variants_PEM, &ComFasterxmlJacksonCoreBase64Variants_MODIFIED_FOR_URL };
  static const J2ObjcClassInfo _ComFasterxmlJacksonCoreBase64Variants = { "Base64Variants", "com.fasterxml.jackson.core", ptrTable, methods, fields, 7, 0x11, 3, 5, -1, -1, -1, -1, -1 };
  return &_ComFasterxmlJacksonCoreBase64Variants;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonCoreBase64Variants class]) {
    {
      JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBase64Variants_MIME, new_ComFasterxmlJacksonCoreBase64Variant_initWithNSString_withNSString_withBoolean_withChar_withInt_(@"MIME", ComFasterxmlJacksonCoreBase64Variants_STD_BASE64_ALPHABET, true, '=', 76));
    }
    {
      JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS, new_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withInt_(ComFasterxmlJacksonCoreBase64Variants_MIME, @"MIME-NO-LINEFEEDS", JavaLangInteger_MAX_VALUE));
    }
    JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBase64Variants_PEM, new_ComFasterxmlJacksonCoreBase64Variant_initWithComFasterxmlJacksonCoreBase64Variant_withNSString_withBoolean_withChar_withInt_(ComFasterxmlJacksonCoreBase64Variants_MIME, @"PEM", true, '=', 64));
    {
      JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(ComFasterxmlJacksonCoreBase64Variants_STD_BASE64_ALPHABET);
      [sb setCharAtWithInt:[sb indexOfWithNSString:@"+"] withChar:'-'];
      [sb setCharAtWithInt:[sb indexOfWithNSString:@"/"] withChar:'_'];
      JreStrongAssignAndConsume(&ComFasterxmlJacksonCoreBase64Variants_MODIFIED_FOR_URL, new_ComFasterxmlJacksonCoreBase64Variant_initWithNSString_withNSString_withBoolean_withChar_withInt_(@"MODIFIED-FOR-URL", [sb description], false, ComFasterxmlJacksonCoreBase64Variant_PADDING_CHAR_NONE, JavaLangInteger_MAX_VALUE));
    }
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonCoreBase64Variants)
  }
}

@end

void ComFasterxmlJacksonCoreBase64Variants_init(ComFasterxmlJacksonCoreBase64Variants *self) {
  NSObject_init(self);
}

ComFasterxmlJacksonCoreBase64Variants *new_ComFasterxmlJacksonCoreBase64Variants_init() {
  J2OBJC_NEW_IMPL(ComFasterxmlJacksonCoreBase64Variants, init)
}

ComFasterxmlJacksonCoreBase64Variants *create_ComFasterxmlJacksonCoreBase64Variants_init() {
  J2OBJC_CREATE_IMPL(ComFasterxmlJacksonCoreBase64Variants, init)
}

ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_getDefaultVariant() {
  ComFasterxmlJacksonCoreBase64Variants_initialize();
  return ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS;
}

ComFasterxmlJacksonCoreBase64Variant *ComFasterxmlJacksonCoreBase64Variants_valueOfWithNSString_(NSString *name) {
  ComFasterxmlJacksonCoreBase64Variants_initialize();
  if ([((NSString *) nil_chk(((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(ComFasterxmlJacksonCoreBase64Variants_MIME))->_name_)) isEqual:name]) {
    return ComFasterxmlJacksonCoreBase64Variants_MIME;
  }
  if ([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS))->_name_ isEqual:name]) {
    return ComFasterxmlJacksonCoreBase64Variants_MIME_NO_LINEFEEDS;
  }
  if ([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(ComFasterxmlJacksonCoreBase64Variants_PEM))->_name_ isEqual:name]) {
    return ComFasterxmlJacksonCoreBase64Variants_PEM;
  }
  if ([((ComFasterxmlJacksonCoreBase64Variant *) nil_chk(ComFasterxmlJacksonCoreBase64Variants_MODIFIED_FOR_URL))->_name_ isEqual:name]) {
    return ComFasterxmlJacksonCoreBase64Variants_MODIFIED_FOR_URL;
  }
  if (name == nil) {
    name = @"<null>";
  }
  else {
    name = JreStrcat("C$C", '\'', name, '\'');
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No Base64Variant with name ", name));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonCoreBase64Variants)
